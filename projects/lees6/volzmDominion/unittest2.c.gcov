        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Unit test for whoseTurn() function.
        -:    3: *
        -:    4: * unittest2: unittest2.c dominion.o rngs.o
        -:    5: *      gcc -o unittest2 -g  unittest2.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <assert.h>
        -:   16:
function main called 2 returned 100% blocks executed 78%
        -:   17:int main()
        -:   18:{
        2:   19:    printf("TESTING whoseTurn():\n");
        2:   20:    int validator = 0;
        -:   21:    struct gameState G;
        2:   22:    int numPlayers = 4;
        2:   23:    int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        2:   24:    int seed = 1000;
        -:   25:    int i;
        -:   26:    int r;
        -:   27:
        2:   28:    r = initializeGame(numPlayers, k, seed, &G); // initialize a new game
        2:   29:    if (r == -1){
branch  0 taken 0%
branch  1 taken 100%
    #####:   30:        validator = 1;
    #####:   31:        printf("whoseTurn(): FAIL when initialize a new game.\n");
    #####:   32:    }
        -:   33:
       20:   34:    for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:   35:    {
        8:   36:        G.whoseTurn = i;
        8:   37:        if (whoseTurn(&G) != i) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   38:            validator = 1;
    #####:   39:            printf("whoseTurn(): FAIL - Player %d's turn but Player %d expected. \n", whoseTurn(&G), i);
    #####:   40:        }
        -:   41:        else {
        8:   42:            printf("whoseTurn(): PASS - Player %d's turn and Player %d expected. \n", whoseTurn(&G), i);
        -:   43:        }
        8:   44:    }
        -:   45:
        2:   46:    if (validator == 0)
branch  0 taken 100%
branch  1 taken 0%
        -:   47:    {
        2:   48:        printf("\n\n");
        2:   49:        printf("*****************************************\n");
        2:   50:        printf("*** All tests passed for whoseTurn()! ***\n");
        2:   51:        printf("*****************************************\n");
        2:   52:        printf("\n\n");
        2:   53:    }
        -:   54:    else
        -:   55:    {
    #####:   56:        printf("\n\n");
    #####:   57:        printf("************************************\n");
    #####:   58:        printf("*** There is BUG in whoseTurn()! ***\n");
    #####:   59:        printf("************************************\n");
    #####:   60:        printf("\n\n");
        -:   61:    }
        -:   62:
        2:   63:    return 0;
        -:   64:}
