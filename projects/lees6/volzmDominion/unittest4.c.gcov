        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Unit test for getcost() function.
        -:    3: *
        -:    4: * unittest2: unittest4.c dominion.o rngs.o
        -:    5: *      gcc -o unittest4 -g  unittest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <assert.h>
        -:   16:
function main called 1 returned 100% blocks executed 78%
        -:   17:int main()
        -:   18:{
        1:   19:    printf("TESTING getcost():\n");
        1:   20:    int validator = 0;
        -:   21:    struct gameState G;
        1:   22:    int numPlayers = 4;
        1:   23:    int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   24:    enum CARD {curse, estate, duchy, province,
        -:   25:                copper, silver, gold, adventurer, council_room,
        -:   26:                feast, gardens, mine, remodel, smithy, village,
        -:   27:                baron, great_hall, minion, steward, tribute,
        -:   28:                ambassador, cutpurse, embargo, outpost,
        -:   29:                salvager, sea_hag, treasure_map};
        1:   30:    int values[27] = {0, 2, 5, 8,
        -:   31:                    0, 3, 6, 6, 5,
        -:   32:                    4, 4, 5, 4, 4, 3,
        -:   33:                    4, 3, 5, 3, 5,
        -:   34:                    3, 4, 2, 5,
        -:   35:                    4, 4, 4};
        1:   36:    int seed = 1000;
        -:   37:    int i;
        -:   38:    int r;
        -:   39:
        1:   40:    r = initializeGame(numPlayers, k, seed, &G); // initialize a new game
        1:   41:    if (r == -1)
branch  0 taken 0%
branch  1 taken 100%
        -:   42:    {
    #####:   43:        validator = 1;
    #####:   44:        printf("getcost(): FAIL when initialize a new game.\n");
    #####:   45:    }
        -:   46:
       54:   47:    for (i = curse; i < treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:   48:    {
       26:   49:        if (getCost(i) != values[i])
branch  0 taken 0%
branch  1 taken 100%
        -:   50:        {
    #####:   51:            validator = 1;
    #####:   52:            printf("getcost(): FAIL - cost is %d but resulted %d\n", getCost(i), values[i]);
    #####:   53:        }
        -:   54:        else {
       26:   55:            printf("getcost(): PASS - cost is %d and resulted %d\n", getCost(i), values[i]);
        -:   56:        }
       26:   57:    }
        -:   58:
        1:   59:    if (validator == 0)
branch  0 taken 100%
branch  1 taken 0%
        -:   60:    {
        1:   61:        printf("\n\n");
        1:   62:        printf("***************************************\n");
        1:   63:        printf("*** All tests passed for getcost()! ***\n");
        1:   64:        printf("***************************************\n");
        1:   65:        printf("\n\n");
        1:   66:    }
        -:   67:    else
        -:   68:    {
    #####:   69:        printf("\n\n");
    #####:   70:        printf("**********************************\n");
    #####:   71:        printf("*** There is BUG in getcost()! ***\n");
    #####:   72:        printf("**********************************\n");
    #####:   73:        printf("\n\n");
        -:   74:    }
        -:   75:
        1:   76:    return 0;
        -:   77:}
