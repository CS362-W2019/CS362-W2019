        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Random test for Smithy Card.
        -:    3: *
        -:    4: * randomtestcard1: randomtestcard1.c dominion.o rngs.o
        -:    5: *      gcc -o randomtestcard1 randomtestcard1.c -g dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:#include <math.h>
        -:   17:#include <time.h>
        -:   18:
        -:   19:#define TESTCARD "smithy"
        -:   20:#define MAXRUN 1000
        -:   21:
function main called 1 returned 100% blocks executed 89%
        -:   22:int main()
        -:   23:{
        1:   24:    printf("\n----------------- Random Testing Card: %s ----------------\n", TESTCARD);
        1:   25:    int validator = 1;
        -:   26:    struct gameState G, testG;
        -:   27:    int i, n, r;
        1:   28:    int choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   29:    int handPos = 0;
        -:   30:    int currentPlayer;
        1:   31:    int addedCards = 3;
        1:   32:    int discard = 1;
        -:   33:    int totalCards, testtotalCards;
        1:   34:    int deckFailure = 0;
        1:   35:    int handFailure = 0;
        1:   36:    int discardFailure = 0;
        1:   37:    int testPassed = 0;
        -:   38:
        -:   39:    // initialize random number
        1:   40:    srand(time(NULL));
        -:   41:
        -:   42:    // randomize hand size
     2002:   43:    for (i = 0; i < MAXRUN; i++)
branch  0 taken 1000
branch  1 taken 1
        -:   44:    {
 13152000:   45:        for (n = 0; n < sizeof(struct gameState) / sizeof(int); n++)
branch  0 taken 6575000
branch  1 taken 1000
        -:   46:        {
  6575000:   47:            ((int *)&G)[n] = rand() % 128;
  6575000:   48:        }
        -:   49:        // generate random number of player from 2 to 4
     1000:   50:        G.numPlayers = (rand() % 3) + 2;
     1000:   51:        G.whoseTurn = rand() % G.numPlayers;
     1000:   52:        currentPlayer = whoseTurn(&G);
     1000:   53:        G.handCount[currentPlayer] = (rand() % (MAX_HAND / 2)) + 1;
        -:   54:
     1000:   55:        G.deckCount[currentPlayer] = (rand() % (MAX_DECK / 2)) + 1;
     1000:   56:        G.discardCount[currentPlayer] = (rand() % (MAX_DECK / 2)) + 1;
     1000:   57:        handPos = (rand() % G.handCount[currentPlayer]);
        -:   58:        // copy the game state to a test case
     1000:   59:        memcpy(&testG, &G, sizeof(struct gameState));
        -:   60:
        -:   61:        // play Smithy
     1000:   62:        r = cardEffect(smithy, choice1, choice2, choice3, &testG, handPos, &bonus);
     1000:   63:        if (r != 0)
branch  0 taken 0
branch  1 taken 1000
        -:   64:        {
    #####:   65:            validator = 0;
    #####:   66:            printf("FAIL when initializing playing %s card.\n", TESTCARD);
    #####:   67:        }
     1000:   68:        if (testG.handCount[currentPlayer] != G.handCount[currentPlayer] + addedCards - discard)
branch  0 taken 1000
branch  1 taken 0
        -:   69:        {
     1000:   70:            printf("Test FAILED - incorrect number of cards drawn!\n");
     1000:   71:            handFailure++;
     1000:   72:            validator = 0;
     1000:   73:        }
        -:   74:
     1000:   75:        totalCards = G.deckCount[currentPlayer] + G.discardCount[currentPlayer];
     1000:   76:        testtotalCards = testG.deckCount[currentPlayer] + testG.discardCount[currentPlayer];
     1000:   77:        if (testtotalCards != totalCards - addedCards)
branch  0 taken 1000
branch  1 taken 0
        -:   78:        {
     1000:   79:            printf("Test Failed - incorrect number of cards removed!\n");
     1000:   80:            deckFailure++;
     1000:   81:            validator = 0;
     1000:   82:        };
        -:   83:
     1000:   84:        if (validator)
branch  0 taken 0
branch  1 taken 1000
        -:   85:        {
    #####:   86:            printf("\n\n");
    #####:   87:            printf("*****************************************\n");
    #####:   88:            printf("*** All tests passed for %s card! ***\n", TESTCARD);
    #####:   89:            printf("*****************************************\n");
    #####:   90:            printf("\n\n");
    #####:   91:        }
        -:   92:        else
        -:   93:        {
     1000:   94:            printf("\n\n");
     1000:   95:            printf("************************************\n");
     1000:   96:            printf("*** There is BUG in %s card! ***\n", TESTCARD);
     1000:   97:            printf("************************************\n");
     1000:   98:            printf("\n\n");
        -:   99:        }
     1000:  100:    }
        -:  101:
        1:  102:    printf("Number of Tests Passed: %d\n", testPassed);
        1:  103:    printf("Number of Cards Drawn To Hand Failed: %d\n", handFailure);
        1:  104:    printf("Number of Smithy Discarded Fails: %d\n\n", discardFailure);
        -:  105:
        1:  106:    return 0;
        -:  107:};
