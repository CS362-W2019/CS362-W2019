        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Unit test for isGameOver() function.
        -:    3: * 
        -:    4: * unittest2: unittest3.c dominion.o rngs.o
        -:    5: *      gcc -o unittest3 -g  unittest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:
function main called 1 returned 100% blocks executed 78%
        -:   16:int main()
        -:   17:{
        1:   18:    printf("TESTING isGameOver():\n");
        1:   19:    int validator = 0;
        -:   20:    struct gameState G;
        1:   21:    int numPlayers = 4;
        1:   22:    int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   23:    int seed = 1000;
        -:   24:    int r;
        -:   25:    int i;
        -:   26:
        1:   27:    r = initializeGame(numPlayers, k, seed, &G); // initialize a new game
        1:   28:    if (r == -1) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   29:        validator = 1;
    #####:   30:        printf("isGameOver(): FAIL when initialize a new game.\n");
    #####:   31:    }
        1:   32:    int provinceCards = G.supplyCount[province];
        -:   33:
        -:   34:    // game continues when supply of province is more than 0
       26:   35:    for (i = 0; i < provinceCards; i++)
branch  0 taken 92%
branch  1 taken 8%
        -:   36:    {
       12:   37:        printf("Number of Province Cards: %d\n", G.supplyCount[province]);
       12:   38:        if (isGameOver(&G) == 1)
branch  0 taken 0%
branch  1 taken 100%
        -:   39:        {
    #####:   40:            validator = 1;
    #####:   41:            printf("isGameOver(): FAIL when there is %d cards.\n", G.supplyCount[province]);
    #####:   42:        }
        -:   43:        else
        -:   44:        {
       12:   45:            printf("isGameOver(): PASS when there is %d cards.\n", G.supplyCount[province]);
        -:   46:        }
       12:   47:        G.supplyCount[province]--;
        -:   48:
       12:   49:        if (G.supplyCount[province] == 0) {
branch  0 taken 8%
branch  1 taken 92%
        1:   50:            printf("NO MORE PROVINCE CARDS!\n");
        1:   51:            if (isGameOver(&G) == 0)
branch  0 taken 0%
branch  1 taken 100%
        -:   52:            {
    #####:   53:                validator = 1;
    #####:   54:                printf("isGameOver(): FAIL when there is %d cards.\n", G.supplyCount[province]);
    #####:   55:            }
        -:   56:            else
        -:   57:            {
        1:   58:                printf("isGameOver(): PASS when there is %d cards.\n", G.supplyCount[province]);
        -:   59:            }
        1:   60:        }
       12:   61:    }
        -:   62:
        1:   63:    if (validator == 0)
branch  0 taken 100%
branch  1 taken 0%
        -:   64:    {
        1:   65:        printf("\n\n");
        1:   66:        printf("******************************************\n");
        1:   67:        printf("*** All tests passed for isGameOver()! ***\n");
        1:   68:        printf("******************************************\n");
        1:   69:        printf("\n\n");
        1:   70:    }
        -:   71:    else
        -:   72:    {
    #####:   73:        printf("\n\n");
    #####:   74:        printf("*************************************\n");
    #####:   75:        printf("*** There is BUG in isGameOver()! ***\n");
    #####:   76:        printf("*************************************\n");
    #####:   77:        printf("\n\n");
        -:   78:    }
        -:   79:
        1:   80:    return 0;
        -:   81:}
