        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Unit test for numHandCards() function.
        -:    3: *
        -:    4: * unittest1: unittest1.c dominion.o rngs.o
        -:    5: *      gcc -o unittest1 -g  unittest1.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:
function main called 3 returned 100% blocks executed 83%
        -:   16:int main() {
        3:   17:    printf("TESTING numHandCards():\n");
        3:   18:    int validator = 0;
        -:   19:    struct gameState G;
        3:   20:    int numPlayers = 4;
        3:   21:    int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        3:   22:    int seed = 1000;
        -:   23:    int i;
        -:   24:    int j;
        -:   25:    int r;
        -:   26:
        3:   27:    r = initializeGame(numPlayers, k, seed, &G); // initialize a new game
        3:   28:    if (r == -1){
branch  0 taken 0%
branch  1 taken 100%
    #####:   29:        validator = 1;
    #####:   30:        printf("numHandCards(): FAIL when initialize a new game.\n");
    #####:   31:    }
        -:   32:
       30:   33:    for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:   34:    {
       12:   35:        printf("Player %d\n", i + 1);
       12:   36:        G.whoseTurn = i;
      144:   37:        for (j = 0; j < 5; j++)
branch  0 taken 83%
branch  1 taken 17%
        -:   38:        {
       60:   39:            G.handCount[i] = j;
        -:   40:
       60:   41:            if (numHandCards(&G) != j)
branch  0 taken 0%
branch  1 taken 100%
        -:   42:            {
    #####:   43:                validator = 1;
    #####:   44:                printf("numHandCards(): FAIL - %d cards, %d expexted. \n", numHandCards(&G), j);
    #####:   45:            }
        -:   46:            else {
       60:   47:                printf("numHandCards(): PASS - %d cards, %d expexted. \n", numHandCards(&G), j);
        -:   48:            }
       60:   49:        }
       12:   50:    }
        -:   51:
        3:   52:    if (validator == 0)
branch  0 taken 100%
branch  1 taken 0%
        -:   53:    {
        3:   54:        printf("\n\n");
        3:   55:        printf("*****************************************\n");
        3:   56:        printf("*** All tests passed for numHandCards()! ***\n");
        3:   57:        printf("*****************************************\n");
        3:   58:        printf("\n\n");
        3:   59:    }
        -:   60:    else
        -:   61:    {
    #####:   62:        printf("\n\n");
    #####:   63:        printf("************************************\n");
    #####:   64:        printf("*** There is BUG in numHandCards()! ***\n");
    #####:   65:        printf("************************************\n");
    #####:   66:        printf("\n\n");
        -:   67:    }
        -:   68:
        3:   69:    return 0;
        -:   70:}
