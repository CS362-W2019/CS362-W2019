        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:#define TESTCARD "adventurer"
        -:   10:
function main called 1 returned 100% blocks executed 82%
        -:   11:int main()
        -:   12:{
        1:   13:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        1:   14:    int validator = 0;
        -:   15:    struct gameState G, testG;
        1:   16:    int numPlayers = 2;
        1:   17:    int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   18:    int seed = 1000;
        -:   19:    int i, r;
        1:   20:    int thisPlayer = 0;
        -:   21:    int cardDrawn1, cardDrawn2;
        1:   22:    int treasureCnt1 = 0;
        1:   23:    int treasureCnt2 = 0;
        -:   24:
        1:   25:    r = initializeGame(numPlayers, k, seed, &G); // initialize a new game
        1:   26:    if (r == -1)
branch  0 taken 0%
branch  1 taken 100%
        -:   27:    {
    #####:   28:        validator = 1;
    #####:   29:        printf("FAIL when initialize a new game for %s card.\n", TESTCARD);
    #####:   30:    }
        -:   31:    // copy the game state to a test case
        1:   32:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   33:
        1:   34:    printf("\n----------- TEST 1: set initial cards --------------\n");
        -:   35:    //handcount before adventurer play
        1:   36:    if (G.handCount[thisPlayer] == testG.handCount[thisPlayer])
branch  0 taken 100%
branch  1 taken 0%
        -:   37:    {
        1:   38:        printf("PASS - handcount before Adventurer card is %d and expected %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer]);
        1:   39:    }
        -:   40:    else
        -:   41:    {
    #####:   42:        validator = 1;
    #####:   43:        printf("FAIL - handcount before Adventurer card is %d but expected %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer]);
        -:   44:    }
        -:   45:
        1:   46:    printf("\n----------- TEST 2: give %s card --------------\n", TESTCARD);
        -:   47:    // set adventurer card to player
        1:   48:    testG.hand[thisPlayer][testG.handCount[thisPlayer]] = adventurer;
        1:   49:    testG.handCount[thisPlayer]++; // increment number of card due to Adventurer card
        1:   50:    if (G.handCount[thisPlayer] + 1 == testG.handCount[thisPlayer])
branch  0 taken 100%
branch  1 taken 0%
        -:   51:    {
        1:   52:        printf("PASS - handcount after Adventurer card is %d and %d expected\n", G.handCount[thisPlayer] + 1, testG.handCount[thisPlayer]);
        1:   53:    }
        -:   54:    else
        -:   55:    {
    #####:   56:        validator = 1;
    #####:   57:        printf("FAIL - handcount after Adventurer card is %d but %d expected\n", G.handCount[thisPlayer] + 1, testG.handCount[thisPlayer]);
        -:   58:    }
        -:   59:
        1:   60:    printf("\n----------- TEST 3: play %s card --------------\n", TESTCARD);
        -:   61:    // play adventurer
        1:   62:    cardEffect(adventurer, 0, 0, 0, &testG, 0, 0); // play the adventurer card
        1:   63:    if (G.handCount[thisPlayer] + 3 == testG.handCount[thisPlayer])
branch  0 taken 100%
branch  1 taken 0%
        -:   64:    {
        1:   65:        printf("PASS - handcount %d and %d expected.\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + 3);
        1:   66:    }
        -:   67:    else
        -:   68:    {
    #####:   69:        validator = 1;
    #####:   70:        printf("FAIL - handcount %d but %d expected.\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + 3);
        -:   71:    }
        -:   72:
        1:   73:    printf("\n----------- TEST 4: check two treasure cards  --------------\n");
        -:   74:    //verify that at least 2 new treasure cards were added to hand
       18:   75:    for (i = 0; i < testG.handCount[thisPlayer]; i++)
branch  0 taken 89%
branch  1 taken 11%
        -:   76:    {
        8:   77:        cardDrawn1 = testG.hand[thisPlayer][i];
       12:   78:        if (cardDrawn1 == copper || cardDrawn1 == silver || cardDrawn1 == gold){
branch  0 taken 25%
branch  1 taken 75%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        6:   79:            treasureCnt1++;
        6:   80:        }
        8:   81:    }
       12:   82:    for (i = 0; i < G.handCount[thisPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:   83:    {
        5:   84:        cardDrawn2 = G.hand[thisPlayer][i];
        7:   85:        if (cardDrawn2 == copper || cardDrawn2 == silver || cardDrawn2 == gold)
branch  0 taken 20%
branch  1 taken 80%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        4:   86:            treasureCnt2++;
        5:   87:    }
        1:   88:    if ((treasureCnt1 - treasureCnt2) == 2){
branch  0 taken 100%
branch  1 taken 0%
        1:   89:        printf("PASS - %d additional treasure cards drawn.\n", (treasureCnt1 - treasureCnt2));
        1:   90:    }
        -:   91:    else{
    #####:   92:        validator = 1;
    #####:   93:        printf("FAIL - 2 treasure cards expected but %d treasure cards added.\n", (treasureCnt1 - treasureCnt2));
        -:   94:    }
        -:   95:
        -:   96:
        1:   97:    if (validator == 0)
branch  0 taken 100%
branch  1 taken 0%
        -:   98:    {
        1:   99:        printf("\n\n");
        1:  100:        printf("*********************************************\n");
        1:  101:        printf("*** All tests passed for Adventurer card! ***\n");
        1:  102:        printf("*********************************************\n");
        1:  103:        printf("\n\n");
        1:  104:    }
        -:  105:    else
        -:  106:    {
    #####:  107:        printf("\n\n");
    #####:  108:        printf("****************************************\n");
    #####:  109:        printf("*** There is BUG in Adventurer card! ***\n");
    #####:  110:        printf("****************************************\n");
    #####:  111:        printf("\n\n");
        -:  112:    }
        -:  113:
        1:  114:    return 0;
        -:  115:}
