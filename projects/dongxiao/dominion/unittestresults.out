make[1]: Entering directory `/nfs/stak/users/dongxiao/CS362/CS362-W2019/projects/dongxiao/dominion'
./unittest1
------------------------ Test kindomCards() --------------------------
TEST SUCCESSFULLY COMPLETED: k[0]=7, r[0]=7
TEST SUCCESSFULLY COMPLETED: k[1]=9, r[1]=9
TEST SUCCESSFULLY COMPLETED: k[2]=10, r[2]=10
TEST SUCCESSFULLY COMPLETED: k[3]=11, r[3]=11
TEST SUCCESSFULLY COMPLETED: k[4]=13, r[4]=13
TEST SUCCESSFULLY COMPLETED: k[5]=14, r[5]=14
TEST SUCCESSFULLY COMPLETED: k[6]=15, r[6]=15
TEST SUCCESSFULLY COMPLETED: k[7]=18, r[7]=18
TEST SUCCESSFULLY COMPLETED: k[8]=23, r[8]=23
TEST SUCCESSFULLY COMPLETED: k[9]=26, r[9]=26
gcov -b dominion.c
File 'dominion.c'
Lines executed:25.36% of 560
Branches executed:24.82% of 415
Taken at least once:16.14% of 415
Calls executed:13.68% of 95
Creating 'dominion.c.gcov'

make[1]: Leaving directory `/nfs/stak/users/dongxiao/CS362/CS362-W2019/projects/dongxiao/dominion'
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 300 returned 100% blocks executed 83%
      300:    8:int compare(const void* a, const void* b) {
      300:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      300:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       80:   12:    return -1;
      220:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 2 returned 100% blocks executed 100%
        2:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        2:   23:  int* k = malloc(10 * sizeof(int));
        2:   24:  k[0] = k1;
        2:   25:  k[1] = k2;
        2:   26:  k[2] = k3;
        2:   27:  k[3] = k4;
        2:   28:  k[4] = k5;
        2:   29:  k[5] = k6;
        2:   30:  k[6] = k7;
        2:   31:  k[7] = k8;
        2:   32:  k[8] = k9;
        2:   33:  k[9] = k10;
        2:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 11 returned 100% blocks executed 89%
       11:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       11:   44:  SelectStream(1);
call    0 returned 100%
       11:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       11:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       11:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      112:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1119:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1018:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   62:	    {
        1:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       10:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       10:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       10:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       10:   89:      state->supplyCount[estate] = 8;
       10:   90:      state->supplyCount[duchy] = 8;
       10:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       10:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  102:  state->supplyCount[silver] = 40;
       10:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      210:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1650:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1550:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      100:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
       20:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       90:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      100:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1450:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       30:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       20:  140:      state->deckCount[i] = 0;
       80:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       60:  143:	  state->deck[i][j] = estate;
       60:  144:	  state->deckCount[i]++;
        -:  145:	}
      160:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      140:  148:	  state->deck[i][j] = copper;
      140:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       30:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       20:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       30:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       20:  166:      state->handCount[i] = 0;
       20:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      280:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      270:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       10:  182:  state->outpostPlayed = 0;
       10:  183:  state->phase = 0;
       10:  184:  state->numActions = 1;
       10:  185:  state->numBuys = 1;
       10:  186:  state->playedCardCount = 0;
       10:  187:  state->whoseTurn = 0;
       10:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       60:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       50:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       10:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       10:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 28 returned 100% blocks executed 100%
       28:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       28:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       28:  209:  if (state->deckCount[player] < 1)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        8:  210:    return -1;
       20:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      240:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      200:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      200:  216:    newDeck[newDeckPos] = state->deck[player][card];
      200:  217:    newDeckPos++;
      670:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      470:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      200:  221:    state->deckCount[player]--;
        -:  222:  }
      220:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      200:  224:    state->deck[player][i] = newDeck[i];
      200:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       20:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 11 returned 100% blocks executed 100%
       11:  346:int whoseTurn(struct gameState *state) {
       11:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 118 returned 100% blocks executed 85%
      118:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      118:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        8:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        8:  538:    state->deckCount[player] = state->discardCount[player];
        8:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        8:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        8:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        8:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        8:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        8:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      110:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      110:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      110:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      110:  576:    state->deckCount[player]--;
      110:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      110:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://declarations of the card functions
        -:  647:int adventurerAction(int currentPlayer, struct gameState *state);
        -:  648:int smithyAction(int currentPlayer, struct gameState *state, int handPos);
        -:  649:int council_roomAction(int currentPlayer, struct gameState *state, int handPos);
        -:  650:int feastAction(int currentPlayer, struct gameState *state, int choice1);
        -:  651:int remodelAction(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos);
        -:  652:
        -:  653:
        -:  654:
function cardEffect called 11 returned 100% blocks executed 3%
       11:  655:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  656:{
        -:  657:  int i;
        -:  658:  int j;
        -:  659:  int k;
        -:  660://  int x;
        -:  661:  int index;
       11:  662:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       11:  663:  int nextPlayer = currentPlayer + 1;
        -:  664:
       11:  665:  int tributeRevealedCards[2] = {-1, -1};
        -:  666://  int temphand[MAX_HAND];// moved above the if statement
        -:  667://  int drawntreasure=0;
        -:  668://  int cardDrawn;
        -:  669://  int z = 0;// this is the counter for the temp hand
       11:  670:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  671:    nextPlayer = 0;
        -:  672:  }
        -:  673:  
        -:  674:	
        -:  675:  //uses switch to select card and perform actions
       11:  676:  switch( card ) 
branch  0 taken 0%
branch  1 taken 100%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  677:    {
        -:  678:    case adventurer:
    #####:  679:    	adventurerAction(currentPlayer, state);
call    0 never executed
    #####:  680:	return 0;
        -:  681:    case council_room:
       11:  682: 	council_roomAction(currentPlayer, state, handPos);
call    0 returned 100%
       11:  683:      	return 0;
        -:  684:			
        -:  685:    case feast:
    #####:  686:	feastAction(currentPlayer, state, choice1);	
call    0 never executed
    #####:  687:      	return 0;
        -:  688:			
        -:  689:    case gardens:
    #####:  690:      return -1;
        -:  691:			
        -:  692:    case mine:
    #####:  693:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  694:
    #####:  695:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  696:	{
    #####:  697:	  return -1;
        -:  698:	}
        -:  699:		
    #####:  700:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  701:	{
    #####:  702:	  return -1;
        -:  703:	}
        -:  704:
    #####:  705:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  706:	{
    #####:  707:	  return -1;
        -:  708:	}
        -:  709:
    #####:  710:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  711:
        -:  712:      //discard card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  714:
        -:  715:      //discard trashed card
    #####:  716:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  717:	{
    #####:  718:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  719:	    {
    #####:  720:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  721:	      break;
        -:  722:	    }
        -:  723:	}
        -:  724:			
    #####:  725:      return 0;
        -:  726:			
        -:  727:    case remodel:
    #####:  728:      remodelAction(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  729:      return 0;
        -:  730:		
        -:  731:    case smithy:
        -:  732:      //+3 Cards
    #####:  733:      smithyAction(currentPlayer, state, handPos);
call    0 never executed
    #####:  734:      return 0;
        -:  735:		
        -:  736:    case village:
        -:  737:      //+1 Card
    #####:  738:      drawCard(currentPlayer, state);
call    0 never executed
        -:  739:			
        -:  740:      //+2 Actions
    #####:  741:      state->numActions = state->numActions + 2;
        -:  742:			
        -:  743:      //discard played card from hand
    #####:  744:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  745:      return 0;
        -:  746:		
        -:  747:    case baron:
    #####:  748:      state->numBuys++;//Increase buys by 1!
    #####:  749:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  750:	int p = 0;//Iterator for hand!
    #####:  751:	int card_not_discarded = 1;//Flag for discard set!
    #####:  752:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  753:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  754:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  755:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  756:	    state->discardCount[currentPlayer]++;
    #####:  757:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  758:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  759:	    }
    #####:  760:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  761:	    state->handCount[currentPlayer]--;
    #####:  762:	    card_not_discarded = 0;//Exit the loop
        -:  763:	  }
    #####:  764:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  765:	    if(DEBUG) {
        -:  766:	      printf("No estate cards in your hand, invalid choice\n");
        -:  767:	      printf("Must gain an estate if there are any\n");
        -:  768:	    }
    #####:  769:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  770:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  771:	      state->supplyCount[estate]--;//Decrement estates
    #####:  772:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  773:		isGameOver(state);
call    0 never executed
        -:  774:	      }
        -:  775:	    }
    #####:  776:	    card_not_discarded = 0;//Exit the loop
        -:  777:	  }
        -:  778:			    
        -:  779:	  else{
    #####:  780:	    p++;//Next card
        -:  781:	  }
        -:  782:	}
        -:  783:      }
        -:  784:			    
        -:  785:      else{
    #####:  786:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  787:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  788:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  789:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  790:	    isGameOver(state);
call    0 never executed
        -:  791:	  }
        -:  792:	}
        -:  793:      }
        -:  794:	    
        -:  795:      
    #####:  796:      return 0;
        -:  797:		
        -:  798:    case great_hall:
        -:  799:      //+1 Card
    #####:  800:      drawCard(currentPlayer, state);
call    0 never executed
        -:  801:			
        -:  802:      //+1 Actions
    #####:  803:      state->numActions++;
        -:  804:			
        -:  805:      //discard card from hand
    #####:  806:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  807:      return 0;
        -:  808:		
        -:  809:    case minion:
        -:  810:      //+1 action
    #####:  811:      state->numActions++;
        -:  812:			
        -:  813:      //discard card from hand
    #####:  814:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  815:			
    #####:  816:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  817:	{
    #####:  818:	  state->coins = state->coins + 2;
        -:  819:	}
        -:  820:			
    #####:  821:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  822:	{
        -:  823:	  //discard hand
    #####:  824:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  825:	    {
    #####:  826:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  827:	    }
        -:  828:				
        -:  829:	  //draw 4
    #####:  830:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  831:	    {
    #####:  832:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  833:	    }
        -:  834:				
        -:  835:	  //other players discard hand and redraw if hand size > 4
    #####:  836:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  837:	    {
    #####:  838:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  839:		{
    #####:  840:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  841:		    {
        -:  842:		      //discard hand
    #####:  843:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  844:			{
    #####:  845:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  846:			}
        -:  847:							
        -:  848:		      //draw 4
    #####:  849:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  850:			{
    #####:  851:			  drawCard(i, state);
call    0 never executed
        -:  852:			}
        -:  853:		    }
        -:  854:		}
        -:  855:	    }
        -:  856:				
        -:  857:	}
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case steward:
    #####:  861:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  862:	{
        -:  863:	  //+2 cards
    #####:  864:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  865:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  866:	}
    #####:  867:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  868:	{
        -:  869:	  //+2 coins
    #####:  870:	  state->coins = state->coins + 2;
        -:  871:	}
        -:  872:      else
        -:  873:	{
        -:  874:	  //trash 2 cards in hand
    #####:  875:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  876:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  877:	}
        -:  878:			
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case tribute:
    #####:  884:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  885:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  886:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  887:	  state->deckCount[nextPlayer]--;
        -:  888:	}
    #####:  889:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  890:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  891:	  state->discardCount[nextPlayer]--;
        -:  892:	}
        -:  893:	else{
        -:  894:	  //No Card to Reveal
        -:  895:	  if (DEBUG){
        -:  896:	    printf("No cards to reveal\n");
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      else{
    #####:  902:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  903:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  904:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  905:	    state->deckCount[nextPlayer]++;
    #####:  906:	    state->discard[nextPlayer][i] = -1;
    #####:  907:	    state->discardCount[nextPlayer]--;
        -:  908:	  }
        -:  909:			    
    #####:  910:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  911:	} 
    #####:  912:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  913:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  914:	state->deckCount[nextPlayer]--;
    #####:  915:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
        -:  918:      }    
        -:  919:		       
    #####:  920:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  921:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  922:	state->playedCardCount++;
    #####:  923:	tributeRevealedCards[1] = -1;
        -:  924:      }
        -:  925:
    #####:  926:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  927:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  928:	  state->coins += 2;
        -:  929:	}
        -:  930:		    
    #####:  931:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  932:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  933:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  934:	}
        -:  935:	else{//Action Card
    #####:  936:	  state->numActions = state->numActions + 2;
        -:  937:	}
        -:  938:      }
        -:  939:	    
    #####:  940:      return 0;
        -:  941:		
        -:  942:    case ambassador:
    #####:  943:      j = 0;		//used to check if player has enough cards to discard
        -:  944:
    #####:  945:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  946:	{
    #####:  947:	  return -1;				
        -:  948:	}
        -:  949:
    #####:  950:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  951:	{
    #####:  952:	  return -1;
        -:  953:	}
        -:  954:
    #####:  955:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  956:	{
    #####:  957:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  958:	    {
    #####:  959:	      j++;
        -:  960:	    }
        -:  961:	}
    #####:  962:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  return -1;				
        -:  965:	}
        -:  966:
        -:  967:      if (DEBUG) 
        -:  968:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  969:
        -:  970:      //increase supply count for choosen card by amount being discarded
    #####:  971:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  972:			
        -:  973:      //each other player gains a copy of revealed card
    #####:  974:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  977:	    {
    #####:  978:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  979:	    }
        -:  980:	}
        -:  981:
        -:  982:      //discard played card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  984:
        -:  985:      //trash copies of cards returned to supply
    #####:  986:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  987:	{
    #####:  988:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  989:	    {
    #####:  990:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  991:		{
    #####:  992:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  993:		  break;
        -:  994:		}
        -:  995:	    }
        -:  996:	}			
        -:  997:
    #####:  998:      return 0;
        -:  999:		
        -: 1000:    case cutpurse:
        -: 1001:
    #####: 1002:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1003:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
    #####: 1005:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1008:		{
    #####: 1009:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1010:		    {
    #####: 1011:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1012:		      break;
        -: 1013:		    }
    #####: 1014:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1015:		    {
    #####: 1016:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1017:			{
        -: 1018:			  if (DEBUG)
        -: 1019:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1020:			}	
    #####: 1021:		      break;
        -: 1022:		    }		
        -: 1023:		}
        -: 1024:					
        -: 1025:	    }
        -: 1026:				
        -: 1027:	}				
        -: 1028:
        -: 1029:      //discard played card from hand
    #####: 1030:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1031:
    #####: 1032:      return 0;
        -: 1033:
        -: 1034:		
        -: 1035:    case embargo: 
        -: 1036:      //+2 Coins
    #####: 1037:      state->coins = state->coins + 2;
        -: 1038:			
        -: 1039:      //see if selected pile is in play
    #####: 1040:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1041:	{
    #####: 1042:	  return -1;
        -: 1043:	}
        -: 1044:			
        -: 1045:      //add embargo token to selected supply pile
    #####: 1046:      state->embargoTokens[choice1]++;
        -: 1047:			
        -: 1048:      //trash card
    #####: 1049:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case outpost:
        -: 1053:      //set outpost flag
    #####: 1054:      state->outpostPlayed++;
        -: 1055:			
        -: 1056:      //discard card
    #####: 1057:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1058:      return 0;
        -: 1059:		
        -: 1060:    case salvager:
        -: 1061:      //+1 buy
    #####: 1062:      state->numBuys++;
        -: 1063:			
    #####: 1064:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1065:	{
        -: 1066:	  //gain coins equal to trashed card
    #####: 1067:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1068:	  //trash card
    #####: 1069:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1070:	}
        -: 1071:			
        -: 1072:      //discard card
    #####: 1073:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1074:      return 0;
        -: 1075:		
        -: 1076:    case sea_hag:
    #####: 1077:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1078:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1079:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1080:	  state->discardCount[i]++;
    #####: 1081:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1082:	}
        -: 1083:      }
    #####: 1084:      return 0;
        -: 1085:		
        -: 1086:    case treasure_map:
        -: 1087:      //search hand for another treasure_map
    #####: 1088:      index = -1;
    #####: 1089:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1090:	{
    #####: 1091:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1092:	    {
    #####: 1093:	      index = i;
    #####: 1094:	      break;
        -: 1095:	    }
        -: 1096:	}
    #####: 1097:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1098:	{
        -: 1099:	  //trash both treasure cards
    #####: 1100:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1101:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1102:
        -: 1103:	  //gain 4 Gold cards
    #####: 1104:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1105:	    {
    #####: 1106:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1107:	    }
        -: 1108:				
        -: 1109:	  //return success
    #####: 1110:	  return 1;
        -: 1111:	}
        -: 1112:			
        -: 1113:      //no second treasure_map found in hand
    #####: 1114:      return -1;
        -: 1115:    }
        -: 1116:	
    #####: 1117:  return -1;
        -: 1118:}
        -: 1119:
function discardCard called 11 returned 100% blocks executed 78%
       11: 1120:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1121:{
        -: 1122:	
        -: 1123:  //if card is not trashed, added to Played pile 
       11: 1124:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1125:    {
        -: 1126:      //add card to played pile
       11: 1127:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       11: 1128:      state->playedCardCount++;
        -: 1129:    }
        -: 1130:	
        -: 1131:  //set played card to -1
       11: 1132:  state->hand[currentPlayer][handPos] = -1;
        -: 1133:	
        -: 1134:  //remove card from player's hand
       11: 1135:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1136:    {
        -: 1137:      //reduce number of cards in hand
    #####: 1138:      state->handCount[currentPlayer]--;
        -: 1139:    }
       11: 1140:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1141:    {
        -: 1142:      //reduce number of cards in hand
    #####: 1143:      state->handCount[currentPlayer]--;
        -: 1144:    }
        -: 1145:  else 	
        -: 1146:    {
        -: 1147:      //replace discarded card with last card in hand
       11: 1148:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1149:      //set last card to -1
       11: 1150:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1151:      //reduce number of cards in hand
       11: 1152:      state->handCount[currentPlayer]--;
        -: 1153:    }
        -: 1154:	
       11: 1155:  return 0;
        -: 1156:}
        -: 1157:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1158:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1159:{
        -: 1160:  //Note: supplyPos is enum of choosen card
        -: 1161:	
        -: 1162:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1163:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1164:    {
    #####: 1165:      return -1;
        -: 1166:    }
        -: 1167:	
        -: 1168:  //added card for [whoseTurn] current player:
        -: 1169:  // toFlag = 0 : add to discard
        -: 1170:  // toFlag = 1 : add to deck
        -: 1171:  // toFlag = 2 : add to hand
        -: 1172:
    #####: 1173:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1174:    {
    #####: 1175:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1176:      state->deckCount[player]++;
        -: 1177:    }
    #####: 1178:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1179:    {
    #####: 1180:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1181:      state->handCount[player]++;
        -: 1182:    }
        -: 1183:  else
        -: 1184:    {
    #####: 1185:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1186:      state->discardCount[player]++;
        -: 1187:    }
        -: 1188:	
        -: 1189:  //decrease number in supply pile
    #####: 1190:  state->supplyCount[supplyPos]--;
        -: 1191:	 
    #####: 1192:  return 0;
        -: 1193:}
        -: 1194:
function updateCoins called 10 returned 100% blocks executed 82%
       10: 1195:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1196:{
        -: 1197:  int i;
        -: 1198:	
        -: 1199:  //reset coin count
       10: 1200:  state->coins = 0;
        -: 1201:
        -: 1202:  //add coins for each Treasure card in player's hand
       60: 1203:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1204:    {
       50: 1205:      if (state->hand[player][i] == copper)
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
        -: 1206:	{
       36: 1207:	  state->coins += 1;
        -: 1208:	}
       14: 1209:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1210:	{
    #####: 1211:	  state->coins += 2;
        -: 1212:	}
       14: 1213:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1214:	{
    #####: 1215:	  state->coins += 3;
        -: 1216:	}	
        -: 1217:    }	
        -: 1218:
        -: 1219:  //add bonus
       10: 1220:  state->coins += bonus;
        -: 1221:
       10: 1222:  return 0;
        -: 1223:}
        -: 1224:
function adventurerAction called 0 returned 0% blocks executed 0%
    #####: 1225:int adventurerAction(int currentPlayer, struct gameState *state)
        -: 1226:{
        -: 1227:	int cardDrawn;
    #####: 1228:	int drawntreasure = 0;
        -: 1229:	int temphand[MAX_HAND];
    #####: 1230:	int z = 0; //this is the counter for the temp hand
    #####: 1231:	while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1232:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1233:			shuffle(currentPlayer, state);
call    0 never executed
        -: 1234:		}
    #####: 1235:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1236:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1237:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1238:			drawntreasure++;
        -: 1239:		else{
    #####: 1240:			temphand[z]=cardDrawn;
        -: 1241:			/********************** BUG ***************************************/
        -: 1242:			/* Do not remove the top card. So the player have two copies of cardDrawn */
        -: 1243:			//state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1244:			z++;
        -: 1245:		}
        -: 1246:      }
    #####: 1247:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1248:      		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1249:		z=z-1;
        -: 1250:      }
    #####: 1251:      return 0;
        -: 1252:}	
        -: 1253:
        -: 1254:
function smithyAction called 0 returned 0% blocks executed 0%
    #####: 1255:int smithyAction(int currentPlayer, struct gameState *state, int handPos)
        -: 1256:{      
        -: 1257:	int i;
    #####: 1258:	for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1259:	{
    #####: 1260:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1261:	}
        -: 1262:			
        -: 1263:	//discard card from hand
        -: 1264:	/************************** BUG *************************/
        -: 1265:	/* Trash the card instead of put the card in the discard pile */
        -: 1266:	//discardCard(handPos, currentPlayer, state, 0);
    #####: 1267:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1268:	return 0;
        -: 1269:}     
        -: 1270:
        -: 1271:
function council_roomAction called 11 returned 100% blocks executed 100%
       11: 1272:int council_roomAction(int currentPlayer, struct gameState *state, int handPos)
        -: 1273:{
        -: 1274:	int i;
        -: 1275:	//+4 Cards
       55: 1276:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1277:	{
       44: 1278:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1279:	}
        -: 1280:			
        -: 1281:	//+1 Buy
       11: 1282:	state->numBuys++;
        -: 1283:			
        -: 1284:	//Each other player draws a card
       35: 1285:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -: 1286:	{
        -: 1287:	  /*************************** BUG *****************************/
        -: 1288:	  /* every player draws a card */
        -: 1289:	 // if ( i != currentPlayer )
        -: 1290:	   // {
       24: 1291:	    	drawCard(i, state);
call    0 returned 100%
        -: 1292:	   // }
        -: 1293:	}
        -: 1294:			
        -: 1295:	//put played card in played card pile
       11: 1296:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       11: 1297:	return 0;
        -: 1298:}
        -: 1299:
function feastAction called 0 returned 0% blocks executed 0%
    #####: 1300:int feastAction(int currentPlayer, struct gameState *state, int choice1)
        -: 1301:{
        -: 1302:	int i;
        -: 1303:	int temphand[MAX_HAND];
        -: 1304:	//gain card with cost up to 5
        -: 1305:	//Backup hand  OFF-By-ONE??????????????
    #####: 1306:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1307:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1308:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1309:	}
        -: 1310:	//Backup hand
        -: 1311:
        -: 1312:	//Update Coins for Buy
    #####: 1313:	updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1314:	int x = 1;//Condition to loop on
    #####: 1315:	while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1316:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1317:			if (DEBUG)
        -: 1318:		    		printf("None of that card left, sorry!\n");
        -: 1319:
        -: 1320:			if (DEBUG){
        -: 1321:		   		 printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1322:		  	}
        -: 1323:		}
    #####: 1324:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1325:		  	printf("That card is too expensive!\n");
call    0 never executed
        -: 1326:
        -: 1327:		  	if (DEBUG){
        -: 1328:		    	printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1329:		  	}
        -: 1330:		}	
        -: 1331:		else{
        -: 1332:			if (DEBUG){
        -: 1333:		    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1334:		  	}
        -: 1335:
    #####: 1336:		  	gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
        -: 1337:			/************************* BUG *************************************/
        -: 1338:			/* infinite loop */
        -: 1339:		  	//x = 0;//No more buying cards
        -: 1340:
        -: 1341:		  	if (DEBUG){
        -: 1342:		    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1343:	  		}
        -: 1344:
        -: 1345:		}
        -: 1346:	}	     
        -: 1347:
        -: 1348:	//Reset Hand
    #####: 1349:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1350:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1351:		temphand[i] = -1;
        -: 1352:	}
    #####: 1353:	return 0;
        -: 1354:}
        -: 1355:
function remodelAction called 0 returned 0% blocks executed 0%
    #####: 1356:int remodelAction(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1357:{
        -: 1358:	int i;
    #####: 1359:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1360:
    #####: 1361:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1362:	{
    #####: 1363:	  return -1;
        -: 1364:	}
        -: 1365:
    #####: 1366:	gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1367:
        -: 1368:	//discard card from hand
    #####: 1369:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1370:
        -: 1371:	//discard trashed card
    #####: 1372:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1373:	{
    #####: 1374:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1375:	    {
    #####: 1376:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1377:	      break;
        -: 1378:	    }
        -: 1379:	}
    #####: 1380:	return 0;
        -: 1381:}
        -: 1382:
        -: 1383://end of dominion.c
        -: 1384:
make[1]: Entering directory `/nfs/stak/users/dongxiao/CS362/CS362-W2019/projects/dongxiao/dominion'
gcc -o unittest2 -g unittest2.c dominion.o rngs.o -Wall -fpic -coverage -lm -std=c99
./unittest2
------------------------------- Test whoseTurn() --------------------------------
-----------------------Testing whoseTurn----------------------

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: Whose turn: 0

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: Whose turn: 1

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: Whose turn: 2

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: Whose turn: 3
gcov -b dominion.c
File 'dominion.c'
Lines executed:26.43% of 560
Branches executed:25.30% of 415
Taken at least once:17.11% of 415
Calls executed:13.68% of 95
Creating 'dominion.c.gcov'

make[1]: Leaving directory `/nfs/stak/users/dongxiao/CS362/CS362-W2019/projects/dongxiao/dominion'
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 540 returned 100% blocks executed 83%
      540:    8:int compare(const void* a, const void* b) {
      540:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      540:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      144:   12:    return -1;
      396:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 2 returned 100% blocks executed 100%
        2:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        2:   23:  int* k = malloc(10 * sizeof(int));
        2:   24:  k[0] = k1;
        2:   25:  k[1] = k2;
        2:   26:  k[2] = k3;
        2:   27:  k[3] = k4;
        2:   28:  k[4] = k5;
        2:   29:  k[5] = k6;
        2:   30:  k[6] = k7;
        2:   31:  k[7] = k8;
        2:   32:  k[8] = k9;
        2:   33:  k[9] = k10;
        2:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 15 returned 100% blocks executed 95%
       15:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       15:   44:  SelectStream(1);
call    0 returned 100%
       15:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       15:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       15:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      156:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1559:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1418:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   62:	    {
        1:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       14:   73:  if (numPlayers == 2)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -:   74:    {
       10:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        4:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        4:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       14:   87:  if (numPlayers == 2)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -:   88:    {
       10:   89:      state->supplyCount[estate] = 8;
       10:   90:      state->supplyCount[duchy] = 8;
       10:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        4:   95:      state->supplyCount[estate] = 12;
        4:   96:      state->supplyCount[duchy] = 12;
        4:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       14:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  102:  state->supplyCount[silver] = 40;
       14:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      294:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     2310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     2170:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      140:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
       28:  115:		  if (numPlayers == 2){ 
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
       10:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        4:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      126:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2030:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       50:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  139:    {
       36:  140:      state->deckCount[i] = 0;
      144:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      108:  143:	  state->deck[i][j] = estate;
      108:  144:	  state->deckCount[i]++;
        -:  145:	}
      288:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      252:  148:	  state->deck[i][j] = copper;
      252:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       50:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  155:    {
       36:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       50:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       36:  166:      state->handCount[i] = 0;
       36:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      392:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      378:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       14:  182:  state->outpostPlayed = 0;
       14:  183:  state->phase = 0;
       14:  184:  state->numActions = 1;
       14:  185:  state->numBuys = 1;
       14:  186:  state->playedCardCount = 0;
       14:  187:  state->whoseTurn = 0;
       14:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       84:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       70:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       14:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       14:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 44 returned 100% blocks executed 100%
       44:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       44:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       44:  209:  if (state->deckCount[player] < 1)
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        8:  210:    return -1;
       36:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      432:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      360:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      360:  216:    newDeck[newDeckPos] = state->deck[player][card];
      360:  217:    newDeckPos++;
     1184:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      824:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      360:  221:    state->deckCount[player]--;
        -:  222:  }
      396:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      360:  224:    state->deck[player][i] = newDeck[i];
      360:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       36:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 15 returned 100% blocks executed 100%
       15:  346:int whoseTurn(struct gameState *state) {
       15:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 138 returned 100% blocks executed 85%
      138:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      138:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        8:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        8:  538:    state->deckCount[player] = state->discardCount[player];
        8:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        8:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        8:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        8:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        8:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        8:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      130:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      130:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      130:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      130:  576:    state->deckCount[player]--;
      130:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      130:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://declarations of the card functions
        -:  647:int adventurerAction(int currentPlayer, struct gameState *state);
        -:  648:int smithyAction(int currentPlayer, struct gameState *state, int handPos);
        -:  649:int council_roomAction(int currentPlayer, struct gameState *state, int handPos);
        -:  650:int feastAction(int currentPlayer, struct gameState *state, int choice1);
        -:  651:int remodelAction(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos);
        -:  652:
        -:  653:
        -:  654:
function cardEffect called 11 returned 100% blocks executed 3%
       11:  655:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  656:{
        -:  657:  int i;
        -:  658:  int j;
        -:  659:  int k;
        -:  660://  int x;
        -:  661:  int index;
       11:  662:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       11:  663:  int nextPlayer = currentPlayer + 1;
        -:  664:
       11:  665:  int tributeRevealedCards[2] = {-1, -1};
        -:  666://  int temphand[MAX_HAND];// moved above the if statement
        -:  667://  int drawntreasure=0;
        -:  668://  int cardDrawn;
        -:  669://  int z = 0;// this is the counter for the temp hand
       11:  670:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  671:    nextPlayer = 0;
        -:  672:  }
        -:  673:  
        -:  674:	
        -:  675:  //uses switch to select card and perform actions
       11:  676:  switch( card ) 
branch  0 taken 0%
branch  1 taken 100%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  677:    {
        -:  678:    case adventurer:
    #####:  679:    	adventurerAction(currentPlayer, state);
call    0 never executed
    #####:  680:	return 0;
        -:  681:    case council_room:
       11:  682: 	council_roomAction(currentPlayer, state, handPos);
call    0 returned 100%
       11:  683:      	return 0;
        -:  684:			
        -:  685:    case feast:
    #####:  686:	feastAction(currentPlayer, state, choice1);	
call    0 never executed
    #####:  687:      	return 0;
        -:  688:			
        -:  689:    case gardens:
    #####:  690:      return -1;
        -:  691:			
        -:  692:    case mine:
    #####:  693:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  694:
    #####:  695:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  696:	{
    #####:  697:	  return -1;
        -:  698:	}
        -:  699:		
    #####:  700:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  701:	{
    #####:  702:	  return -1;
        -:  703:	}
        -:  704:
    #####:  705:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  706:	{
    #####:  707:	  return -1;
        -:  708:	}
        -:  709:
    #####:  710:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  711:
        -:  712:      //discard card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  714:
        -:  715:      //discard trashed card
    #####:  716:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  717:	{
    #####:  718:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  719:	    {
    #####:  720:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  721:	      break;
        -:  722:	    }
        -:  723:	}
        -:  724:			
    #####:  725:      return 0;
        -:  726:			
        -:  727:    case remodel:
    #####:  728:      remodelAction(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  729:      return 0;
        -:  730:		
        -:  731:    case smithy:
        -:  732:      //+3 Cards
    #####:  733:      smithyAction(currentPlayer, state, handPos);
call    0 never executed
    #####:  734:      return 0;
        -:  735:		
        -:  736:    case village:
        -:  737:      //+1 Card
    #####:  738:      drawCard(currentPlayer, state);
call    0 never executed
        -:  739:			
        -:  740:      //+2 Actions
    #####:  741:      state->numActions = state->numActions + 2;
        -:  742:			
        -:  743:      //discard played card from hand
    #####:  744:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  745:      return 0;
        -:  746:		
        -:  747:    case baron:
    #####:  748:      state->numBuys++;//Increase buys by 1!
    #####:  749:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  750:	int p = 0;//Iterator for hand!
    #####:  751:	int card_not_discarded = 1;//Flag for discard set!
    #####:  752:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  753:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  754:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  755:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  756:	    state->discardCount[currentPlayer]++;
    #####:  757:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  758:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  759:	    }
    #####:  760:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  761:	    state->handCount[currentPlayer]--;
    #####:  762:	    card_not_discarded = 0;//Exit the loop
        -:  763:	  }
    #####:  764:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  765:	    if(DEBUG) {
        -:  766:	      printf("No estate cards in your hand, invalid choice\n");
        -:  767:	      printf("Must gain an estate if there are any\n");
        -:  768:	    }
    #####:  769:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  770:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  771:	      state->supplyCount[estate]--;//Decrement estates
    #####:  772:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  773:		isGameOver(state);
call    0 never executed
        -:  774:	      }
        -:  775:	    }
    #####:  776:	    card_not_discarded = 0;//Exit the loop
        -:  777:	  }
        -:  778:			    
        -:  779:	  else{
    #####:  780:	    p++;//Next card
        -:  781:	  }
        -:  782:	}
        -:  783:      }
        -:  784:			    
        -:  785:      else{
    #####:  786:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  787:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  788:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  789:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  790:	    isGameOver(state);
call    0 never executed
        -:  791:	  }
        -:  792:	}
        -:  793:      }
        -:  794:	    
        -:  795:      
    #####:  796:      return 0;
        -:  797:		
        -:  798:    case great_hall:
        -:  799:      //+1 Card
    #####:  800:      drawCard(currentPlayer, state);
call    0 never executed
        -:  801:			
        -:  802:      //+1 Actions
    #####:  803:      state->numActions++;
        -:  804:			
        -:  805:      //discard card from hand
    #####:  806:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  807:      return 0;
        -:  808:		
        -:  809:    case minion:
        -:  810:      //+1 action
    #####:  811:      state->numActions++;
        -:  812:			
        -:  813:      //discard card from hand
    #####:  814:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  815:			
    #####:  816:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  817:	{
    #####:  818:	  state->coins = state->coins + 2;
        -:  819:	}
        -:  820:			
    #####:  821:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  822:	{
        -:  823:	  //discard hand
    #####:  824:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  825:	    {
    #####:  826:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  827:	    }
        -:  828:				
        -:  829:	  //draw 4
    #####:  830:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  831:	    {
    #####:  832:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  833:	    }
        -:  834:				
        -:  835:	  //other players discard hand and redraw if hand size > 4
    #####:  836:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  837:	    {
    #####:  838:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  839:		{
    #####:  840:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  841:		    {
        -:  842:		      //discard hand
    #####:  843:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  844:			{
    #####:  845:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  846:			}
        -:  847:							
        -:  848:		      //draw 4
    #####:  849:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  850:			{
    #####:  851:			  drawCard(i, state);
call    0 never executed
        -:  852:			}
        -:  853:		    }
        -:  854:		}
        -:  855:	    }
        -:  856:				
        -:  857:	}
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case steward:
    #####:  861:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  862:	{
        -:  863:	  //+2 cards
    #####:  864:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  865:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  866:	}
    #####:  867:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  868:	{
        -:  869:	  //+2 coins
    #####:  870:	  state->coins = state->coins + 2;
        -:  871:	}
        -:  872:      else
        -:  873:	{
        -:  874:	  //trash 2 cards in hand
    #####:  875:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  876:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  877:	}
        -:  878:			
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case tribute:
    #####:  884:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  885:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  886:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  887:	  state->deckCount[nextPlayer]--;
        -:  888:	}
    #####:  889:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  890:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  891:	  state->discardCount[nextPlayer]--;
        -:  892:	}
        -:  893:	else{
        -:  894:	  //No Card to Reveal
        -:  895:	  if (DEBUG){
        -:  896:	    printf("No cards to reveal\n");
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      else{
    #####:  902:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  903:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  904:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  905:	    state->deckCount[nextPlayer]++;
    #####:  906:	    state->discard[nextPlayer][i] = -1;
    #####:  907:	    state->discardCount[nextPlayer]--;
        -:  908:	  }
        -:  909:			    
    #####:  910:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  911:	} 
    #####:  912:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  913:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  914:	state->deckCount[nextPlayer]--;
    #####:  915:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
        -:  918:      }    
        -:  919:		       
    #####:  920:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  921:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  922:	state->playedCardCount++;
    #####:  923:	tributeRevealedCards[1] = -1;
        -:  924:      }
        -:  925:
    #####:  926:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  927:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  928:	  state->coins += 2;
        -:  929:	}
        -:  930:		    
    #####:  931:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  932:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  933:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  934:	}
        -:  935:	else{//Action Card
    #####:  936:	  state->numActions = state->numActions + 2;
        -:  937:	}
        -:  938:      }
        -:  939:	    
    #####:  940:      return 0;
        -:  941:		
        -:  942:    case ambassador:
    #####:  943:      j = 0;		//used to check if player has enough cards to discard
        -:  944:
    #####:  945:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  946:	{
    #####:  947:	  return -1;				
        -:  948:	}
        -:  949:
    #####:  950:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  951:	{
    #####:  952:	  return -1;
        -:  953:	}
        -:  954:
    #####:  955:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  956:	{
    #####:  957:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  958:	    {
    #####:  959:	      j++;
        -:  960:	    }
        -:  961:	}
    #####:  962:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  return -1;				
        -:  965:	}
        -:  966:
        -:  967:      if (DEBUG) 
        -:  968:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  969:
        -:  970:      //increase supply count for choosen card by amount being discarded
    #####:  971:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  972:			
        -:  973:      //each other player gains a copy of revealed card
    #####:  974:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  977:	    {
    #####:  978:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  979:	    }
        -:  980:	}
        -:  981:
        -:  982:      //discard played card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  984:
        -:  985:      //trash copies of cards returned to supply
    #####:  986:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  987:	{
    #####:  988:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  989:	    {
    #####:  990:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  991:		{
    #####:  992:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  993:		  break;
        -:  994:		}
        -:  995:	    }
        -:  996:	}			
        -:  997:
    #####:  998:      return 0;
        -:  999:		
        -: 1000:    case cutpurse:
        -: 1001:
    #####: 1002:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1003:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
    #####: 1005:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1008:		{
    #####: 1009:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1010:		    {
    #####: 1011:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1012:		      break;
        -: 1013:		    }
    #####: 1014:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1015:		    {
    #####: 1016:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1017:			{
        -: 1018:			  if (DEBUG)
        -: 1019:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1020:			}	
    #####: 1021:		      break;
        -: 1022:		    }		
        -: 1023:		}
        -: 1024:					
        -: 1025:	    }
        -: 1026:				
        -: 1027:	}				
        -: 1028:
        -: 1029:      //discard played card from hand
    #####: 1030:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1031:
    #####: 1032:      return 0;
        -: 1033:
        -: 1034:		
        -: 1035:    case embargo: 
        -: 1036:      //+2 Coins
    #####: 1037:      state->coins = state->coins + 2;
        -: 1038:			
        -: 1039:      //see if selected pile is in play
    #####: 1040:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1041:	{
    #####: 1042:	  return -1;
        -: 1043:	}
        -: 1044:			
        -: 1045:      //add embargo token to selected supply pile
    #####: 1046:      state->embargoTokens[choice1]++;
        -: 1047:			
        -: 1048:      //trash card
    #####: 1049:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case outpost:
        -: 1053:      //set outpost flag
    #####: 1054:      state->outpostPlayed++;
        -: 1055:			
        -: 1056:      //discard card
    #####: 1057:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1058:      return 0;
        -: 1059:		
        -: 1060:    case salvager:
        -: 1061:      //+1 buy
    #####: 1062:      state->numBuys++;
        -: 1063:			
    #####: 1064:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1065:	{
        -: 1066:	  //gain coins equal to trashed card
    #####: 1067:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1068:	  //trash card
    #####: 1069:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1070:	}
        -: 1071:			
        -: 1072:      //discard card
    #####: 1073:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1074:      return 0;
        -: 1075:		
        -: 1076:    case sea_hag:
    #####: 1077:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1078:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1079:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1080:	  state->discardCount[i]++;
    #####: 1081:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1082:	}
        -: 1083:      }
    #####: 1084:      return 0;
        -: 1085:		
        -: 1086:    case treasure_map:
        -: 1087:      //search hand for another treasure_map
    #####: 1088:      index = -1;
    #####: 1089:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1090:	{
    #####: 1091:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1092:	    {
    #####: 1093:	      index = i;
    #####: 1094:	      break;
        -: 1095:	    }
        -: 1096:	}
    #####: 1097:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1098:	{
        -: 1099:	  //trash both treasure cards
    #####: 1100:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1101:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1102:
        -: 1103:	  //gain 4 Gold cards
    #####: 1104:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1105:	    {
    #####: 1106:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1107:	    }
        -: 1108:				
        -: 1109:	  //return success
    #####: 1110:	  return 1;
        -: 1111:	}
        -: 1112:			
        -: 1113:      //no second treasure_map found in hand
    #####: 1114:      return -1;
        -: 1115:    }
        -: 1116:	
    #####: 1117:  return -1;
        -: 1118:}
        -: 1119:
function discardCard called 11 returned 100% blocks executed 78%
       11: 1120:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1121:{
        -: 1122:	
        -: 1123:  //if card is not trashed, added to Played pile 
       11: 1124:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1125:    {
        -: 1126:      //add card to played pile
       11: 1127:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       11: 1128:      state->playedCardCount++;
        -: 1129:    }
        -: 1130:	
        -: 1131:  //set played card to -1
       11: 1132:  state->hand[currentPlayer][handPos] = -1;
        -: 1133:	
        -: 1134:  //remove card from player's hand
       11: 1135:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1136:    {
        -: 1137:      //reduce number of cards in hand
    #####: 1138:      state->handCount[currentPlayer]--;
        -: 1139:    }
       11: 1140:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1141:    {
        -: 1142:      //reduce number of cards in hand
    #####: 1143:      state->handCount[currentPlayer]--;
        -: 1144:    }
        -: 1145:  else 	
        -: 1146:    {
        -: 1147:      //replace discarded card with last card in hand
       11: 1148:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1149:      //set last card to -1
       11: 1150:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1151:      //reduce number of cards in hand
       11: 1152:      state->handCount[currentPlayer]--;
        -: 1153:    }
        -: 1154:	
       11: 1155:  return 0;
        -: 1156:}
        -: 1157:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1158:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1159:{
        -: 1160:  //Note: supplyPos is enum of choosen card
        -: 1161:	
        -: 1162:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1163:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1164:    {
    #####: 1165:      return -1;
        -: 1166:    }
        -: 1167:	
        -: 1168:  //added card for [whoseTurn] current player:
        -: 1169:  // toFlag = 0 : add to discard
        -: 1170:  // toFlag = 1 : add to deck
        -: 1171:  // toFlag = 2 : add to hand
        -: 1172:
    #####: 1173:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1174:    {
    #####: 1175:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1176:      state->deckCount[player]++;
        -: 1177:    }
    #####: 1178:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1179:    {
    #####: 1180:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1181:      state->handCount[player]++;
        -: 1182:    }
        -: 1183:  else
        -: 1184:    {
    #####: 1185:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1186:      state->discardCount[player]++;
        -: 1187:    }
        -: 1188:	
        -: 1189:  //decrease number in supply pile
    #####: 1190:  state->supplyCount[supplyPos]--;
        -: 1191:	 
    #####: 1192:  return 0;
        -: 1193:}
        -: 1194:
function updateCoins called 14 returned 100% blocks executed 82%
       14: 1195:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1196:{
        -: 1197:  int i;
        -: 1198:	
        -: 1199:  //reset coin count
       14: 1200:  state->coins = 0;
        -: 1201:
        -: 1202:  //add coins for each Treasure card in player's hand
       84: 1203:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1204:    {
       70: 1205:      if (state->hand[player][i] == copper)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -: 1206:	{
       51: 1207:	  state->coins += 1;
        -: 1208:	}
       19: 1209:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1210:	{
    #####: 1211:	  state->coins += 2;
        -: 1212:	}
       19: 1213:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1214:	{
    #####: 1215:	  state->coins += 3;
        -: 1216:	}	
        -: 1217:    }	
        -: 1218:
        -: 1219:  //add bonus
       14: 1220:  state->coins += bonus;
        -: 1221:
       14: 1222:  return 0;
        -: 1223:}
        -: 1224:
function adventurerAction called 0 returned 0% blocks executed 0%
    #####: 1225:int adventurerAction(int currentPlayer, struct gameState *state)
        -: 1226:{
        -: 1227:	int cardDrawn;
    #####: 1228:	int drawntreasure = 0;
        -: 1229:	int temphand[MAX_HAND];
    #####: 1230:	int z = 0; //this is the counter for the temp hand
    #####: 1231:	while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1232:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1233:			shuffle(currentPlayer, state);
call    0 never executed
        -: 1234:		}
    #####: 1235:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1236:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1237:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1238:			drawntreasure++;
        -: 1239:		else{
    #####: 1240:			temphand[z]=cardDrawn;
        -: 1241:			/********************** BUG ***************************************/
        -: 1242:			/* Do not remove the top card. So the player have two copies of cardDrawn */
        -: 1243:			//state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1244:			z++;
        -: 1245:		}
        -: 1246:      }
    #####: 1247:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1248:      		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1249:		z=z-1;
        -: 1250:      }
    #####: 1251:      return 0;
        -: 1252:}	
        -: 1253:
        -: 1254:
function smithyAction called 0 returned 0% blocks executed 0%
    #####: 1255:int smithyAction(int currentPlayer, struct gameState *state, int handPos)
        -: 1256:{      
        -: 1257:	int i;
    #####: 1258:	for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1259:	{
    #####: 1260:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1261:	}
        -: 1262:			
        -: 1263:	//discard card from hand
        -: 1264:	/************************** BUG *************************/
        -: 1265:	/* Trash the card instead of put the card in the discard pile */
        -: 1266:	//discardCard(handPos, currentPlayer, state, 0);
    #####: 1267:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1268:	return 0;
        -: 1269:}     
        -: 1270:
        -: 1271:
function council_roomAction called 11 returned 100% blocks executed 100%
       11: 1272:int council_roomAction(int currentPlayer, struct gameState *state, int handPos)
        -: 1273:{
        -: 1274:	int i;
        -: 1275:	//+4 Cards
       55: 1276:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1277:	{
       44: 1278:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1279:	}
        -: 1280:			
        -: 1281:	//+1 Buy
       11: 1282:	state->numBuys++;
        -: 1283:			
        -: 1284:	//Each other player draws a card
       35: 1285:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -: 1286:	{
        -: 1287:	  /*************************** BUG *****************************/
        -: 1288:	  /* every player draws a card */
        -: 1289:	 // if ( i != currentPlayer )
        -: 1290:	   // {
       24: 1291:	    	drawCard(i, state);
call    0 returned 100%
        -: 1292:	   // }
        -: 1293:	}
        -: 1294:			
        -: 1295:	//put played card in played card pile
       11: 1296:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       11: 1297:	return 0;
        -: 1298:}
        -: 1299:
function feastAction called 0 returned 0% blocks executed 0%
    #####: 1300:int feastAction(int currentPlayer, struct gameState *state, int choice1)
        -: 1301:{
        -: 1302:	int i;
        -: 1303:	int temphand[MAX_HAND];
        -: 1304:	//gain card with cost up to 5
        -: 1305:	//Backup hand  OFF-By-ONE??????????????
    #####: 1306:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1307:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1308:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1309:	}
        -: 1310:	//Backup hand
        -: 1311:
        -: 1312:	//Update Coins for Buy
    #####: 1313:	updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1314:	int x = 1;//Condition to loop on
    #####: 1315:	while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1316:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1317:			if (DEBUG)
        -: 1318:		    		printf("None of that card left, sorry!\n");
        -: 1319:
        -: 1320:			if (DEBUG){
        -: 1321:		   		 printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1322:		  	}
        -: 1323:		}
    #####: 1324:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1325:		  	printf("That card is too expensive!\n");
call    0 never executed
        -: 1326:
        -: 1327:		  	if (DEBUG){
        -: 1328:		    	printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1329:		  	}
        -: 1330:		}	
        -: 1331:		else{
        -: 1332:			if (DEBUG){
        -: 1333:		    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1334:		  	}
        -: 1335:
    #####: 1336:		  	gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
        -: 1337:			/************************* BUG *************************************/
        -: 1338:			/* infinite loop */
        -: 1339:		  	//x = 0;//No more buying cards
        -: 1340:
        -: 1341:		  	if (DEBUG){
        -: 1342:		    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1343:	  		}
        -: 1344:
        -: 1345:		}
        -: 1346:	}	     
        -: 1347:
        -: 1348:	//Reset Hand
    #####: 1349:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1350:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1351:		temphand[i] = -1;
        -: 1352:	}
    #####: 1353:	return 0;
        -: 1354:}
        -: 1355:
function remodelAction called 0 returned 0% blocks executed 0%
    #####: 1356:int remodelAction(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1357:{
        -: 1358:	int i;
    #####: 1359:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1360:
    #####: 1361:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1362:	{
    #####: 1363:	  return -1;
        -: 1364:	}
        -: 1365:
    #####: 1366:	gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1367:
        -: 1368:	//discard card from hand
    #####: 1369:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1370:
        -: 1371:	//discard trashed card
    #####: 1372:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1373:	{
    #####: 1374:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1375:	    {
    #####: 1376:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1377:	      break;
        -: 1378:	    }
        -: 1379:	}
    #####: 1380:	return 0;
        -: 1381:}
        -: 1382:
        -: 1383://end of dominion.c
        -: 1384:
make[1]: Entering directory `/nfs/stak/users/dongxiao/CS362/CS362-W2019/projects/dongxiao/dominion'
gcc -o unittest3 -g unittest3.c dominion.o rngs.o -Wall -fpic -coverage -lm -std=c99
./unittest3
----------------------------- Test playCard() --------------------------
-----------------------Testing playCard----------------------

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: phase is 1
TEST SUCCESSFULLY COMPLETED: phase is 1, state not altered
TEST SUCCESSFULLY COMPLETED: numActions is 0
TEST SUCCESSFULLY COMPLETED: numActions is 0, state not altered
TEST SUCCESSFULLY COMPLETED: Not an action card
TEST SUCCESSFULLY COMPLETED: Not an action card, state not altered
TEST SUCCESSFULLY COMPLETED: Play gardens
TEST SUCCESSFULLY COMPLETED: Play gardens, state not altered

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: Valid play, state not altered

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: Invalid play, state not altered

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: Valid play, state not altered

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: Valid play, state not altered

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: Invalid play, state not altered

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: Invalid play, state not altered

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: Valid play, state not altered

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: Valid play, state not altered

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: Valid play, state not altered

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: Valid play, state not altered
gcov -b dominion.c
File 'dominion.c'
Lines executed:39.11% of 560
Branches executed:40.24% of 415
Taken at least once:25.54% of 415
Calls executed:37.89% of 95
Creating 'dominion.c.gcov'

make[1]: Leaving directory `/nfs/stak/users/dongxiao/CS362/CS362-W2019/projects/dongxiao/dominion'
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 870 returned 100% blocks executed 83%
      870:    8:int compare(const void* a, const void* b) {
      870:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      870:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      232:   12:    return -1;
      638:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 2 returned 100% blocks executed 100%
        2:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        2:   23:  int* k = malloc(10 * sizeof(int));
        2:   24:  k[0] = k1;
        2:   25:  k[1] = k2;
        2:   26:  k[2] = k3;
        2:   27:  k[3] = k4;
        2:   28:  k[4] = k5;
        2:   29:  k[5] = k6;
        2:   30:  k[6] = k7;
        2:   31:  k[7] = k8;
        2:   32:  k[8] = k9;
        2:   33:  k[9] = k10;
        2:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 26 returned 100% blocks executed 95%
       26:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       26:   44:  SelectStream(1);
call    0 returned 100%
       26:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       26:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       26:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      277:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     2769:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     2518:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   62:	    {
        1:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       25:   73:  if (numPlayers == 2)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
        -:   74:    {
       21:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        4:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        4:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       25:   87:  if (numPlayers == 2)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
        -:   88:    {
       21:   89:      state->supplyCount[estate] = 8;
       21:   90:      state->supplyCount[duchy] = 8;
       21:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        4:   95:      state->supplyCount[estate] = 12;
        4:   96:      state->supplyCount[duchy] = 12;
        4:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       25:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       25:  102:  state->supplyCount[silver] = 40;
       25:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      525:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     4125:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     3875:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      250:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
       50:  115:		  if (numPlayers == 2){ 
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
       21:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        4:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      225:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      250:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     3625:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       83:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
       58:  140:      state->deckCount[i] = 0;
      232:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      174:  143:	  state->deck[i][j] = estate;
      174:  144:	  state->deckCount[i]++;
        -:  145:	}
      464:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      406:  148:	  state->deck[i][j] = copper;
      406:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       83:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
       58:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       83:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       58:  166:      state->handCount[i] = 0;
       58:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      700:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      675:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       25:  182:  state->outpostPlayed = 0;
       25:  183:  state->phase = 0;
       25:  184:  state->numActions = 1;
       25:  185:  state->numBuys = 1;
       25:  186:  state->playedCardCount = 0;
       25:  187:  state->whoseTurn = 0;
       25:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      150:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      125:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       25:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       25:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 66 returned 100% blocks executed 100%
       66:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       66:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       66:  209:  if (state->deckCount[player] < 1)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        8:  210:    return -1;
       58:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      696:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      580:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      580:  216:    newDeck[newDeckPos] = state->deck[player][card];
      580:  217:    newDeckPos++;
     1934:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
     1354:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      580:  221:    state->deckCount[player]--;
        -:  222:  }
      638:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      580:  224:    state->deck[player][i] = newDeck[i];
      580:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       58:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 14 returned 100% blocks executed 100%
       14:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       14:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       14:  237:  if (state->phase != 0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  238:    {
        1:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       13:  243:  if ( state->numActions < 1 )
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  244:    {
        1:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       12:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
       12:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
        1:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       11:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 36% (fallthrough)
branch  2 taken 64%
        -:  259:    {
        4:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        7:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 21 returned 100% blocks executed 100%
       21:  315:int handCard(int handPos, struct gameState *state) {
       21:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       21:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2 returned 100% blocks executed 100%
        2:  320:int supplyCount(int card, struct gameState *state) {
        2:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 54 returned 100% blocks executed 100%
       54:  346:int whoseTurn(struct gameState *state) {
       54:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 203 returned 100% blocks executed 85%
      203:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      203:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        8:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        8:  538:    state->deckCount[player] = state->discardCount[player];
        8:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        8:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        8:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        8:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        8:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        8:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      195:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      195:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      195:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      195:  576:    state->deckCount[player]--;
      195:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      195:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 6 returned 100% blocks executed 13%
        6:  583:int getCost(int cardNumber)
        -:  584:{
        6:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 33%
branch  3 taken 0%
branch  4 taken 67%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
        4:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://declarations of the card functions
        -:  647:int adventurerAction(int currentPlayer, struct gameState *state);
        -:  648:int smithyAction(int currentPlayer, struct gameState *state, int handPos);
        -:  649:int council_roomAction(int currentPlayer, struct gameState *state, int handPos);
        -:  650:int feastAction(int currentPlayer, struct gameState *state, int choice1);
        -:  651:int remodelAction(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos);
        -:  652:
        -:  653:
        -:  654:
function cardEffect called 29 returned 100% blocks executed 17%
       29:  655:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  656:{
        -:  657:  int i;
        -:  658:  int j;
        -:  659:  int k;
        -:  660://  int x;
        -:  661:  int index;
       29:  662:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       29:  663:  int nextPlayer = currentPlayer + 1;
        -:  664:
       29:  665:  int tributeRevealedCards[2] = {-1, -1};
        -:  666://  int temphand[MAX_HAND];// moved above the if statement
        -:  667://  int drawntreasure=0;
        -:  668://  int cardDrawn;
        -:  669://  int z = 0;// this is the counter for the temp hand
       29:  670:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  671:    nextPlayer = 0;
        -:  672:  }
        -:  673:  
        -:  674:	
        -:  675:  //uses switch to select card and perform actions
       29:  676:  switch( card ) 
branch  0 taken 0%
branch  1 taken 38%
branch  2 taken 0%
branch  3 taken 3%
branch  4 taken 0%
branch  5 taken 7%
branch  6 taken 0%
branch  7 taken 7%
branch  8 taken 0%
branch  9 taken 14%
branch 10 taken 0%
branch 11 taken 7%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 7%
branch 17 taken 7%
branch 18 taken 0%
branch 19 taken 10%
branch 20 taken 0%
        -:  677:    {
        -:  678:    case adventurer:
    #####:  679:    	adventurerAction(currentPlayer, state);
call    0 never executed
    #####:  680:	return 0;
        -:  681:    case council_room:
       11:  682: 	council_roomAction(currentPlayer, state, handPos);
call    0 returned 100%
       11:  683:      	return 0;
        -:  684:			
        -:  685:    case feast:
    #####:  686:	feastAction(currentPlayer, state, choice1);	
call    0 never executed
    #####:  687:      	return 0;
        -:  688:			
        -:  689:    case gardens:
        1:  690:      return -1;
        -:  691:			
        -:  692:    case mine:
    #####:  693:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  694:
    #####:  695:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  696:	{
    #####:  697:	  return -1;
        -:  698:	}
        -:  699:		
    #####:  700:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  701:	{
    #####:  702:	  return -1;
        -:  703:	}
        -:  704:
    #####:  705:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  706:	{
    #####:  707:	  return -1;
        -:  708:	}
        -:  709:
    #####:  710:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  711:
        -:  712:      //discard card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  714:
        -:  715:      //discard trashed card
    #####:  716:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  717:	{
    #####:  718:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  719:	    {
    #####:  720:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  721:	      break;
        -:  722:	    }
        -:  723:	}
        -:  724:			
    #####:  725:      return 0;
        -:  726:			
        -:  727:    case remodel:
        2:  728:      remodelAction(currentPlayer, state, choice1, choice2, handPos);
call    0 returned 100%
        2:  729:      return 0;
        -:  730:		
        -:  731:    case smithy:
        -:  732:      //+3 Cards
    #####:  733:      smithyAction(currentPlayer, state, handPos);
call    0 never executed
    #####:  734:      return 0;
        -:  735:		
        -:  736:    case village:
        -:  737:      //+1 Card
        2:  738:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  739:			
        -:  740:      //+2 Actions
        2:  741:      state->numActions = state->numActions + 2;
        -:  742:			
        -:  743:      //discard played card from hand
        2:  744:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  745:      return 0;
        -:  746:		
        -:  747:    case baron:
    #####:  748:      state->numBuys++;//Increase buys by 1!
    #####:  749:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  750:	int p = 0;//Iterator for hand!
    #####:  751:	int card_not_discarded = 1;//Flag for discard set!
    #####:  752:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  753:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  754:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  755:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  756:	    state->discardCount[currentPlayer]++;
    #####:  757:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  758:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  759:	    }
    #####:  760:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  761:	    state->handCount[currentPlayer]--;
    #####:  762:	    card_not_discarded = 0;//Exit the loop
        -:  763:	  }
    #####:  764:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  765:	    if(DEBUG) {
        -:  766:	      printf("No estate cards in your hand, invalid choice\n");
        -:  767:	      printf("Must gain an estate if there are any\n");
        -:  768:	    }
    #####:  769:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  770:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  771:	      state->supplyCount[estate]--;//Decrement estates
    #####:  772:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  773:		isGameOver(state);
call    0 never executed
        -:  774:	      }
        -:  775:	    }
    #####:  776:	    card_not_discarded = 0;//Exit the loop
        -:  777:	  }
        -:  778:			    
        -:  779:	  else{
    #####:  780:	    p++;//Next card
        -:  781:	  }
        -:  782:	}
        -:  783:      }
        -:  784:			    
        -:  785:      else{
    #####:  786:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  787:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  788:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  789:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  790:	    isGameOver(state);
call    0 never executed
        -:  791:	  }
        -:  792:	}
        -:  793:      }
        -:  794:	    
        -:  795:      
    #####:  796:      return 0;
        -:  797:		
        -:  798:    case great_hall:
        -:  799:      //+1 Card
        4:  800:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  801:			
        -:  802:      //+1 Actions
        4:  803:      state->numActions++;
        -:  804:			
        -:  805:      //discard card from hand
        4:  806:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        4:  807:      return 0;
        -:  808:		
        -:  809:    case minion:
        -:  810:      //+1 action
    #####:  811:      state->numActions++;
        -:  812:			
        -:  813:      //discard card from hand
    #####:  814:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  815:			
    #####:  816:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  817:	{
    #####:  818:	  state->coins = state->coins + 2;
        -:  819:	}
        -:  820:			
    #####:  821:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  822:	{
        -:  823:	  //discard hand
    #####:  824:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  825:	    {
    #####:  826:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  827:	    }
        -:  828:				
        -:  829:	  //draw 4
    #####:  830:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  831:	    {
    #####:  832:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  833:	    }
        -:  834:				
        -:  835:	  //other players discard hand and redraw if hand size > 4
    #####:  836:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  837:	    {
    #####:  838:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  839:		{
    #####:  840:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  841:		    {
        -:  842:		      //discard hand
    #####:  843:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  844:			{
    #####:  845:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  846:			}
        -:  847:							
        -:  848:		      //draw 4
    #####:  849:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  850:			{
    #####:  851:			  drawCard(i, state);
call    0 never executed
        -:  852:			}
        -:  853:		    }
        -:  854:		}
        -:  855:	    }
        -:  856:				
        -:  857:	}
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case steward:
        2:  861:      if (choice1 == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  862:	{
        -:  863:	  //+2 cards
        2:  864:	  drawCard(currentPlayer, state);
call    0 returned 100%
        2:  865:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  866:	}
    #####:  867:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  868:	{
        -:  869:	  //+2 coins
    #####:  870:	  state->coins = state->coins + 2;
        -:  871:	}
        -:  872:      else
        -:  873:	{
        -:  874:	  //trash 2 cards in hand
    #####:  875:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  876:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  877:	}
        -:  878:			
        -:  879:      //discard card from hand
        2:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  881:      return 0;
        -:  882:		
        -:  883:    case tribute:
    #####:  884:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  885:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  886:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  887:	  state->deckCount[nextPlayer]--;
        -:  888:	}
    #####:  889:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  890:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  891:	  state->discardCount[nextPlayer]--;
        -:  892:	}
        -:  893:	else{
        -:  894:	  //No Card to Reveal
        -:  895:	  if (DEBUG){
        -:  896:	    printf("No cards to reveal\n");
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      else{
    #####:  902:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  903:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  904:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  905:	    state->deckCount[nextPlayer]++;
    #####:  906:	    state->discard[nextPlayer][i] = -1;
    #####:  907:	    state->discardCount[nextPlayer]--;
        -:  908:	  }
        -:  909:			    
    #####:  910:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  911:	} 
    #####:  912:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  913:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  914:	state->deckCount[nextPlayer]--;
    #####:  915:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
        -:  918:      }    
        -:  919:		       
    #####:  920:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  921:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  922:	state->playedCardCount++;
    #####:  923:	tributeRevealedCards[1] = -1;
        -:  924:      }
        -:  925:
    #####:  926:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  927:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  928:	  state->coins += 2;
        -:  929:	}
        -:  930:		    
    #####:  931:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  932:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  933:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  934:	}
        -:  935:	else{//Action Card
    #####:  936:	  state->numActions = state->numActions + 2;
        -:  937:	}
        -:  938:      }
        -:  939:	    
    #####:  940:      return 0;
        -:  941:		
        -:  942:    case ambassador:
    #####:  943:      j = 0;		//used to check if player has enough cards to discard
        -:  944:
    #####:  945:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  946:	{
    #####:  947:	  return -1;				
        -:  948:	}
        -:  949:
    #####:  950:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  951:	{
    #####:  952:	  return -1;
        -:  953:	}
        -:  954:
    #####:  955:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  956:	{
    #####:  957:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  958:	    {
    #####:  959:	      j++;
        -:  960:	    }
        -:  961:	}
    #####:  962:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  return -1;				
        -:  965:	}
        -:  966:
        -:  967:      if (DEBUG) 
        -:  968:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  969:
        -:  970:      //increase supply count for choosen card by amount being discarded
    #####:  971:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  972:			
        -:  973:      //each other player gains a copy of revealed card
    #####:  974:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  977:	    {
    #####:  978:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  979:	    }
        -:  980:	}
        -:  981:
        -:  982:      //discard played card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  984:
        -:  985:      //trash copies of cards returned to supply
    #####:  986:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  987:	{
    #####:  988:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  989:	    {
    #####:  990:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  991:		{
    #####:  992:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  993:		  break;
        -:  994:		}
        -:  995:	    }
        -:  996:	}			
        -:  997:
    #####:  998:      return 0;
        -:  999:		
        -: 1000:    case cutpurse:
        -: 1001:
    #####: 1002:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1003:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
    #####: 1005:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1008:		{
    #####: 1009:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1010:		    {
    #####: 1011:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1012:		      break;
        -: 1013:		    }
    #####: 1014:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1015:		    {
    #####: 1016:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1017:			{
        -: 1018:			  if (DEBUG)
        -: 1019:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1020:			}	
    #####: 1021:		      break;
        -: 1022:		    }		
        -: 1023:		}
        -: 1024:					
        -: 1025:	    }
        -: 1026:				
        -: 1027:	}				
        -: 1028:
        -: 1029:      //discard played card from hand
    #####: 1030:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1031:
    #####: 1032:      return 0;
        -: 1033:
        -: 1034:		
        -: 1035:    case embargo: 
        -: 1036:      //+2 Coins
    #####: 1037:      state->coins = state->coins + 2;
        -: 1038:			
        -: 1039:      //see if selected pile is in play
    #####: 1040:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1041:	{
    #####: 1042:	  return -1;
        -: 1043:	}
        -: 1044:			
        -: 1045:      //add embargo token to selected supply pile
    #####: 1046:      state->embargoTokens[choice1]++;
        -: 1047:			
        -: 1048:      //trash card
    #####: 1049:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case outpost:
        -: 1053:      //set outpost flag
        2: 1054:      state->outpostPlayed++;
        -: 1055:			
        -: 1056:      //discard card
        2: 1057:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1058:      return 0;
        -: 1059:		
        -: 1060:    case salvager:
        -: 1061:      //+1 buy
        2: 1062:      state->numBuys++;
        -: 1063:			
        2: 1064:      if (choice1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1065:	{
        -: 1066:	  //gain coins equal to trashed card
        2: 1067:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1068:	  //trash card
        2: 1069:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 100%
        -: 1070:	}
        -: 1071:			
        -: 1072:      //discard card
        2: 1073:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1074:      return 0;
        -: 1075:		
        -: 1076:    case sea_hag:
    #####: 1077:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1078:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1079:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1080:	  state->discardCount[i]++;
    #####: 1081:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1082:	}
        -: 1083:      }
    #####: 1084:      return 0;
        -: 1085:		
        -: 1086:    case treasure_map:
        -: 1087:      //search hand for another treasure_map
        3: 1088:      index = -1;
       18: 1089:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1090:	{
       15: 1091:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1092:	    {
    #####: 1093:	      index = i;
    #####: 1094:	      break;
        -: 1095:	    }
        -: 1096:	}
        3: 1097:      if (index > -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1098:	{
        -: 1099:	  //trash both treasure cards
    #####: 1100:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1101:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1102:
        -: 1103:	  //gain 4 Gold cards
    #####: 1104:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1105:	    {
    #####: 1106:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1107:	    }
        -: 1108:				
        -: 1109:	  //return success
    #####: 1110:	  return 1;
        -: 1111:	}
        -: 1112:			
        -: 1113:      //no second treasure_map found in hand
        3: 1114:      return -1;
        -: 1115:    }
        -: 1116:	
    #####: 1117:  return -1;
        -: 1118:}
        -: 1119:
function discardCard called 29 returned 100% blocks executed 78%
       29: 1120:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1121:{
        -: 1122:	
        -: 1123:  //if card is not trashed, added to Played pile 
       29: 1124:  if (trashFlag < 1)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -: 1125:    {
        -: 1126:      //add card to played pile
       27: 1127:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       27: 1128:      state->playedCardCount++;
        -: 1129:    }
        -: 1130:	
        -: 1131:  //set played card to -1
       29: 1132:  state->hand[currentPlayer][handPos] = -1;
        -: 1133:	
        -: 1134:  //remove card from player's hand
       29: 1135:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1136:    {
        -: 1137:      //reduce number of cards in hand
    #####: 1138:      state->handCount[currentPlayer]--;
        -: 1139:    }
       29: 1140:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1141:    {
        -: 1142:      //reduce number of cards in hand
    #####: 1143:      state->handCount[currentPlayer]--;
        -: 1144:    }
        -: 1145:  else 	
        -: 1146:    {
        -: 1147:      //replace discarded card with last card in hand
       29: 1148:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1149:      //set last card to -1
       29: 1150:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1151:      //reduce number of cards in hand
       29: 1152:      state->handCount[currentPlayer]--;
        -: 1153:    }
        -: 1154:	
       29: 1155:  return 0;
        -: 1156:}
        -: 1157:
function gainCard called 2 returned 100% blocks executed 70%
        2: 1158:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1159:{
        -: 1160:  //Note: supplyPos is enum of choosen card
        -: 1161:	
        -: 1162:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1163:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1164:    {
    #####: 1165:      return -1;
        -: 1166:    }
        -: 1167:	
        -: 1168:  //added card for [whoseTurn] current player:
        -: 1169:  // toFlag = 0 : add to discard
        -: 1170:  // toFlag = 1 : add to deck
        -: 1171:  // toFlag = 2 : add to hand
        -: 1172:
        2: 1173:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1174:    {
    #####: 1175:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1176:      state->deckCount[player]++;
        -: 1177:    }
        2: 1178:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1179:    {
    #####: 1180:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1181:      state->handCount[player]++;
        -: 1182:    }
        -: 1183:  else
        -: 1184:    {
        2: 1185:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1186:      state->discardCount[player]++;
        -: 1187:    }
        -: 1188:	
        -: 1189:  //decrease number in supply pile
        2: 1190:  state->supplyCount[supplyPos]--;
        -: 1191:	 
        2: 1192:  return 0;
        -: 1193:}
        -: 1194:
function updateCoins called 39 returned 100% blocks executed 82%
       39: 1195:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1196:{
        -: 1197:  int i;
        -: 1198:	
        -: 1199:  //reset coin count
       39: 1200:  state->coins = 0;
        -: 1201:
        -: 1202:  //add coins for each Treasure card in player's hand
      226: 1203:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1204:    {
      187: 1205:      if (state->hand[player][i] == copper)
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
        -: 1206:	{
      143: 1207:	  state->coins += 1;
        -: 1208:	}
       44: 1209:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1210:	{
    #####: 1211:	  state->coins += 2;
        -: 1212:	}
       44: 1213:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1214:	{
    #####: 1215:	  state->coins += 3;
        -: 1216:	}	
        -: 1217:    }	
        -: 1218:
        -: 1219:  //add bonus
       39: 1220:  state->coins += bonus;
        -: 1221:
       39: 1222:  return 0;
        -: 1223:}
        -: 1224:
function adventurerAction called 0 returned 0% blocks executed 0%
    #####: 1225:int adventurerAction(int currentPlayer, struct gameState *state)
        -: 1226:{
        -: 1227:	int cardDrawn;
    #####: 1228:	int drawntreasure = 0;
        -: 1229:	int temphand[MAX_HAND];
    #####: 1230:	int z = 0; //this is the counter for the temp hand
    #####: 1231:	while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1232:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1233:			shuffle(currentPlayer, state);
call    0 never executed
        -: 1234:		}
    #####: 1235:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1236:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1237:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1238:			drawntreasure++;
        -: 1239:		else{
    #####: 1240:			temphand[z]=cardDrawn;
        -: 1241:			/********************** BUG ***************************************/
        -: 1242:			/* Do not remove the top card. So the player have two copies of cardDrawn */
        -: 1243:			//state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1244:			z++;
        -: 1245:		}
        -: 1246:      }
    #####: 1247:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1248:      		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1249:		z=z-1;
        -: 1250:      }
    #####: 1251:      return 0;
        -: 1252:}	
        -: 1253:
        -: 1254:
function smithyAction called 0 returned 0% blocks executed 0%
    #####: 1255:int smithyAction(int currentPlayer, struct gameState *state, int handPos)
        -: 1256:{      
        -: 1257:	int i;
    #####: 1258:	for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1259:	{
    #####: 1260:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1261:	}
        -: 1262:			
        -: 1263:	//discard card from hand
        -: 1264:	/************************** BUG *************************/
        -: 1265:	/* Trash the card instead of put the card in the discard pile */
        -: 1266:	//discardCard(handPos, currentPlayer, state, 0);
    #####: 1267:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1268:	return 0;
        -: 1269:}     
        -: 1270:
        -: 1271:
function council_roomAction called 11 returned 100% blocks executed 100%
       11: 1272:int council_roomAction(int currentPlayer, struct gameState *state, int handPos)
        -: 1273:{
        -: 1274:	int i;
        -: 1275:	//+4 Cards
       55: 1276:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1277:	{
       44: 1278:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1279:	}
        -: 1280:			
        -: 1281:	//+1 Buy
       11: 1282:	state->numBuys++;
        -: 1283:			
        -: 1284:	//Each other player draws a card
       35: 1285:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -: 1286:	{
        -: 1287:	  /*************************** BUG *****************************/
        -: 1288:	  /* every player draws a card */
        -: 1289:	 // if ( i != currentPlayer )
        -: 1290:	   // {
       24: 1291:	    	drawCard(i, state);
call    0 returned 100%
        -: 1292:	   // }
        -: 1293:	}
        -: 1294:			
        -: 1295:	//put played card in played card pile
       11: 1296:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       11: 1297:	return 0;
        -: 1298:}
        -: 1299:
function feastAction called 0 returned 0% blocks executed 0%
    #####: 1300:int feastAction(int currentPlayer, struct gameState *state, int choice1)
        -: 1301:{
        -: 1302:	int i;
        -: 1303:	int temphand[MAX_HAND];
        -: 1304:	//gain card with cost up to 5
        -: 1305:	//Backup hand  OFF-By-ONE??????????????
    #####: 1306:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1307:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1308:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1309:	}
        -: 1310:	//Backup hand
        -: 1311:
        -: 1312:	//Update Coins for Buy
    #####: 1313:	updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1314:	int x = 1;//Condition to loop on
    #####: 1315:	while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1316:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1317:			if (DEBUG)
        -: 1318:		    		printf("None of that card left, sorry!\n");
        -: 1319:
        -: 1320:			if (DEBUG){
        -: 1321:		   		 printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1322:		  	}
        -: 1323:		}
    #####: 1324:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1325:		  	printf("That card is too expensive!\n");
call    0 never executed
        -: 1326:
        -: 1327:		  	if (DEBUG){
        -: 1328:		    	printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1329:		  	}
        -: 1330:		}	
        -: 1331:		else{
        -: 1332:			if (DEBUG){
        -: 1333:		    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1334:		  	}
        -: 1335:
    #####: 1336:		  	gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
        -: 1337:			/************************* BUG *************************************/
        -: 1338:			/* infinite loop */
        -: 1339:		  	//x = 0;//No more buying cards
        -: 1340:
        -: 1341:		  	if (DEBUG){
        -: 1342:		    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1343:	  		}
        -: 1344:
        -: 1345:		}
        -: 1346:	}	     
        -: 1347:
        -: 1348:	//Reset Hand
    #####: 1349:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1350:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1351:		temphand[i] = -1;
        -: 1352:	}
    #####: 1353:	return 0;
        -: 1354:}
        -: 1355:
function remodelAction called 2 returned 100% blocks executed 93%
        2: 1356:int remodelAction(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1357:{
        -: 1358:	int i;
        2: 1359:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1360:
        2: 1361:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1362:	{
    #####: 1363:	  return -1;
        -: 1364:	}
        -: 1365:
        2: 1366:	gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -: 1367:
        -: 1368:	//discard card from hand
        2: 1369:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1370:
        -: 1371:	//discard trashed card
        4: 1372:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -: 1373:	{
        4: 1374:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1375:	    {
        2: 1376:	      discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        2: 1377:	      break;
        -: 1378:	    }
        -: 1379:	}
        2: 1380:	return 0;
        -: 1381:}
        -: 1382:
        -: 1383://end of dominion.c
        -: 1384:
make[1]: Entering directory `/nfs/stak/users/dongxiao/CS362/CS362-W2019/projects/dongxiao/dominion'
gcc -o unittest4 -g unittest4.c dominion.o rngs.o -Wall -fpic -coverage -lm -std=c99
./unittest4
----------------------------------- Test supplyCount() --------------------------
-----------------------Testing whoseTurn----------------------

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: Card 0 with supply of 1922394952
TEST SUCCESSFULLY COMPLETED: Card 1 with supply of 2142697647
TEST SUCCESSFULLY COMPLETED: Card 2 with supply of 1357771247
TEST SUCCESSFULLY COMPLETED: Card 3 with supply of 1017626589
TEST SUCCESSFULLY COMPLETED: Card 4 with supply of 1599521059
TEST SUCCESSFULLY COMPLETED: Card 5 with supply of 2089767287
TEST SUCCESSFULLY COMPLETED: Card 6 with supply of 518665080
TEST SUCCESSFULLY COMPLETED: Card 7 with supply of 2030684272
TEST SUCCESSFULLY COMPLETED: Card 8 with supply of 28708660
TEST SUCCESSFULLY COMPLETED: Card 9 with supply of 1004906344
TEST SUCCESSFULLY COMPLETED: Card 10 with supply of 90278039
TEST SUCCESSFULLY COMPLETED: Card 11 with supply of 189652630
TEST SUCCESSFULLY COMPLETED: Card 12 with supply of 1949068445
TEST SUCCESSFULLY COMPLETED: Card 13 with supply of 557904546
TEST SUCCESSFULLY COMPLETED: Card 14 with supply of 2005641575
TEST SUCCESSFULLY COMPLETED: Card 15 with supply of 1771161638
TEST SUCCESSFULLY COMPLETED: Card 16 with supply of 1631609364
TEST SUCCESSFULLY COMPLETED: Card 17 with supply of 2062269781
TEST SUCCESSFULLY COMPLETED: Card 18 with supply of 1680716538
TEST SUCCESSFULLY COMPLETED: Card 19 with supply of 1461042405
TEST SUCCESSFULLY COMPLETED: Card 20 with supply of 390139849
TEST SUCCESSFULLY COMPLETED: Card 21 with supply of 900703878
TEST SUCCESSFULLY COMPLETED: Card 22 with supply of 996910857
TEST SUCCESSFULLY COMPLETED: Card 23 with supply of 1789151320
TEST SUCCESSFULLY COMPLETED: Card 24 with supply of 561728893
TEST SUCCESSFULLY COMPLETED: Card 25 with supply of 2000258119
TEST SUCCESSFULLY COMPLETED: Card 26 with supply of 1549154385
gcov -b dominion.c
File 'dominion.c'
Lines executed:39.11% of 560
Branches executed:40.24% of 415
Taken at least once:25.54% of 415
Calls executed:37.89% of 95
Creating 'dominion.c.gcov'

make[1]: Leaving directory `/nfs/stak/users/dongxiao/CS362/CS362-W2019/projects/dongxiao/dominion'
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 930 returned 100% blocks executed 83%
      930:    8:int compare(const void* a, const void* b) {
      930:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      930:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      248:   12:    return -1;
      682:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 2 returned 100% blocks executed 100%
        2:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        2:   23:  int* k = malloc(10 * sizeof(int));
        2:   24:  k[0] = k1;
        2:   25:  k[1] = k2;
        2:   26:  k[2] = k3;
        2:   27:  k[3] = k4;
        2:   28:  k[4] = k5;
        2:   29:  k[5] = k6;
        2:   30:  k[6] = k7;
        2:   31:  k[7] = k8;
        2:   32:  k[8] = k9;
        2:   33:  k[9] = k10;
        2:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 27 returned 100% blocks executed 95%
       27:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       27:   44:  SelectStream(1);
call    0 returned 100%
       27:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       27:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       27:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      288:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     2879:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     2618:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   62:	    {
        1:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       26:   73:  if (numPlayers == 2)
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
        -:   74:    {
       21:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        5:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        5:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       26:   87:  if (numPlayers == 2)
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
        -:   88:    {
       21:   89:      state->supplyCount[estate] = 8;
       21:   90:      state->supplyCount[duchy] = 8;
       21:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        5:   95:      state->supplyCount[estate] = 12;
        5:   96:      state->supplyCount[duchy] = 12;
        5:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       26:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       26:  102:  state->supplyCount[silver] = 40;
       26:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      546:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     4290:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     4030:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      260:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
       52:  115:		  if (numPlayers == 2){ 
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
       21:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        5:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      234:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      260:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     3770:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       88:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
       62:  140:      state->deckCount[i] = 0;
      248:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      186:  143:	  state->deck[i][j] = estate;
      186:  144:	  state->deckCount[i]++;
        -:  145:	}
      496:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      434:  148:	  state->deck[i][j] = copper;
      434:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       88:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
       62:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       88:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       62:  166:      state->handCount[i] = 0;
       62:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      728:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      702:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       26:  182:  state->outpostPlayed = 0;
       26:  183:  state->phase = 0;
       26:  184:  state->numActions = 1;
       26:  185:  state->numBuys = 1;
       26:  186:  state->playedCardCount = 0;
       26:  187:  state->whoseTurn = 0;
       26:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      156:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      130:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       26:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       26:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 70 returned 100% blocks executed 100%
       70:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       70:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       70:  209:  if (state->deckCount[player] < 1)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        8:  210:    return -1;
       62:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      744:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      620:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      620:  216:    newDeck[newDeckPos] = state->deck[player][card];
      620:  217:    newDeckPos++;
     2059:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
     1439:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      620:  221:    state->deckCount[player]--;
        -:  222:  }
      682:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      620:  224:    state->deck[player][i] = newDeck[i];
      620:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       62:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 14 returned 100% blocks executed 100%
       14:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       14:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       14:  237:  if (state->phase != 0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  238:    {
        1:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       13:  243:  if ( state->numActions < 1 )
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  244:    {
        1:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       12:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
       12:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
        1:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       11:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 36% (fallthrough)
branch  2 taken 64%
        -:  259:    {
        4:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        7:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 21 returned 100% blocks executed 100%
       21:  315:int handCard(int handPos, struct gameState *state) {
       21:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       21:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 29 returned 100% blocks executed 100%
       29:  320:int supplyCount(int card, struct gameState *state) {
       29:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 54 returned 100% blocks executed 100%
       54:  346:int whoseTurn(struct gameState *state) {
       54:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 208 returned 100% blocks executed 85%
      208:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      208:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        8:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        8:  538:    state->deckCount[player] = state->discardCount[player];
        8:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        8:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        8:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        8:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        8:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        8:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      200:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      200:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      200:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      200:  576:    state->deckCount[player]--;
      200:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      200:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 6 returned 100% blocks executed 13%
        6:  583:int getCost(int cardNumber)
        -:  584:{
        6:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 33%
branch  3 taken 0%
branch  4 taken 67%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
        4:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://declarations of the card functions
        -:  647:int adventurerAction(int currentPlayer, struct gameState *state);
        -:  648:int smithyAction(int currentPlayer, struct gameState *state, int handPos);
        -:  649:int council_roomAction(int currentPlayer, struct gameState *state, int handPos);
        -:  650:int feastAction(int currentPlayer, struct gameState *state, int choice1);
        -:  651:int remodelAction(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos);
        -:  652:
        -:  653:
        -:  654:
function cardEffect called 29 returned 100% blocks executed 17%
       29:  655:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  656:{
        -:  657:  int i;
        -:  658:  int j;
        -:  659:  int k;
        -:  660://  int x;
        -:  661:  int index;
       29:  662:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       29:  663:  int nextPlayer = currentPlayer + 1;
        -:  664:
       29:  665:  int tributeRevealedCards[2] = {-1, -1};
        -:  666://  int temphand[MAX_HAND];// moved above the if statement
        -:  667://  int drawntreasure=0;
        -:  668://  int cardDrawn;
        -:  669://  int z = 0;// this is the counter for the temp hand
       29:  670:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  671:    nextPlayer = 0;
        -:  672:  }
        -:  673:  
        -:  674:	
        -:  675:  //uses switch to select card and perform actions
       29:  676:  switch( card ) 
branch  0 taken 0%
branch  1 taken 38%
branch  2 taken 0%
branch  3 taken 3%
branch  4 taken 0%
branch  5 taken 7%
branch  6 taken 0%
branch  7 taken 7%
branch  8 taken 0%
branch  9 taken 14%
branch 10 taken 0%
branch 11 taken 7%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 7%
branch 17 taken 7%
branch 18 taken 0%
branch 19 taken 10%
branch 20 taken 0%
        -:  677:    {
        -:  678:    case adventurer:
    #####:  679:    	adventurerAction(currentPlayer, state);
call    0 never executed
    #####:  680:	return 0;
        -:  681:    case council_room:
       11:  682: 	council_roomAction(currentPlayer, state, handPos);
call    0 returned 100%
       11:  683:      	return 0;
        -:  684:			
        -:  685:    case feast:
    #####:  686:	feastAction(currentPlayer, state, choice1);	
call    0 never executed
    #####:  687:      	return 0;
        -:  688:			
        -:  689:    case gardens:
        1:  690:      return -1;
        -:  691:			
        -:  692:    case mine:
    #####:  693:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  694:
    #####:  695:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  696:	{
    #####:  697:	  return -1;
        -:  698:	}
        -:  699:		
    #####:  700:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  701:	{
    #####:  702:	  return -1;
        -:  703:	}
        -:  704:
    #####:  705:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  706:	{
    #####:  707:	  return -1;
        -:  708:	}
        -:  709:
    #####:  710:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  711:
        -:  712:      //discard card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  714:
        -:  715:      //discard trashed card
    #####:  716:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  717:	{
    #####:  718:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  719:	    {
    #####:  720:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  721:	      break;
        -:  722:	    }
        -:  723:	}
        -:  724:			
    #####:  725:      return 0;
        -:  726:			
        -:  727:    case remodel:
        2:  728:      remodelAction(currentPlayer, state, choice1, choice2, handPos);
call    0 returned 100%
        2:  729:      return 0;
        -:  730:		
        -:  731:    case smithy:
        -:  732:      //+3 Cards
    #####:  733:      smithyAction(currentPlayer, state, handPos);
call    0 never executed
    #####:  734:      return 0;
        -:  735:		
        -:  736:    case village:
        -:  737:      //+1 Card
        2:  738:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  739:			
        -:  740:      //+2 Actions
        2:  741:      state->numActions = state->numActions + 2;
        -:  742:			
        -:  743:      //discard played card from hand
        2:  744:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  745:      return 0;
        -:  746:		
        -:  747:    case baron:
    #####:  748:      state->numBuys++;//Increase buys by 1!
    #####:  749:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  750:	int p = 0;//Iterator for hand!
    #####:  751:	int card_not_discarded = 1;//Flag for discard set!
    #####:  752:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  753:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  754:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  755:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  756:	    state->discardCount[currentPlayer]++;
    #####:  757:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  758:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  759:	    }
    #####:  760:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  761:	    state->handCount[currentPlayer]--;
    #####:  762:	    card_not_discarded = 0;//Exit the loop
        -:  763:	  }
    #####:  764:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  765:	    if(DEBUG) {
        -:  766:	      printf("No estate cards in your hand, invalid choice\n");
        -:  767:	      printf("Must gain an estate if there are any\n");
        -:  768:	    }
    #####:  769:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  770:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  771:	      state->supplyCount[estate]--;//Decrement estates
    #####:  772:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  773:		isGameOver(state);
call    0 never executed
        -:  774:	      }
        -:  775:	    }
    #####:  776:	    card_not_discarded = 0;//Exit the loop
        -:  777:	  }
        -:  778:			    
        -:  779:	  else{
    #####:  780:	    p++;//Next card
        -:  781:	  }
        -:  782:	}
        -:  783:      }
        -:  784:			    
        -:  785:      else{
    #####:  786:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  787:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  788:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  789:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  790:	    isGameOver(state);
call    0 never executed
        -:  791:	  }
        -:  792:	}
        -:  793:      }
        -:  794:	    
        -:  795:      
    #####:  796:      return 0;
        -:  797:		
        -:  798:    case great_hall:
        -:  799:      //+1 Card
        4:  800:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  801:			
        -:  802:      //+1 Actions
        4:  803:      state->numActions++;
        -:  804:			
        -:  805:      //discard card from hand
        4:  806:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        4:  807:      return 0;
        -:  808:		
        -:  809:    case minion:
        -:  810:      //+1 action
    #####:  811:      state->numActions++;
        -:  812:			
        -:  813:      //discard card from hand
    #####:  814:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  815:			
    #####:  816:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  817:	{
    #####:  818:	  state->coins = state->coins + 2;
        -:  819:	}
        -:  820:			
    #####:  821:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  822:	{
        -:  823:	  //discard hand
    #####:  824:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  825:	    {
    #####:  826:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  827:	    }
        -:  828:				
        -:  829:	  //draw 4
    #####:  830:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  831:	    {
    #####:  832:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  833:	    }
        -:  834:				
        -:  835:	  //other players discard hand and redraw if hand size > 4
    #####:  836:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  837:	    {
    #####:  838:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  839:		{
    #####:  840:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  841:		    {
        -:  842:		      //discard hand
    #####:  843:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  844:			{
    #####:  845:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  846:			}
        -:  847:							
        -:  848:		      //draw 4
    #####:  849:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  850:			{
    #####:  851:			  drawCard(i, state);
call    0 never executed
        -:  852:			}
        -:  853:		    }
        -:  854:		}
        -:  855:	    }
        -:  856:				
        -:  857:	}
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case steward:
        2:  861:      if (choice1 == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  862:	{
        -:  863:	  //+2 cards
        2:  864:	  drawCard(currentPlayer, state);
call    0 returned 100%
        2:  865:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  866:	}
    #####:  867:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  868:	{
        -:  869:	  //+2 coins
    #####:  870:	  state->coins = state->coins + 2;
        -:  871:	}
        -:  872:      else
        -:  873:	{
        -:  874:	  //trash 2 cards in hand
    #####:  875:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  876:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  877:	}
        -:  878:			
        -:  879:      //discard card from hand
        2:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  881:      return 0;
        -:  882:		
        -:  883:    case tribute:
    #####:  884:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  885:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  886:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  887:	  state->deckCount[nextPlayer]--;
        -:  888:	}
    #####:  889:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  890:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  891:	  state->discardCount[nextPlayer]--;
        -:  892:	}
        -:  893:	else{
        -:  894:	  //No Card to Reveal
        -:  895:	  if (DEBUG){
        -:  896:	    printf("No cards to reveal\n");
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      else{
    #####:  902:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  903:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  904:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  905:	    state->deckCount[nextPlayer]++;
    #####:  906:	    state->discard[nextPlayer][i] = -1;
    #####:  907:	    state->discardCount[nextPlayer]--;
        -:  908:	  }
        -:  909:			    
    #####:  910:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  911:	} 
    #####:  912:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  913:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  914:	state->deckCount[nextPlayer]--;
    #####:  915:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
        -:  918:      }    
        -:  919:		       
    #####:  920:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  921:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  922:	state->playedCardCount++;
    #####:  923:	tributeRevealedCards[1] = -1;
        -:  924:      }
        -:  925:
    #####:  926:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  927:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  928:	  state->coins += 2;
        -:  929:	}
        -:  930:		    
    #####:  931:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  932:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  933:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  934:	}
        -:  935:	else{//Action Card
    #####:  936:	  state->numActions = state->numActions + 2;
        -:  937:	}
        -:  938:      }
        -:  939:	    
    #####:  940:      return 0;
        -:  941:		
        -:  942:    case ambassador:
    #####:  943:      j = 0;		//used to check if player has enough cards to discard
        -:  944:
    #####:  945:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  946:	{
    #####:  947:	  return -1;				
        -:  948:	}
        -:  949:
    #####:  950:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  951:	{
    #####:  952:	  return -1;
        -:  953:	}
        -:  954:
    #####:  955:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  956:	{
    #####:  957:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  958:	    {
    #####:  959:	      j++;
        -:  960:	    }
        -:  961:	}
    #####:  962:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  return -1;				
        -:  965:	}
        -:  966:
        -:  967:      if (DEBUG) 
        -:  968:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  969:
        -:  970:      //increase supply count for choosen card by amount being discarded
    #####:  971:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  972:			
        -:  973:      //each other player gains a copy of revealed card
    #####:  974:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  977:	    {
    #####:  978:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  979:	    }
        -:  980:	}
        -:  981:
        -:  982:      //discard played card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  984:
        -:  985:      //trash copies of cards returned to supply
    #####:  986:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  987:	{
    #####:  988:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  989:	    {
    #####:  990:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  991:		{
    #####:  992:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  993:		  break;
        -:  994:		}
        -:  995:	    }
        -:  996:	}			
        -:  997:
    #####:  998:      return 0;
        -:  999:		
        -: 1000:    case cutpurse:
        -: 1001:
    #####: 1002:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1003:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
    #####: 1005:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1008:		{
    #####: 1009:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1010:		    {
    #####: 1011:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1012:		      break;
        -: 1013:		    }
    #####: 1014:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1015:		    {
    #####: 1016:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1017:			{
        -: 1018:			  if (DEBUG)
        -: 1019:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1020:			}	
    #####: 1021:		      break;
        -: 1022:		    }		
        -: 1023:		}
        -: 1024:					
        -: 1025:	    }
        -: 1026:				
        -: 1027:	}				
        -: 1028:
        -: 1029:      //discard played card from hand
    #####: 1030:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1031:
    #####: 1032:      return 0;
        -: 1033:
        -: 1034:		
        -: 1035:    case embargo: 
        -: 1036:      //+2 Coins
    #####: 1037:      state->coins = state->coins + 2;
        -: 1038:			
        -: 1039:      //see if selected pile is in play
    #####: 1040:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1041:	{
    #####: 1042:	  return -1;
        -: 1043:	}
        -: 1044:			
        -: 1045:      //add embargo token to selected supply pile
    #####: 1046:      state->embargoTokens[choice1]++;
        -: 1047:			
        -: 1048:      //trash card
    #####: 1049:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case outpost:
        -: 1053:      //set outpost flag
        2: 1054:      state->outpostPlayed++;
        -: 1055:			
        -: 1056:      //discard card
        2: 1057:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1058:      return 0;
        -: 1059:		
        -: 1060:    case salvager:
        -: 1061:      //+1 buy
        2: 1062:      state->numBuys++;
        -: 1063:			
        2: 1064:      if (choice1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1065:	{
        -: 1066:	  //gain coins equal to trashed card
        2: 1067:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1068:	  //trash card
        2: 1069:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 100%
        -: 1070:	}
        -: 1071:			
        -: 1072:      //discard card
        2: 1073:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1074:      return 0;
        -: 1075:		
        -: 1076:    case sea_hag:
    #####: 1077:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1078:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1079:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1080:	  state->discardCount[i]++;
    #####: 1081:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1082:	}
        -: 1083:      }
    #####: 1084:      return 0;
        -: 1085:		
        -: 1086:    case treasure_map:
        -: 1087:      //search hand for another treasure_map
        3: 1088:      index = -1;
       18: 1089:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1090:	{
       15: 1091:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1092:	    {
    #####: 1093:	      index = i;
    #####: 1094:	      break;
        -: 1095:	    }
        -: 1096:	}
        3: 1097:      if (index > -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1098:	{
        -: 1099:	  //trash both treasure cards
    #####: 1100:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1101:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1102:
        -: 1103:	  //gain 4 Gold cards
    #####: 1104:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1105:	    {
    #####: 1106:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1107:	    }
        -: 1108:				
        -: 1109:	  //return success
    #####: 1110:	  return 1;
        -: 1111:	}
        -: 1112:			
        -: 1113:      //no second treasure_map found in hand
        3: 1114:      return -1;
        -: 1115:    }
        -: 1116:	
    #####: 1117:  return -1;
        -: 1118:}
        -: 1119:
function discardCard called 29 returned 100% blocks executed 78%
       29: 1120:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1121:{
        -: 1122:	
        -: 1123:  //if card is not trashed, added to Played pile 
       29: 1124:  if (trashFlag < 1)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -: 1125:    {
        -: 1126:      //add card to played pile
       27: 1127:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       27: 1128:      state->playedCardCount++;
        -: 1129:    }
        -: 1130:	
        -: 1131:  //set played card to -1
       29: 1132:  state->hand[currentPlayer][handPos] = -1;
        -: 1133:	
        -: 1134:  //remove card from player's hand
       29: 1135:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1136:    {
        -: 1137:      //reduce number of cards in hand
    #####: 1138:      state->handCount[currentPlayer]--;
        -: 1139:    }
       29: 1140:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1141:    {
        -: 1142:      //reduce number of cards in hand
    #####: 1143:      state->handCount[currentPlayer]--;
        -: 1144:    }
        -: 1145:  else 	
        -: 1146:    {
        -: 1147:      //replace discarded card with last card in hand
       29: 1148:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1149:      //set last card to -1
       29: 1150:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1151:      //reduce number of cards in hand
       29: 1152:      state->handCount[currentPlayer]--;
        -: 1153:    }
        -: 1154:	
       29: 1155:  return 0;
        -: 1156:}
        -: 1157:
function gainCard called 2 returned 100% blocks executed 70%
        2: 1158:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1159:{
        -: 1160:  //Note: supplyPos is enum of choosen card
        -: 1161:	
        -: 1162:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1163:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1164:    {
    #####: 1165:      return -1;
        -: 1166:    }
        -: 1167:	
        -: 1168:  //added card for [whoseTurn] current player:
        -: 1169:  // toFlag = 0 : add to discard
        -: 1170:  // toFlag = 1 : add to deck
        -: 1171:  // toFlag = 2 : add to hand
        -: 1172:
        2: 1173:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1174:    {
    #####: 1175:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1176:      state->deckCount[player]++;
        -: 1177:    }
        2: 1178:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1179:    {
    #####: 1180:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1181:      state->handCount[player]++;
        -: 1182:    }
        -: 1183:  else
        -: 1184:    {
        2: 1185:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1186:      state->discardCount[player]++;
        -: 1187:    }
        -: 1188:	
        -: 1189:  //decrease number in supply pile
        2: 1190:  state->supplyCount[supplyPos]--;
        -: 1191:	 
        2: 1192:  return 0;
        -: 1193:}
        -: 1194:
function updateCoins called 40 returned 100% blocks executed 82%
       40: 1195:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1196:{
        -: 1197:  int i;
        -: 1198:	
        -: 1199:  //reset coin count
       40: 1200:  state->coins = 0;
        -: 1201:
        -: 1202:  //add coins for each Treasure card in player's hand
      232: 1203:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1204:    {
      192: 1205:      if (state->hand[player][i] == copper)
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
        -: 1206:	{
      147: 1207:	  state->coins += 1;
        -: 1208:	}
       45: 1209:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1210:	{
    #####: 1211:	  state->coins += 2;
        -: 1212:	}
       45: 1213:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1214:	{
    #####: 1215:	  state->coins += 3;
        -: 1216:	}	
        -: 1217:    }	
        -: 1218:
        -: 1219:  //add bonus
       40: 1220:  state->coins += bonus;
        -: 1221:
       40: 1222:  return 0;
        -: 1223:}
        -: 1224:
function adventurerAction called 0 returned 0% blocks executed 0%
    #####: 1225:int adventurerAction(int currentPlayer, struct gameState *state)
        -: 1226:{
        -: 1227:	int cardDrawn;
    #####: 1228:	int drawntreasure = 0;
        -: 1229:	int temphand[MAX_HAND];
    #####: 1230:	int z = 0; //this is the counter for the temp hand
    #####: 1231:	while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1232:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1233:			shuffle(currentPlayer, state);
call    0 never executed
        -: 1234:		}
    #####: 1235:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1236:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1237:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1238:			drawntreasure++;
        -: 1239:		else{
    #####: 1240:			temphand[z]=cardDrawn;
        -: 1241:			/********************** BUG ***************************************/
        -: 1242:			/* Do not remove the top card. So the player have two copies of cardDrawn */
        -: 1243:			//state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1244:			z++;
        -: 1245:		}
        -: 1246:      }
    #####: 1247:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1248:      		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1249:		z=z-1;
        -: 1250:      }
    #####: 1251:      return 0;
        -: 1252:}	
        -: 1253:
        -: 1254:
function smithyAction called 0 returned 0% blocks executed 0%
    #####: 1255:int smithyAction(int currentPlayer, struct gameState *state, int handPos)
        -: 1256:{      
        -: 1257:	int i;
    #####: 1258:	for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1259:	{
    #####: 1260:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1261:	}
        -: 1262:			
        -: 1263:	//discard card from hand
        -: 1264:	/************************** BUG *************************/
        -: 1265:	/* Trash the card instead of put the card in the discard pile */
        -: 1266:	//discardCard(handPos, currentPlayer, state, 0);
    #####: 1267:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1268:	return 0;
        -: 1269:}     
        -: 1270:
        -: 1271:
function council_roomAction called 11 returned 100% blocks executed 100%
       11: 1272:int council_roomAction(int currentPlayer, struct gameState *state, int handPos)
        -: 1273:{
        -: 1274:	int i;
        -: 1275:	//+4 Cards
       55: 1276:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1277:	{
       44: 1278:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1279:	}
        -: 1280:			
        -: 1281:	//+1 Buy
       11: 1282:	state->numBuys++;
        -: 1283:			
        -: 1284:	//Each other player draws a card
       35: 1285:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -: 1286:	{
        -: 1287:	  /*************************** BUG *****************************/
        -: 1288:	  /* every player draws a card */
        -: 1289:	 // if ( i != currentPlayer )
        -: 1290:	   // {
       24: 1291:	    	drawCard(i, state);
call    0 returned 100%
        -: 1292:	   // }
        -: 1293:	}
        -: 1294:			
        -: 1295:	//put played card in played card pile
       11: 1296:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       11: 1297:	return 0;
        -: 1298:}
        -: 1299:
function feastAction called 0 returned 0% blocks executed 0%
    #####: 1300:int feastAction(int currentPlayer, struct gameState *state, int choice1)
        -: 1301:{
        -: 1302:	int i;
        -: 1303:	int temphand[MAX_HAND];
        -: 1304:	//gain card with cost up to 5
        -: 1305:	//Backup hand  OFF-By-ONE??????????????
    #####: 1306:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1307:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1308:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1309:	}
        -: 1310:	//Backup hand
        -: 1311:
        -: 1312:	//Update Coins for Buy
    #####: 1313:	updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1314:	int x = 1;//Condition to loop on
    #####: 1315:	while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1316:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1317:			if (DEBUG)
        -: 1318:		    		printf("None of that card left, sorry!\n");
        -: 1319:
        -: 1320:			if (DEBUG){
        -: 1321:		   		 printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1322:		  	}
        -: 1323:		}
    #####: 1324:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1325:		  	printf("That card is too expensive!\n");
call    0 never executed
        -: 1326:
        -: 1327:		  	if (DEBUG){
        -: 1328:		    	printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1329:		  	}
        -: 1330:		}	
        -: 1331:		else{
        -: 1332:			if (DEBUG){
        -: 1333:		    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1334:		  	}
        -: 1335:
    #####: 1336:		  	gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
        -: 1337:			/************************* BUG *************************************/
        -: 1338:			/* infinite loop */
        -: 1339:		  	//x = 0;//No more buying cards
        -: 1340:
        -: 1341:		  	if (DEBUG){
        -: 1342:		    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1343:	  		}
        -: 1344:
        -: 1345:		}
        -: 1346:	}	     
        -: 1347:
        -: 1348:	//Reset Hand
    #####: 1349:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1350:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1351:		temphand[i] = -1;
        -: 1352:	}
    #####: 1353:	return 0;
        -: 1354:}
        -: 1355:
function remodelAction called 2 returned 100% blocks executed 93%
        2: 1356:int remodelAction(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1357:{
        -: 1358:	int i;
        2: 1359:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1360:
        2: 1361:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1362:	{
    #####: 1363:	  return -1;
        -: 1364:	}
        -: 1365:
        2: 1366:	gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -: 1367:
        -: 1368:	//discard card from hand
        2: 1369:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1370:
        -: 1371:	//discard trashed card
        4: 1372:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -: 1373:	{
        4: 1374:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1375:	    {
        2: 1376:	      discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        2: 1377:	      break;
        -: 1378:	    }
        -: 1379:	}
        2: 1380:	return 0;
        -: 1381:}
        -: 1382:
        -: 1383://end of dominion.c
        -: 1384:
make[1]: Entering directory `/nfs/stak/users/dongxiao/CS362/CS362-W2019/projects/dongxiao/dominion'
gcc -o cardtest1 -g cardtest1.c dominion.o rngs.o -Wall -fpic -coverage -lm -std=c99
./cardtest1
----------------------- Testing Adventurer ----------------------

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
Expected total card count: 10; Actual total card count: 10
TEST SUCCESSFULLY COMPLETED: first card added is a treasure card
TEST SUCCESSFULLY COMPLETED: second card added is a treasure card

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
Expected total card count: 10; Actual total card count: 10
TEST SUCCESSFULLY COMPLETED: first card added is a treasure card
TEST SUCCESSFULLY COMPLETED: second card added is a treasure card

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
Expected total card count: 10; Actual total card count: 10
TEST SUCCESSFULLY COMPLETED: first card added is a treasure card
TEST SUCCESSFULLY COMPLETED: second card added is a treasure card

Enter a positive integer seed (9 digits or less) >> TEST FAILED: 2 cards added to hand
TEST FAILED: Player's total card count should remain unchanged
Expected total card count: 10; Actual total card count: 11
TEST SUCCESSFULLY COMPLETED: first card added is a treasure card
TEST SUCCESSFULLY COMPLETED: second card added is a treasure card

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
Expected total card count: 10; Actual total card count: 10
TEST SUCCESSFULLY COMPLETED: first card added is a treasure card
TEST SUCCESSFULLY COMPLETED: second card added is a treasure card

Enter a positive integer seed (9 digits or less) >> TEST FAILED: 2 cards added to hand
TEST FAILED: Player's total card count should remain unchanged
Expected total card count: 10; Actual total card count: 12
TEST SUCCESSFULLY COMPLETED: first card added is a treasure card
TEST SUCCESSFULLY COMPLETED: second card added is a treasure card

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
Expected total card count: 10; Actual total card count: 10
TEST SUCCESSFULLY COMPLETED: first card added is a treasure card
TEST SUCCESSFULLY COMPLETED: second card added is a treasure card

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
Expected total card count: 10; Actual total card count: 10
TEST SUCCESSFULLY COMPLETED: first card added is a treasure card
TEST SUCCESSFULLY COMPLETED: second card added is a treasure card

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
Expected total card count: 10; Actual total card count: 10
TEST SUCCESSFULLY COMPLETED: first card added is a treasure card
TEST SUCCESSFULLY COMPLETED: second card added is a treasure card

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
Expected total card count: 10; Actual total card count: 10
TEST SUCCESSFULLY COMPLETED: first card added is a treasure card
TEST SUCCESSFULLY COMPLETED: second card added is a treasure card
gcov -b dominion.c
File 'dominion.c'
Lines executed:42.14% of 560
Branches executed:43.13% of 415
Taken at least once:27.95% of 415
Calls executed:40.00% of 95
Creating 'dominion.c.gcov'

make[1]: Leaving directory `/nfs/stak/users/dongxiao/CS362/CS362-W2019/projects/dongxiao/dominion'
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1230 returned 100% blocks executed 83%
     1230:    8:int compare(const void* a, const void* b) {
     1230:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     1230:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      328:   12:    return -1;
      902:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 2 returned 100% blocks executed 100%
        2:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        2:   23:  int* k = malloc(10 * sizeof(int));
        2:   24:  k[0] = k1;
        2:   25:  k[1] = k2;
        2:   26:  k[2] = k3;
        2:   27:  k[3] = k4;
        2:   28:  k[4] = k5;
        2:   29:  k[5] = k6;
        2:   30:  k[6] = k7;
        2:   31:  k[7] = k8;
        2:   32:  k[8] = k9;
        2:   33:  k[9] = k10;
        2:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 37 returned 100% blocks executed 95%
       37:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       37:   44:  SelectStream(1);
call    0 returned 100%
       37:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       37:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       37:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      398:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     3979:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     3618:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   62:	    {
        1:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       36:   73:  if (numPlayers == 2)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:   74:    {
       31:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        5:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        5:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       36:   87:  if (numPlayers == 2)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:   88:    {
       31:   89:      state->supplyCount[estate] = 8;
       31:   90:      state->supplyCount[duchy] = 8;
       31:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        5:   95:      state->supplyCount[estate] = 12;
        5:   96:      state->supplyCount[duchy] = 12;
        5:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       36:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       36:  102:  state->supplyCount[silver] = 40;
       36:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      756:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     5940:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     5580:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      360:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
       72:  115:		  if (numPlayers == 2){ 
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       31:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        5:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      324:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      360:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     5220:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      118:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  139:    {
       82:  140:      state->deckCount[i] = 0;
      328:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      246:  143:	  state->deck[i][j] = estate;
      246:  144:	  state->deckCount[i]++;
        -:  145:	}
      656:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      574:  148:	  state->deck[i][j] = copper;
      574:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      118:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  155:    {
       82:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      118:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       82:  166:      state->handCount[i] = 0;
       82:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1008:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      972:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       36:  182:  state->outpostPlayed = 0;
       36:  183:  state->phase = 0;
       36:  184:  state->numActions = 1;
       36:  185:  state->numBuys = 1;
       36:  186:  state->playedCardCount = 0;
       36:  187:  state->whoseTurn = 0;
       36:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      216:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      180:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       36:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       36:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 90 returned 100% blocks executed 100%
       90:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       90:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       90:  209:  if (state->deckCount[player] < 1)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        8:  210:    return -1;
       82:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      984:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      820:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      820:  216:    newDeck[newDeckPos] = state->deck[player][card];
      820:  217:    newDeckPos++;
     2712:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
     1892:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      820:  221:    state->deckCount[player]--;
        -:  222:  }
      902:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      820:  224:    state->deck[player][i] = newDeck[i];
      820:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       82:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 14 returned 100% blocks executed 100%
       14:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       14:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       14:  237:  if (state->phase != 0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  238:    {
        1:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       13:  243:  if ( state->numActions < 1 )
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  244:    {
        1:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       12:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
       12:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
        1:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       11:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 36% (fallthrough)
branch  2 taken 64%
        -:  259:    {
        4:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        7:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 21 returned 100% blocks executed 100%
       21:  315:int handCard(int handPos, struct gameState *state) {
       21:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       21:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 29 returned 100% blocks executed 100%
       29:  320:int supplyCount(int card, struct gameState *state) {
       29:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 64 returned 100% blocks executed 100%
       64:  346:int whoseTurn(struct gameState *state) {
       64:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 281 returned 100% blocks executed 85%
      281:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      281:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        8:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        8:  538:    state->deckCount[player] = state->discardCount[player];
        8:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        8:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        8:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        8:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        8:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        8:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      273:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      273:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      273:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      273:  576:    state->deckCount[player]--;
      273:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      273:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 6 returned 100% blocks executed 13%
        6:  583:int getCost(int cardNumber)
        -:  584:{
        6:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 33%
branch  3 taken 0%
branch  4 taken 67%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
        4:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://declarations of the card functions
        -:  647:int adventurerAction(int currentPlayer, struct gameState *state);
        -:  648:int smithyAction(int currentPlayer, struct gameState *state, int handPos);
        -:  649:int council_roomAction(int currentPlayer, struct gameState *state, int handPos);
        -:  650:int feastAction(int currentPlayer, struct gameState *state, int choice1);
        -:  651:int remodelAction(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos);
        -:  652:
        -:  653:
        -:  654:
function cardEffect called 39 returned 100% blocks executed 18%
       39:  655:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  656:{
        -:  657:  int i;
        -:  658:  int j;
        -:  659:  int k;
        -:  660://  int x;
        -:  661:  int index;
       39:  662:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       39:  663:  int nextPlayer = currentPlayer + 1;
        -:  664:
       39:  665:  int tributeRevealedCards[2] = {-1, -1};
        -:  666://  int temphand[MAX_HAND];// moved above the if statement
        -:  667://  int drawntreasure=0;
        -:  668://  int cardDrawn;
        -:  669://  int z = 0;// this is the counter for the temp hand
       39:  670:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  671:    nextPlayer = 0;
        -:  672:  }
        -:  673:  
        -:  674:	
        -:  675:  //uses switch to select card and perform actions
       39:  676:  switch( card ) 
branch  0 taken 26%
branch  1 taken 28%
branch  2 taken 0%
branch  3 taken 3%
branch  4 taken 0%
branch  5 taken 5%
branch  6 taken 0%
branch  7 taken 5%
branch  8 taken 0%
branch  9 taken 10%
branch 10 taken 0%
branch 11 taken 5%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 5%
branch 17 taken 5%
branch 18 taken 0%
branch 19 taken 8%
branch 20 taken 0%
        -:  677:    {
        -:  678:    case adventurer:
       10:  679:    	adventurerAction(currentPlayer, state);
call    0 returned 100%
       10:  680:	return 0;
        -:  681:    case council_room:
       11:  682: 	council_roomAction(currentPlayer, state, handPos);
call    0 returned 100%
       11:  683:      	return 0;
        -:  684:			
        -:  685:    case feast:
    #####:  686:	feastAction(currentPlayer, state, choice1);	
call    0 never executed
    #####:  687:      	return 0;
        -:  688:			
        -:  689:    case gardens:
        1:  690:      return -1;
        -:  691:			
        -:  692:    case mine:
    #####:  693:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  694:
    #####:  695:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  696:	{
    #####:  697:	  return -1;
        -:  698:	}
        -:  699:		
    #####:  700:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  701:	{
    #####:  702:	  return -1;
        -:  703:	}
        -:  704:
    #####:  705:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  706:	{
    #####:  707:	  return -1;
        -:  708:	}
        -:  709:
    #####:  710:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  711:
        -:  712:      //discard card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  714:
        -:  715:      //discard trashed card
    #####:  716:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  717:	{
    #####:  718:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  719:	    {
    #####:  720:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  721:	      break;
        -:  722:	    }
        -:  723:	}
        -:  724:			
    #####:  725:      return 0;
        -:  726:			
        -:  727:    case remodel:
        2:  728:      remodelAction(currentPlayer, state, choice1, choice2, handPos);
call    0 returned 100%
        2:  729:      return 0;
        -:  730:		
        -:  731:    case smithy:
        -:  732:      //+3 Cards
    #####:  733:      smithyAction(currentPlayer, state, handPos);
call    0 never executed
    #####:  734:      return 0;
        -:  735:		
        -:  736:    case village:
        -:  737:      //+1 Card
        2:  738:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  739:			
        -:  740:      //+2 Actions
        2:  741:      state->numActions = state->numActions + 2;
        -:  742:			
        -:  743:      //discard played card from hand
        2:  744:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  745:      return 0;
        -:  746:		
        -:  747:    case baron:
    #####:  748:      state->numBuys++;//Increase buys by 1!
    #####:  749:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  750:	int p = 0;//Iterator for hand!
    #####:  751:	int card_not_discarded = 1;//Flag for discard set!
    #####:  752:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  753:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  754:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  755:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  756:	    state->discardCount[currentPlayer]++;
    #####:  757:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  758:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  759:	    }
    #####:  760:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  761:	    state->handCount[currentPlayer]--;
    #####:  762:	    card_not_discarded = 0;//Exit the loop
        -:  763:	  }
    #####:  764:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  765:	    if(DEBUG) {
        -:  766:	      printf("No estate cards in your hand, invalid choice\n");
        -:  767:	      printf("Must gain an estate if there are any\n");
        -:  768:	    }
    #####:  769:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  770:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  771:	      state->supplyCount[estate]--;//Decrement estates
    #####:  772:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  773:		isGameOver(state);
call    0 never executed
        -:  774:	      }
        -:  775:	    }
    #####:  776:	    card_not_discarded = 0;//Exit the loop
        -:  777:	  }
        -:  778:			    
        -:  779:	  else{
    #####:  780:	    p++;//Next card
        -:  781:	  }
        -:  782:	}
        -:  783:      }
        -:  784:			    
        -:  785:      else{
    #####:  786:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  787:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  788:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  789:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  790:	    isGameOver(state);
call    0 never executed
        -:  791:	  }
        -:  792:	}
        -:  793:      }
        -:  794:	    
        -:  795:      
    #####:  796:      return 0;
        -:  797:		
        -:  798:    case great_hall:
        -:  799:      //+1 Card
        4:  800:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  801:			
        -:  802:      //+1 Actions
        4:  803:      state->numActions++;
        -:  804:			
        -:  805:      //discard card from hand
        4:  806:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        4:  807:      return 0;
        -:  808:		
        -:  809:    case minion:
        -:  810:      //+1 action
    #####:  811:      state->numActions++;
        -:  812:			
        -:  813:      //discard card from hand
    #####:  814:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  815:			
    #####:  816:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  817:	{
    #####:  818:	  state->coins = state->coins + 2;
        -:  819:	}
        -:  820:			
    #####:  821:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  822:	{
        -:  823:	  //discard hand
    #####:  824:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  825:	    {
    #####:  826:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  827:	    }
        -:  828:				
        -:  829:	  //draw 4
    #####:  830:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  831:	    {
    #####:  832:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  833:	    }
        -:  834:				
        -:  835:	  //other players discard hand and redraw if hand size > 4
    #####:  836:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  837:	    {
    #####:  838:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  839:		{
    #####:  840:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  841:		    {
        -:  842:		      //discard hand
    #####:  843:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  844:			{
    #####:  845:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  846:			}
        -:  847:							
        -:  848:		      //draw 4
    #####:  849:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  850:			{
    #####:  851:			  drawCard(i, state);
call    0 never executed
        -:  852:			}
        -:  853:		    }
        -:  854:		}
        -:  855:	    }
        -:  856:				
        -:  857:	}
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case steward:
        2:  861:      if (choice1 == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  862:	{
        -:  863:	  //+2 cards
        2:  864:	  drawCard(currentPlayer, state);
call    0 returned 100%
        2:  865:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  866:	}
    #####:  867:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  868:	{
        -:  869:	  //+2 coins
    #####:  870:	  state->coins = state->coins + 2;
        -:  871:	}
        -:  872:      else
        -:  873:	{
        -:  874:	  //trash 2 cards in hand
    #####:  875:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  876:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  877:	}
        -:  878:			
        -:  879:      //discard card from hand
        2:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  881:      return 0;
        -:  882:		
        -:  883:    case tribute:
    #####:  884:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  885:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  886:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  887:	  state->deckCount[nextPlayer]--;
        -:  888:	}
    #####:  889:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  890:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  891:	  state->discardCount[nextPlayer]--;
        -:  892:	}
        -:  893:	else{
        -:  894:	  //No Card to Reveal
        -:  895:	  if (DEBUG){
        -:  896:	    printf("No cards to reveal\n");
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      else{
    #####:  902:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  903:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  904:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  905:	    state->deckCount[nextPlayer]++;
    #####:  906:	    state->discard[nextPlayer][i] = -1;
    #####:  907:	    state->discardCount[nextPlayer]--;
        -:  908:	  }
        -:  909:			    
    #####:  910:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  911:	} 
    #####:  912:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  913:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  914:	state->deckCount[nextPlayer]--;
    #####:  915:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
        -:  918:      }    
        -:  919:		       
    #####:  920:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  921:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  922:	state->playedCardCount++;
    #####:  923:	tributeRevealedCards[1] = -1;
        -:  924:      }
        -:  925:
    #####:  926:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  927:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  928:	  state->coins += 2;
        -:  929:	}
        -:  930:		    
    #####:  931:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  932:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  933:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  934:	}
        -:  935:	else{//Action Card
    #####:  936:	  state->numActions = state->numActions + 2;
        -:  937:	}
        -:  938:      }
        -:  939:	    
    #####:  940:      return 0;
        -:  941:		
        -:  942:    case ambassador:
    #####:  943:      j = 0;		//used to check if player has enough cards to discard
        -:  944:
    #####:  945:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  946:	{
    #####:  947:	  return -1;				
        -:  948:	}
        -:  949:
    #####:  950:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  951:	{
    #####:  952:	  return -1;
        -:  953:	}
        -:  954:
    #####:  955:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  956:	{
    #####:  957:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  958:	    {
    #####:  959:	      j++;
        -:  960:	    }
        -:  961:	}
    #####:  962:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  return -1;				
        -:  965:	}
        -:  966:
        -:  967:      if (DEBUG) 
        -:  968:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  969:
        -:  970:      //increase supply count for choosen card by amount being discarded
    #####:  971:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  972:			
        -:  973:      //each other player gains a copy of revealed card
    #####:  974:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  977:	    {
    #####:  978:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  979:	    }
        -:  980:	}
        -:  981:
        -:  982:      //discard played card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  984:
        -:  985:      //trash copies of cards returned to supply
    #####:  986:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  987:	{
    #####:  988:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  989:	    {
    #####:  990:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  991:		{
    #####:  992:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  993:		  break;
        -:  994:		}
        -:  995:	    }
        -:  996:	}			
        -:  997:
    #####:  998:      return 0;
        -:  999:		
        -: 1000:    case cutpurse:
        -: 1001:
    #####: 1002:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1003:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
    #####: 1005:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1008:		{
    #####: 1009:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1010:		    {
    #####: 1011:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1012:		      break;
        -: 1013:		    }
    #####: 1014:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1015:		    {
    #####: 1016:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1017:			{
        -: 1018:			  if (DEBUG)
        -: 1019:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1020:			}	
    #####: 1021:		      break;
        -: 1022:		    }		
        -: 1023:		}
        -: 1024:					
        -: 1025:	    }
        -: 1026:				
        -: 1027:	}				
        -: 1028:
        -: 1029:      //discard played card from hand
    #####: 1030:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1031:
    #####: 1032:      return 0;
        -: 1033:
        -: 1034:		
        -: 1035:    case embargo: 
        -: 1036:      //+2 Coins
    #####: 1037:      state->coins = state->coins + 2;
        -: 1038:			
        -: 1039:      //see if selected pile is in play
    #####: 1040:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1041:	{
    #####: 1042:	  return -1;
        -: 1043:	}
        -: 1044:			
        -: 1045:      //add embargo token to selected supply pile
    #####: 1046:      state->embargoTokens[choice1]++;
        -: 1047:			
        -: 1048:      //trash card
    #####: 1049:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case outpost:
        -: 1053:      //set outpost flag
        2: 1054:      state->outpostPlayed++;
        -: 1055:			
        -: 1056:      //discard card
        2: 1057:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1058:      return 0;
        -: 1059:		
        -: 1060:    case salvager:
        -: 1061:      //+1 buy
        2: 1062:      state->numBuys++;
        -: 1063:			
        2: 1064:      if (choice1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1065:	{
        -: 1066:	  //gain coins equal to trashed card
        2: 1067:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1068:	  //trash card
        2: 1069:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 100%
        -: 1070:	}
        -: 1071:			
        -: 1072:      //discard card
        2: 1073:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1074:      return 0;
        -: 1075:		
        -: 1076:    case sea_hag:
    #####: 1077:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1078:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1079:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1080:	  state->discardCount[i]++;
    #####: 1081:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1082:	}
        -: 1083:      }
    #####: 1084:      return 0;
        -: 1085:		
        -: 1086:    case treasure_map:
        -: 1087:      //search hand for another treasure_map
        3: 1088:      index = -1;
       18: 1089:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1090:	{
       15: 1091:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1092:	    {
    #####: 1093:	      index = i;
    #####: 1094:	      break;
        -: 1095:	    }
        -: 1096:	}
        3: 1097:      if (index > -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1098:	{
        -: 1099:	  //trash both treasure cards
    #####: 1100:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1101:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1102:
        -: 1103:	  //gain 4 Gold cards
    #####: 1104:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1105:	    {
    #####: 1106:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1107:	    }
        -: 1108:				
        -: 1109:	  //return success
    #####: 1110:	  return 1;
        -: 1111:	}
        -: 1112:			
        -: 1113:      //no second treasure_map found in hand
        3: 1114:      return -1;
        -: 1115:    }
        -: 1116:	
    #####: 1117:  return -1;
        -: 1118:}
        -: 1119:
function discardCard called 29 returned 100% blocks executed 78%
       29: 1120:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1121:{
        -: 1122:	
        -: 1123:  //if card is not trashed, added to Played pile 
       29: 1124:  if (trashFlag < 1)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -: 1125:    {
        -: 1126:      //add card to played pile
       27: 1127:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       27: 1128:      state->playedCardCount++;
        -: 1129:    }
        -: 1130:	
        -: 1131:  //set played card to -1
       29: 1132:  state->hand[currentPlayer][handPos] = -1;
        -: 1133:	
        -: 1134:  //remove card from player's hand
       29: 1135:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1136:    {
        -: 1137:      //reduce number of cards in hand
    #####: 1138:      state->handCount[currentPlayer]--;
        -: 1139:    }
       29: 1140:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1141:    {
        -: 1142:      //reduce number of cards in hand
    #####: 1143:      state->handCount[currentPlayer]--;
        -: 1144:    }
        -: 1145:  else 	
        -: 1146:    {
        -: 1147:      //replace discarded card with last card in hand
       29: 1148:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1149:      //set last card to -1
       29: 1150:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1151:      //reduce number of cards in hand
       29: 1152:      state->handCount[currentPlayer]--;
        -: 1153:    }
        -: 1154:	
       29: 1155:  return 0;
        -: 1156:}
        -: 1157:
function gainCard called 2 returned 100% blocks executed 70%
        2: 1158:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1159:{
        -: 1160:  //Note: supplyPos is enum of choosen card
        -: 1161:	
        -: 1162:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1163:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1164:    {
    #####: 1165:      return -1;
        -: 1166:    }
        -: 1167:	
        -: 1168:  //added card for [whoseTurn] current player:
        -: 1169:  // toFlag = 0 : add to discard
        -: 1170:  // toFlag = 1 : add to deck
        -: 1171:  // toFlag = 2 : add to hand
        -: 1172:
        2: 1173:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1174:    {
    #####: 1175:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1176:      state->deckCount[player]++;
        -: 1177:    }
        2: 1178:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1179:    {
    #####: 1180:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1181:      state->handCount[player]++;
        -: 1182:    }
        -: 1183:  else
        -: 1184:    {
        2: 1185:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1186:      state->discardCount[player]++;
        -: 1187:    }
        -: 1188:	
        -: 1189:  //decrease number in supply pile
        2: 1190:  state->supplyCount[supplyPos]--;
        -: 1191:	 
        2: 1192:  return 0;
        -: 1193:}
        -: 1194:
function updateCoins called 50 returned 100% blocks executed 82%
       50: 1195:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1196:{
        -: 1197:  int i;
        -: 1198:	
        -: 1199:  //reset coin count
       50: 1200:  state->coins = 0;
        -: 1201:
        -: 1202:  //add coins for each Treasure card in player's hand
      292: 1203:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1204:    {
      242: 1205:      if (state->hand[player][i] == copper)
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
        -: 1206:	{
      184: 1207:	  state->coins += 1;
        -: 1208:	}
       58: 1209:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1210:	{
    #####: 1211:	  state->coins += 2;
        -: 1212:	}
       58: 1213:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1214:	{
    #####: 1215:	  state->coins += 3;
        -: 1216:	}	
        -: 1217:    }	
        -: 1218:
        -: 1219:  //add bonus
       50: 1220:  state->coins += bonus;
        -: 1221:
       50: 1222:  return 0;
        -: 1223:}
        -: 1224:
function adventurerAction called 10 returned 100% blocks executed 93%
       10: 1225:int adventurerAction(int currentPlayer, struct gameState *state)
        -: 1226:{
        -: 1227:	int cardDrawn;
       10: 1228:	int drawntreasure = 0;
        -: 1229:	int temphand[MAX_HAND];
       10: 1230:	int z = 0; //this is the counter for the temp hand
       43: 1231:	while(drawntreasure<2){
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
       23: 1232:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1233:			shuffle(currentPlayer, state);
call    0 never executed
        -: 1234:		}
       23: 1235:		drawCard(currentPlayer, state);
call    0 returned 100%
       23: 1236:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       23: 1237:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       20: 1238:			drawntreasure++;
        -: 1239:		else{
        3: 1240:			temphand[z]=cardDrawn;
        -: 1241:			/********************** BUG ***************************************/
        -: 1242:			/* Do not remove the top card. So the player have two copies of cardDrawn */
        -: 1243:			//state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3: 1244:			z++;
        -: 1245:		}
        -: 1246:      }
       23: 1247:      while(z-1>=0){
branch  0 taken 23%
branch  1 taken 77% (fallthrough)
        3: 1248:      		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        3: 1249:		z=z-1;
        -: 1250:      }
       10: 1251:      return 0;
        -: 1252:}	
        -: 1253:
        -: 1254:
function smithyAction called 0 returned 0% blocks executed 0%
    #####: 1255:int smithyAction(int currentPlayer, struct gameState *state, int handPos)
        -: 1256:{      
        -: 1257:	int i;
    #####: 1258:	for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1259:	{
    #####: 1260:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1261:	}
        -: 1262:			
        -: 1263:	//discard card from hand
        -: 1264:	/************************** BUG *************************/
        -: 1265:	/* Trash the card instead of put the card in the discard pile */
        -: 1266:	//discardCard(handPos, currentPlayer, state, 0);
    #####: 1267:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1268:	return 0;
        -: 1269:}     
        -: 1270:
        -: 1271:
function council_roomAction called 11 returned 100% blocks executed 100%
       11: 1272:int council_roomAction(int currentPlayer, struct gameState *state, int handPos)
        -: 1273:{
        -: 1274:	int i;
        -: 1275:	//+4 Cards
       55: 1276:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1277:	{
       44: 1278:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1279:	}
        -: 1280:			
        -: 1281:	//+1 Buy
       11: 1282:	state->numBuys++;
        -: 1283:			
        -: 1284:	//Each other player draws a card
       35: 1285:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -: 1286:	{
        -: 1287:	  /*************************** BUG *****************************/
        -: 1288:	  /* every player draws a card */
        -: 1289:	 // if ( i != currentPlayer )
        -: 1290:	   // {
       24: 1291:	    	drawCard(i, state);
call    0 returned 100%
        -: 1292:	   // }
        -: 1293:	}
        -: 1294:			
        -: 1295:	//put played card in played card pile
       11: 1296:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       11: 1297:	return 0;
        -: 1298:}
        -: 1299:
function feastAction called 0 returned 0% blocks executed 0%
    #####: 1300:int feastAction(int currentPlayer, struct gameState *state, int choice1)
        -: 1301:{
        -: 1302:	int i;
        -: 1303:	int temphand[MAX_HAND];
        -: 1304:	//gain card with cost up to 5
        -: 1305:	//Backup hand  OFF-By-ONE??????????????
    #####: 1306:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1307:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1308:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1309:	}
        -: 1310:	//Backup hand
        -: 1311:
        -: 1312:	//Update Coins for Buy
    #####: 1313:	updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1314:	int x = 1;//Condition to loop on
    #####: 1315:	while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1316:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1317:			if (DEBUG)
        -: 1318:		    		printf("None of that card left, sorry!\n");
        -: 1319:
        -: 1320:			if (DEBUG){
        -: 1321:		   		 printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1322:		  	}
        -: 1323:		}
    #####: 1324:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1325:		  	printf("That card is too expensive!\n");
call    0 never executed
        -: 1326:
        -: 1327:		  	if (DEBUG){
        -: 1328:		    	printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1329:		  	}
        -: 1330:		}	
        -: 1331:		else{
        -: 1332:			if (DEBUG){
        -: 1333:		    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1334:		  	}
        -: 1335:
    #####: 1336:		  	gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
        -: 1337:			/************************* BUG *************************************/
        -: 1338:			/* infinite loop */
        -: 1339:		  	//x = 0;//No more buying cards
        -: 1340:
        -: 1341:		  	if (DEBUG){
        -: 1342:		    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1343:	  		}
        -: 1344:
        -: 1345:		}
        -: 1346:	}	     
        -: 1347:
        -: 1348:	//Reset Hand
    #####: 1349:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1350:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1351:		temphand[i] = -1;
        -: 1352:	}
    #####: 1353:	return 0;
        -: 1354:}
        -: 1355:
function remodelAction called 2 returned 100% blocks executed 93%
        2: 1356:int remodelAction(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1357:{
        -: 1358:	int i;
        2: 1359:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1360:
        2: 1361:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1362:	{
    #####: 1363:	  return -1;
        -: 1364:	}
        -: 1365:
        2: 1366:	gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -: 1367:
        -: 1368:	//discard card from hand
        2: 1369:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1370:
        -: 1371:	//discard trashed card
        4: 1372:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -: 1373:	{
        4: 1374:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1375:	    {
        2: 1376:	      discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        2: 1377:	      break;
        -: 1378:	    }
        -: 1379:	}
        2: 1380:	return 0;
        -: 1381:}
        -: 1382:
        -: 1383://end of dominion.c
        -: 1384:
make[1]: Entering directory `/nfs/stak/users/dongxiao/CS362/CS362-W2019/projects/dongxiao/dominion'
gcc -o cardtest2 -g cardtest2.c dominion.o rngs.o -Wall -fpic -coverage -lm -std=c99
./cardtest2
----------------------- Testing Smithy ----------------------

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST FAILED: 1 card is played
Old playedCardCount: 0; New playedCardCount: 0
TEST FAILED: The played card is smithy
TEST FAILED: Player's total card count should remain unchanged

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST FAILED: 1 card is played
Old playedCardCount: 0; New playedCardCount: 0
TEST FAILED: The played card is smithy
TEST FAILED: Player's total card count should remain unchanged

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST FAILED: 1 card is played
Old playedCardCount: 0; New playedCardCount: 0
TEST FAILED: The played card is smithy
TEST FAILED: Player's total card count should remain unchanged

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST FAILED: 1 card is played
Old playedCardCount: 0; New playedCardCount: 0
TEST FAILED: The played card is smithy
TEST FAILED: Player's total card count should remain unchanged

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST FAILED: 1 card is played
Old playedCardCount: 0; New playedCardCount: 0
TEST FAILED: The played card is smithy
TEST FAILED: Player's total card count should remain unchanged

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST FAILED: 1 card is played
Old playedCardCount: 0; New playedCardCount: 0
TEST FAILED: The played card is smithy
TEST FAILED: Player's total card count should remain unchanged

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST FAILED: 1 card is played
Old playedCardCount: 0; New playedCardCount: 0
TEST FAILED: The played card is smithy
TEST FAILED: Player's total card count should remain unchanged

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST FAILED: 1 card is played
Old playedCardCount: 0; New playedCardCount: 0
TEST FAILED: The played card is smithy
TEST FAILED: Player's total card count should remain unchanged

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST FAILED: 1 card is played
Old playedCardCount: 0; New playedCardCount: 0
TEST FAILED: The played card is smithy
TEST FAILED: Player's total card count should remain unchanged

Enter a positive integer seed (9 digits or less) >> TEST SUCCESSFULLY COMPLETED: 2 cards added to hand
TEST FAILED: 1 card is played
Old playedCardCount: 0; New playedCardCount: 0
TEST FAILED: The played card is smithy
TEST FAILED: Player's total card count should remain unchanged
gcov -b dominion.c
File 'dominion.c'
Lines executed:43.39% of 560
Branches executed:43.61% of 415
Taken at least once:28.67% of 415
Calls executed:43.16% of 95
Creating 'dominion.c.gcov'

make[1]: Leaving directory `/nfs/stak/users/dongxiao/CS362/CS362-W2019/projects/dongxiao/dominion'
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1530 returned 100% blocks executed 83%
     1530:    8:int compare(const void* a, const void* b) {
     1530:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     1530:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      408:   12:    return -1;
     1122:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 2 returned 100% blocks executed 100%
        2:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        2:   23:  int* k = malloc(10 * sizeof(int));
        2:   24:  k[0] = k1;
        2:   25:  k[1] = k2;
        2:   26:  k[2] = k3;
        2:   27:  k[3] = k4;
        2:   28:  k[4] = k5;
        2:   29:  k[5] = k6;
        2:   30:  k[6] = k7;
        2:   31:  k[7] = k8;
        2:   32:  k[8] = k9;
        2:   33:  k[9] = k10;
        2:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 47 returned 100% blocks executed 95%
       47:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       47:   44:  SelectStream(1);
call    0 returned 100%
       47:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       47:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       47:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      508:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     5079:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     4618:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   62:	    {
        1:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       46:   73:  if (numPlayers == 2)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        -:   74:    {
       41:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        5:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        5:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       46:   87:  if (numPlayers == 2)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        -:   88:    {
       41:   89:      state->supplyCount[estate] = 8;
       41:   90:      state->supplyCount[duchy] = 8;
       41:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        5:   95:      state->supplyCount[estate] = 12;
        5:   96:      state->supplyCount[duchy] = 12;
        5:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       46:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       46:  102:  state->supplyCount[silver] = 40;
       46:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      966:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     7590:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     7130:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      460:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
       92:  115:		  if (numPlayers == 2){ 
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       41:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        5:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      414:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      460:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     6670:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      148:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  139:    {
      102:  140:      state->deckCount[i] = 0;
      408:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      306:  143:	  state->deck[i][j] = estate;
      306:  144:	  state->deckCount[i]++;
        -:  145:	}
      816:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      714:  148:	  state->deck[i][j] = copper;
      714:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      148:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  155:    {
      102:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      148:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      102:  166:      state->handCount[i] = 0;
      102:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1288:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     1242:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       46:  182:  state->outpostPlayed = 0;
       46:  183:  state->phase = 0;
       46:  184:  state->numActions = 1;
       46:  185:  state->numBuys = 1;
       46:  186:  state->playedCardCount = 0;
       46:  187:  state->whoseTurn = 0;
       46:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      276:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      230:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       46:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       46:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 110 returned 100% blocks executed 100%
      110:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      110:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      110:  209:  if (state->deckCount[player] < 1)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        8:  210:    return -1;
      102:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1224:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1020:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     1020:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1020:  217:    newDeckPos++;
     3394:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
     2374:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1020:  221:    state->deckCount[player]--;
        -:  222:  }
     1122:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1020:  224:    state->deck[player][i] = newDeck[i];
     1020:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      102:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 14 returned 100% blocks executed 100%
       14:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       14:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       14:  237:  if (state->phase != 0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  238:    {
        1:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       13:  243:  if ( state->numActions < 1 )
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  244:    {
        1:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       12:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
       12:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
        1:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       11:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 36% (fallthrough)
branch  2 taken 64%
        -:  259:    {
        4:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        7:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 21 returned 100% blocks executed 100%
       21:  315:int handCard(int handPos, struct gameState *state) {
       21:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       21:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 29 returned 100% blocks executed 100%
       29:  320:int supplyCount(int card, struct gameState *state) {
       29:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 74 returned 100% blocks executed 100%
       74:  346:int whoseTurn(struct gameState *state) {
       74:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 361 returned 100% blocks executed 85%
      361:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      361:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        8:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        8:  538:    state->deckCount[player] = state->discardCount[player];
        8:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        8:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        8:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        8:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        8:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        8:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      353:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      353:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      353:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      353:  576:    state->deckCount[player]--;
      353:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      353:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 6 returned 100% blocks executed 13%
        6:  583:int getCost(int cardNumber)
        -:  584:{
        6:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 33%
branch  3 taken 0%
branch  4 taken 67%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
        4:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://declarations of the card functions
        -:  647:int adventurerAction(int currentPlayer, struct gameState *state);
        -:  648:int smithyAction(int currentPlayer, struct gameState *state, int handPos);
        -:  649:int council_roomAction(int currentPlayer, struct gameState *state, int handPos);
        -:  650:int feastAction(int currentPlayer, struct gameState *state, int choice1);
        -:  651:int remodelAction(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos);
        -:  652:
        -:  653:
        -:  654:
function cardEffect called 49 returned 100% blocks executed 19%
       49:  655:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  656:{
        -:  657:  int i;
        -:  658:  int j;
        -:  659:  int k;
        -:  660://  int x;
        -:  661:  int index;
       49:  662:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       49:  663:  int nextPlayer = currentPlayer + 1;
        -:  664:
       49:  665:  int tributeRevealedCards[2] = {-1, -1};
        -:  666://  int temphand[MAX_HAND];// moved above the if statement
        -:  667://  int drawntreasure=0;
        -:  668://  int cardDrawn;
        -:  669://  int z = 0;// this is the counter for the temp hand
       49:  670:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  671:    nextPlayer = 0;
        -:  672:  }
        -:  673:  
        -:  674:	
        -:  675:  //uses switch to select card and perform actions
       49:  676:  switch( card ) 
branch  0 taken 20%
branch  1 taken 22%
branch  2 taken 0%
branch  3 taken 2%
branch  4 taken 0%
branch  5 taken 4%
branch  6 taken 20%
branch  7 taken 4%
branch  8 taken 0%
branch  9 taken 8%
branch 10 taken 0%
branch 11 taken 4%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 0%
branch 19 taken 6%
branch 20 taken 0%
        -:  677:    {
        -:  678:    case adventurer:
       10:  679:    	adventurerAction(currentPlayer, state);
call    0 returned 100%
       10:  680:	return 0;
        -:  681:    case council_room:
       11:  682: 	council_roomAction(currentPlayer, state, handPos);
call    0 returned 100%
       11:  683:      	return 0;
        -:  684:			
        -:  685:    case feast:
    #####:  686:	feastAction(currentPlayer, state, choice1);	
call    0 never executed
    #####:  687:      	return 0;
        -:  688:			
        -:  689:    case gardens:
        1:  690:      return -1;
        -:  691:			
        -:  692:    case mine:
    #####:  693:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  694:
    #####:  695:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  696:	{
    #####:  697:	  return -1;
        -:  698:	}
        -:  699:		
    #####:  700:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  701:	{
    #####:  702:	  return -1;
        -:  703:	}
        -:  704:
    #####:  705:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  706:	{
    #####:  707:	  return -1;
        -:  708:	}
        -:  709:
    #####:  710:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  711:
        -:  712:      //discard card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  714:
        -:  715:      //discard trashed card
    #####:  716:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  717:	{
    #####:  718:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  719:	    {
    #####:  720:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  721:	      break;
        -:  722:	    }
        -:  723:	}
        -:  724:			
    #####:  725:      return 0;
        -:  726:			
        -:  727:    case remodel:
        2:  728:      remodelAction(currentPlayer, state, choice1, choice2, handPos);
call    0 returned 100%
        2:  729:      return 0;
        -:  730:		
        -:  731:    case smithy:
        -:  732:      //+3 Cards
       10:  733:      smithyAction(currentPlayer, state, handPos);
call    0 returned 100%
       10:  734:      return 0;
        -:  735:		
        -:  736:    case village:
        -:  737:      //+1 Card
        2:  738:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  739:			
        -:  740:      //+2 Actions
        2:  741:      state->numActions = state->numActions + 2;
        -:  742:			
        -:  743:      //discard played card from hand
        2:  744:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  745:      return 0;
        -:  746:		
        -:  747:    case baron:
    #####:  748:      state->numBuys++;//Increase buys by 1!
    #####:  749:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  750:	int p = 0;//Iterator for hand!
    #####:  751:	int card_not_discarded = 1;//Flag for discard set!
    #####:  752:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  753:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  754:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  755:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  756:	    state->discardCount[currentPlayer]++;
    #####:  757:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  758:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  759:	    }
    #####:  760:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  761:	    state->handCount[currentPlayer]--;
    #####:  762:	    card_not_discarded = 0;//Exit the loop
        -:  763:	  }
    #####:  764:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  765:	    if(DEBUG) {
        -:  766:	      printf("No estate cards in your hand, invalid choice\n");
        -:  767:	      printf("Must gain an estate if there are any\n");
        -:  768:	    }
    #####:  769:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  770:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  771:	      state->supplyCount[estate]--;//Decrement estates
    #####:  772:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  773:		isGameOver(state);
call    0 never executed
        -:  774:	      }
        -:  775:	    }
    #####:  776:	    card_not_discarded = 0;//Exit the loop
        -:  777:	  }
        -:  778:			    
        -:  779:	  else{
    #####:  780:	    p++;//Next card
        -:  781:	  }
        -:  782:	}
        -:  783:      }
        -:  784:			    
        -:  785:      else{
    #####:  786:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  787:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  788:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  789:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  790:	    isGameOver(state);
call    0 never executed
        -:  791:	  }
        -:  792:	}
        -:  793:      }
        -:  794:	    
        -:  795:      
    #####:  796:      return 0;
        -:  797:		
        -:  798:    case great_hall:
        -:  799:      //+1 Card
        4:  800:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  801:			
        -:  802:      //+1 Actions
        4:  803:      state->numActions++;
        -:  804:			
        -:  805:      //discard card from hand
        4:  806:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        4:  807:      return 0;
        -:  808:		
        -:  809:    case minion:
        -:  810:      //+1 action
    #####:  811:      state->numActions++;
        -:  812:			
        -:  813:      //discard card from hand
    #####:  814:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  815:			
    #####:  816:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  817:	{
    #####:  818:	  state->coins = state->coins + 2;
        -:  819:	}
        -:  820:			
    #####:  821:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  822:	{
        -:  823:	  //discard hand
    #####:  824:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  825:	    {
    #####:  826:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  827:	    }
        -:  828:				
        -:  829:	  //draw 4
    #####:  830:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  831:	    {
    #####:  832:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  833:	    }
        -:  834:				
        -:  835:	  //other players discard hand and redraw if hand size > 4
    #####:  836:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  837:	    {
    #####:  838:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  839:		{
    #####:  840:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  841:		    {
        -:  842:		      //discard hand
    #####:  843:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  844:			{
    #####:  845:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  846:			}
        -:  847:							
        -:  848:		      //draw 4
    #####:  849:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  850:			{
    #####:  851:			  drawCard(i, state);
call    0 never executed
        -:  852:			}
        -:  853:		    }
        -:  854:		}
        -:  855:	    }
        -:  856:				
        -:  857:	}
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case steward:
        2:  861:      if (choice1 == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  862:	{
        -:  863:	  //+2 cards
        2:  864:	  drawCard(currentPlayer, state);
call    0 returned 100%
        2:  865:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  866:	}
    #####:  867:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  868:	{
        -:  869:	  //+2 coins
    #####:  870:	  state->coins = state->coins + 2;
        -:  871:	}
        -:  872:      else
        -:  873:	{
        -:  874:	  //trash 2 cards in hand
    #####:  875:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  876:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  877:	}
        -:  878:			
        -:  879:      //discard card from hand
        2:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  881:      return 0;
        -:  882:		
        -:  883:    case tribute:
    #####:  884:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  885:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  886:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  887:	  state->deckCount[nextPlayer]--;
        -:  888:	}
    #####:  889:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  890:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  891:	  state->discardCount[nextPlayer]--;
        -:  892:	}
        -:  893:	else{
        -:  894:	  //No Card to Reveal
        -:  895:	  if (DEBUG){
        -:  896:	    printf("No cards to reveal\n");
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      else{
    #####:  902:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  903:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  904:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  905:	    state->deckCount[nextPlayer]++;
    #####:  906:	    state->discard[nextPlayer][i] = -1;
    #####:  907:	    state->discardCount[nextPlayer]--;
        -:  908:	  }
        -:  909:			    
    #####:  910:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  911:	} 
    #####:  912:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  913:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  914:	state->deckCount[nextPlayer]--;
    #####:  915:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
        -:  918:      }    
        -:  919:		       
    #####:  920:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  921:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  922:	state->playedCardCount++;
    #####:  923:	tributeRevealedCards[1] = -1;
        -:  924:      }
        -:  925:
    #####:  926:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  927:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  928:	  state->coins += 2;
        -:  929:	}
        -:  930:		    
    #####:  931:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  932:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  933:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  934:	}
        -:  935:	else{//Action Card
    #####:  936:	  state->numActions = state->numActions + 2;
        -:  937:	}
        -:  938:      }
        -:  939:	    
    #####:  940:      return 0;
        -:  941:		
        -:  942:    case ambassador:
    #####:  943:      j = 0;		//used to check if player has enough cards to discard
        -:  944:
    #####:  945:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  946:	{
    #####:  947:	  return -1;				
        -:  948:	}
        -:  949:
    #####:  950:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  951:	{
    #####:  952:	  return -1;
        -:  953:	}
        -:  954:
    #####:  955:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  956:	{
    #####:  957:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  958:	    {
    #####:  959:	      j++;
        -:  960:	    }
        -:  961:	}
    #####:  962:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  return -1;				
        -:  965:	}
        -:  966:
        -:  967:      if (DEBUG) 
        -:  968:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  969:
        -:  970:      //increase supply count for choosen card by amount being discarded
    #####:  971:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  972:			
        -:  973:      //each other player gains a copy of revealed card
    #####:  974:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  977:	    {
    #####:  978:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  979:	    }
        -:  980:	}
        -:  981:
        -:  982:      //discard played card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  984:
        -:  985:      //trash copies of cards returned to supply
    #####:  986:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  987:	{
    #####:  988:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  989:	    {
    #####:  990:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  991:		{
    #####:  992:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  993:		  break;
        -:  994:		}
        -:  995:	    }
        -:  996:	}			
        -:  997:
    #####:  998:      return 0;
        -:  999:		
        -: 1000:    case cutpurse:
        -: 1001:
    #####: 1002:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1003:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
    #####: 1005:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1008:		{
    #####: 1009:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1010:		    {
    #####: 1011:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1012:		      break;
        -: 1013:		    }
    #####: 1014:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1015:		    {
    #####: 1016:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1017:			{
        -: 1018:			  if (DEBUG)
        -: 1019:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1020:			}	
    #####: 1021:		      break;
        -: 1022:		    }		
        -: 1023:		}
        -: 1024:					
        -: 1025:	    }
        -: 1026:				
        -: 1027:	}				
        -: 1028:
        -: 1029:      //discard played card from hand
    #####: 1030:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1031:
    #####: 1032:      return 0;
        -: 1033:
        -: 1034:		
        -: 1035:    case embargo: 
        -: 1036:      //+2 Coins
    #####: 1037:      state->coins = state->coins + 2;
        -: 1038:			
        -: 1039:      //see if selected pile is in play
    #####: 1040:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1041:	{
    #####: 1042:	  return -1;
        -: 1043:	}
        -: 1044:			
        -: 1045:      //add embargo token to selected supply pile
    #####: 1046:      state->embargoTokens[choice1]++;
        -: 1047:			
        -: 1048:      //trash card
    #####: 1049:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case outpost:
        -: 1053:      //set outpost flag
        2: 1054:      state->outpostPlayed++;
        -: 1055:			
        -: 1056:      //discard card
        2: 1057:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1058:      return 0;
        -: 1059:		
        -: 1060:    case salvager:
        -: 1061:      //+1 buy
        2: 1062:      state->numBuys++;
        -: 1063:			
        2: 1064:      if (choice1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1065:	{
        -: 1066:	  //gain coins equal to trashed card
        2: 1067:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1068:	  //trash card
        2: 1069:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 100%
        -: 1070:	}
        -: 1071:			
        -: 1072:      //discard card
        2: 1073:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1074:      return 0;
        -: 1075:		
        -: 1076:    case sea_hag:
    #####: 1077:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1078:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1079:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1080:	  state->discardCount[i]++;
    #####: 1081:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1082:	}
        -: 1083:      }
    #####: 1084:      return 0;
        -: 1085:		
        -: 1086:    case treasure_map:
        -: 1087:      //search hand for another treasure_map
        3: 1088:      index = -1;
       18: 1089:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1090:	{
       15: 1091:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1092:	    {
    #####: 1093:	      index = i;
    #####: 1094:	      break;
        -: 1095:	    }
        -: 1096:	}
        3: 1097:      if (index > -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1098:	{
        -: 1099:	  //trash both treasure cards
    #####: 1100:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1101:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1102:
        -: 1103:	  //gain 4 Gold cards
    #####: 1104:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1105:	    {
    #####: 1106:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1107:	    }
        -: 1108:				
        -: 1109:	  //return success
    #####: 1110:	  return 1;
        -: 1111:	}
        -: 1112:			
        -: 1113:      //no second treasure_map found in hand
        3: 1114:      return -1;
        -: 1115:    }
        -: 1116:	
    #####: 1117:  return -1;
        -: 1118:}
        -: 1119:
function discardCard called 39 returned 100% blocks executed 78%
       39: 1120:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1121:{
        -: 1122:	
        -: 1123:  //if card is not trashed, added to Played pile 
       39: 1124:  if (trashFlag < 1)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -: 1125:    {
        -: 1126:      //add card to played pile
       27: 1127:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       27: 1128:      state->playedCardCount++;
        -: 1129:    }
        -: 1130:	
        -: 1131:  //set played card to -1
       39: 1132:  state->hand[currentPlayer][handPos] = -1;
        -: 1133:	
        -: 1134:  //remove card from player's hand
       39: 1135:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1136:    {
        -: 1137:      //reduce number of cards in hand
    #####: 1138:      state->handCount[currentPlayer]--;
        -: 1139:    }
       39: 1140:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1141:    {
        -: 1142:      //reduce number of cards in hand
    #####: 1143:      state->handCount[currentPlayer]--;
        -: 1144:    }
        -: 1145:  else 	
        -: 1146:    {
        -: 1147:      //replace discarded card with last card in hand
       39: 1148:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1149:      //set last card to -1
       39: 1150:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1151:      //reduce number of cards in hand
       39: 1152:      state->handCount[currentPlayer]--;
        -: 1153:    }
        -: 1154:	
       39: 1155:  return 0;
        -: 1156:}
        -: 1157:
function gainCard called 2 returned 100% blocks executed 70%
        2: 1158:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1159:{
        -: 1160:  //Note: supplyPos is enum of choosen card
        -: 1161:	
        -: 1162:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1163:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1164:    {
    #####: 1165:      return -1;
        -: 1166:    }
        -: 1167:	
        -: 1168:  //added card for [whoseTurn] current player:
        -: 1169:  // toFlag = 0 : add to discard
        -: 1170:  // toFlag = 1 : add to deck
        -: 1171:  // toFlag = 2 : add to hand
        -: 1172:
        2: 1173:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1174:    {
    #####: 1175:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1176:      state->deckCount[player]++;
        -: 1177:    }
        2: 1178:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1179:    {
    #####: 1180:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1181:      state->handCount[player]++;
        -: 1182:    }
        -: 1183:  else
        -: 1184:    {
        2: 1185:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1186:      state->discardCount[player]++;
        -: 1187:    }
        -: 1188:	
        -: 1189:  //decrease number in supply pile
        2: 1190:  state->supplyCount[supplyPos]--;
        -: 1191:	 
        2: 1192:  return 0;
        -: 1193:}
        -: 1194:
function updateCoins called 60 returned 100% blocks executed 82%
       60: 1195:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1196:{
        -: 1197:  int i;
        -: 1198:	
        -: 1199:  //reset coin count
       60: 1200:  state->coins = 0;
        -: 1201:
        -: 1202:  //add coins for each Treasure card in player's hand
      352: 1203:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1204:    {
      292: 1205:      if (state->hand[player][i] == copper)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -: 1206:	{
      219: 1207:	  state->coins += 1;
        -: 1208:	}
       73: 1209:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1210:	{
    #####: 1211:	  state->coins += 2;
        -: 1212:	}
       73: 1213:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1214:	{
    #####: 1215:	  state->coins += 3;
        -: 1216:	}	
        -: 1217:    }	
        -: 1218:
        -: 1219:  //add bonus
       60: 1220:  state->coins += bonus;
        -: 1221:
       60: 1222:  return 0;
        -: 1223:}
        -: 1224:
function adventurerAction called 10 returned 100% blocks executed 93%
       10: 1225:int adventurerAction(int currentPlayer, struct gameState *state)
        -: 1226:{
        -: 1227:	int cardDrawn;
       10: 1228:	int drawntreasure = 0;
        -: 1229:	int temphand[MAX_HAND];
       10: 1230:	int z = 0; //this is the counter for the temp hand
       43: 1231:	while(drawntreasure<2){
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
       23: 1232:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1233:			shuffle(currentPlayer, state);
call    0 never executed
        -: 1234:		}
       23: 1235:		drawCard(currentPlayer, state);
call    0 returned 100%
       23: 1236:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       23: 1237:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       20: 1238:			drawntreasure++;
        -: 1239:		else{
        3: 1240:			temphand[z]=cardDrawn;
        -: 1241:			/********************** BUG ***************************************/
        -: 1242:			/* Do not remove the top card. So the player have two copies of cardDrawn */
        -: 1243:			//state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3: 1244:			z++;
        -: 1245:		}
        -: 1246:      }
       23: 1247:      while(z-1>=0){
branch  0 taken 23%
branch  1 taken 77% (fallthrough)
        3: 1248:      		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        3: 1249:		z=z-1;
        -: 1250:      }
       10: 1251:      return 0;
        -: 1252:}	
        -: 1253:
        -: 1254:
function smithyAction called 10 returned 100% blocks executed 100%
       10: 1255:int smithyAction(int currentPlayer, struct gameState *state, int handPos)
        -: 1256:{      
        -: 1257:	int i;
       40: 1258:	for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1259:	{
       30: 1260:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1261:	}
        -: 1262:			
        -: 1263:	//discard card from hand
        -: 1264:	/************************** BUG *************************/
        -: 1265:	/* Trash the card instead of put the card in the discard pile */
        -: 1266:	//discardCard(handPos, currentPlayer, state, 0);
       10: 1267:	discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
       10: 1268:	return 0;
        -: 1269:}     
        -: 1270:
        -: 1271:
function council_roomAction called 11 returned 100% blocks executed 100%
       11: 1272:int council_roomAction(int currentPlayer, struct gameState *state, int handPos)
        -: 1273:{
        -: 1274:	int i;
        -: 1275:	//+4 Cards
       55: 1276:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1277:	{
       44: 1278:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1279:	}
        -: 1280:			
        -: 1281:	//+1 Buy
       11: 1282:	state->numBuys++;
        -: 1283:			
        -: 1284:	//Each other player draws a card
       35: 1285:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -: 1286:	{
        -: 1287:	  /*************************** BUG *****************************/
        -: 1288:	  /* every player draws a card */
        -: 1289:	 // if ( i != currentPlayer )
        -: 1290:	   // {
       24: 1291:	    	drawCard(i, state);
call    0 returned 100%
        -: 1292:	   // }
        -: 1293:	}
        -: 1294:			
        -: 1295:	//put played card in played card pile
       11: 1296:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       11: 1297:	return 0;
        -: 1298:}
        -: 1299:
function feastAction called 0 returned 0% blocks executed 0%
    #####: 1300:int feastAction(int currentPlayer, struct gameState *state, int choice1)
        -: 1301:{
        -: 1302:	int i;
        -: 1303:	int temphand[MAX_HAND];
        -: 1304:	//gain card with cost up to 5
        -: 1305:	//Backup hand  OFF-By-ONE??????????????
    #####: 1306:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1307:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1308:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1309:	}
        -: 1310:	//Backup hand
        -: 1311:
        -: 1312:	//Update Coins for Buy
    #####: 1313:	updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1314:	int x = 1;//Condition to loop on
    #####: 1315:	while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1316:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1317:			if (DEBUG)
        -: 1318:		    		printf("None of that card left, sorry!\n");
        -: 1319:
        -: 1320:			if (DEBUG){
        -: 1321:		   		 printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1322:		  	}
        -: 1323:		}
    #####: 1324:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1325:		  	printf("That card is too expensive!\n");
call    0 never executed
        -: 1326:
        -: 1327:		  	if (DEBUG){
        -: 1328:		    	printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1329:		  	}
        -: 1330:		}	
        -: 1331:		else{
        -: 1332:			if (DEBUG){
        -: 1333:		    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1334:		  	}
        -: 1335:
    #####: 1336:		  	gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
        -: 1337:			/************************* BUG *************************************/
        -: 1338:			/* infinite loop */
        -: 1339:		  	//x = 0;//No more buying cards
        -: 1340:
        -: 1341:		  	if (DEBUG){
        -: 1342:		    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1343:	  		}
        -: 1344:
        -: 1345:		}
        -: 1346:	}	     
        -: 1347:
        -: 1348:	//Reset Hand
    #####: 1349:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1350:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1351:		temphand[i] = -1;
        -: 1352:	}
    #####: 1353:	return 0;
        -: 1354:}
        -: 1355:
function remodelAction called 2 returned 100% blocks executed 93%
        2: 1356:int remodelAction(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1357:{
        -: 1358:	int i;
        2: 1359:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1360:
        2: 1361:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1362:	{
    #####: 1363:	  return -1;
        -: 1364:	}
        -: 1365:
        2: 1366:	gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -: 1367:
        -: 1368:	//discard card from hand
        2: 1369:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1370:
        -: 1371:	//discard trashed card
        4: 1372:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -: 1373:	{
        4: 1374:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1375:	    {
        2: 1376:	      discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        2: 1377:	      break;
        -: 1378:	    }
        -: 1379:	}
        2: 1380:	return 0;
        -: 1381:}
        -: 1382:
        -: 1383://end of dominion.c
        -: 1384:
make[1]: Entering directory `/nfs/stak/users/dongxiao/CS362/CS362-W2019/projects/dongxiao/dominion'
./cardtest3
----------------------- Testing council_room ----------------------

Enter a positive integer seed (9 digits or less) >> TEST FAILED: 3 cards added to hand
Old handCount: 5; New handCount: 9
TEST SUCCESSFULLY COMPLETED: 1 card is played
TEST SUCCESSFULLY COMPLETED: The played card is council_room
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
TEST SUCCESSFULLY COMPLETED: The played adds one more buy
TEST SUCCESSFULLY COMPLETED: Player 1 adds one more card to hand

Enter a positive integer seed (9 digits or less) >> TEST FAILED: 3 cards added to hand
Old handCount: 5; New handCount: 9
TEST SUCCESSFULLY COMPLETED: 1 card is played
TEST SUCCESSFULLY COMPLETED: The played card is council_room
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
TEST SUCCESSFULLY COMPLETED: The played adds one more buy
TEST SUCCESSFULLY COMPLETED: Player 1 adds one more card to hand

Enter a positive integer seed (9 digits or less) >> TEST FAILED: 3 cards added to hand
Old handCount: 5; New handCount: 9
TEST SUCCESSFULLY COMPLETED: 1 card is played
TEST SUCCESSFULLY COMPLETED: The played card is council_room
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
TEST SUCCESSFULLY COMPLETED: The played adds one more buy
TEST SUCCESSFULLY COMPLETED: Player 1 adds one more card to hand

Enter a positive integer seed (9 digits or less) >> TEST FAILED: 3 cards added to hand
Old handCount: 5; New handCount: 9
TEST SUCCESSFULLY COMPLETED: 1 card is played
TEST SUCCESSFULLY COMPLETED: The played card is council_room
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
TEST SUCCESSFULLY COMPLETED: The played adds one more buy
TEST SUCCESSFULLY COMPLETED: Player 1 adds one more card to hand

Enter a positive integer seed (9 digits or less) >> TEST FAILED: 3 cards added to hand
Old handCount: 5; New handCount: 9
TEST SUCCESSFULLY COMPLETED: 1 card is played
TEST SUCCESSFULLY COMPLETED: The played card is council_room
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
TEST SUCCESSFULLY COMPLETED: The played adds one more buy
TEST SUCCESSFULLY COMPLETED: Player 1 adds one more card to hand

Enter a positive integer seed (9 digits or less) >> TEST FAILED: 3 cards added to hand
Old handCount: 5; New handCount: 9
TEST SUCCESSFULLY COMPLETED: 1 card is played
TEST SUCCESSFULLY COMPLETED: The played card is council_room
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
TEST SUCCESSFULLY COMPLETED: The played adds one more buy
TEST SUCCESSFULLY COMPLETED: Player 1 adds one more card to hand

Enter a positive integer seed (9 digits or less) >> TEST FAILED: 3 cards added to hand
Old handCount: 5; New handCount: 9
TEST SUCCESSFULLY COMPLETED: 1 card is played
TEST SUCCESSFULLY COMPLETED: The played card is council_room
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
TEST SUCCESSFULLY COMPLETED: The played adds one more buy
TEST SUCCESSFULLY COMPLETED: Player 1 adds one more card to hand

Enter a positive integer seed (9 digits or less) >> TEST FAILED: 3 cards added to hand
Old handCount: 5; New handCount: 9
TEST SUCCESSFULLY COMPLETED: 1 card is played
TEST SUCCESSFULLY COMPLETED: The played card is council_room
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
TEST SUCCESSFULLY COMPLETED: The played adds one more buy
TEST SUCCESSFULLY COMPLETED: Player 1 adds one more card to hand

Enter a positive integer seed (9 digits or less) >> TEST FAILED: 3 cards added to hand
Old handCount: 5; New handCount: 9
TEST SUCCESSFULLY COMPLETED: 1 card is played
TEST SUCCESSFULLY COMPLETED: The played card is council_room
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
TEST SUCCESSFULLY COMPLETED: The played adds one more buy
TEST SUCCESSFULLY COMPLETED: Player 1 adds one more card to hand

Enter a positive integer seed (9 digits or less) >> TEST FAILED: 3 cards added to hand
Old handCount: 5; New handCount: 9
TEST SUCCESSFULLY COMPLETED: 1 card is played
TEST SUCCESSFULLY COMPLETED: The played card is council_room
TEST SUCCESSFULLY COMPLETED: Player's total card count should remain unchanged
TEST SUCCESSFULLY COMPLETED: The played adds one more buy
TEST SUCCESSFULLY COMPLETED: Player 1 adds one more card to hand
gcov -b dominion.c
File 'dominion.c'
Lines executed:43.39% of 560
Branches executed:43.61% of 415
Taken at least once:28.67% of 415
Calls executed:43.16% of 95
Creating 'dominion.c.gcov'

make[1]: Leaving directory `/nfs/stak/users/dongxiao/CS362/CS362-W2019/projects/dongxiao/dominion'
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1830 returned 100% blocks executed 83%
     1830:    8:int compare(const void* a, const void* b) {
     1830:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     1830:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      488:   12:    return -1;
     1342:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 2 returned 100% blocks executed 100%
        2:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        2:   23:  int* k = malloc(10 * sizeof(int));
        2:   24:  k[0] = k1;
        2:   25:  k[1] = k2;
        2:   26:  k[2] = k3;
        2:   27:  k[3] = k4;
        2:   28:  k[4] = k5;
        2:   29:  k[5] = k6;
        2:   30:  k[6] = k7;
        2:   31:  k[7] = k8;
        2:   32:  k[8] = k9;
        2:   33:  k[9] = k10;
        2:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 57 returned 100% blocks executed 95%
       57:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       57:   44:  SelectStream(1);
call    0 returned 100%
       57:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       57:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       57:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      618:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     6179:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     5618:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   62:	    {
        1:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       56:   73:  if (numPlayers == 2)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:   74:    {
       51:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        5:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        5:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       56:   87:  if (numPlayers == 2)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:   88:    {
       51:   89:      state->supplyCount[estate] = 8;
       51:   90:      state->supplyCount[duchy] = 8;
       51:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        5:   95:      state->supplyCount[estate] = 12;
        5:   96:      state->supplyCount[duchy] = 12;
        5:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       56:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       56:  102:  state->supplyCount[silver] = 40;
       56:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1176:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     9240:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     8680:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      560:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
      112:  115:		  if (numPlayers == 2){ 
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
       51:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        5:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      504:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      560:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     8120:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      178:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  139:    {
      122:  140:      state->deckCount[i] = 0;
      488:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      366:  143:	  state->deck[i][j] = estate;
      366:  144:	  state->deckCount[i]++;
        -:  145:	}
      976:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      854:  148:	  state->deck[i][j] = copper;
      854:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      178:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  155:    {
      122:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      178:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      122:  166:      state->handCount[i] = 0;
      122:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1568:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     1512:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       56:  182:  state->outpostPlayed = 0;
       56:  183:  state->phase = 0;
       56:  184:  state->numActions = 1;
       56:  185:  state->numBuys = 1;
       56:  186:  state->playedCardCount = 0;
       56:  187:  state->whoseTurn = 0;
       56:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      336:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      280:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       56:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       56:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 130 returned 100% blocks executed 100%
      130:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      130:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      130:  209:  if (state->deckCount[player] < 1)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        8:  210:    return -1;
      122:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1464:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1220:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     1220:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1220:  217:    newDeckPos++;
     4056:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
     2836:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1220:  221:    state->deckCount[player]--;
        -:  222:  }
     1342:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1220:  224:    state->deck[player][i] = newDeck[i];
     1220:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      122:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 14 returned 100% blocks executed 100%
       14:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       14:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       14:  237:  if (state->phase != 0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  238:    {
        1:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       13:  243:  if ( state->numActions < 1 )
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  244:    {
        1:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       12:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
       12:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
        1:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       11:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 36% (fallthrough)
branch  2 taken 64%
        -:  259:    {
        4:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        7:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 21 returned 100% blocks executed 100%
       21:  315:int handCard(int handPos, struct gameState *state) {
       21:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       21:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 29 returned 100% blocks executed 100%
       29:  320:int supplyCount(int card, struct gameState *state) {
       29:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 84 returned 100% blocks executed 100%
       84:  346:int whoseTurn(struct gameState *state) {
       84:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 471 returned 100% blocks executed 85%
      471:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      471:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        8:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        8:  538:    state->deckCount[player] = state->discardCount[player];
        8:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        8:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        8:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        8:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        8:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        8:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      463:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      463:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      463:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      463:  576:    state->deckCount[player]--;
      463:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      463:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 6 returned 100% blocks executed 13%
        6:  583:int getCost(int cardNumber)
        -:  584:{
        6:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 33%
branch  3 taken 0%
branch  4 taken 67%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
        4:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://declarations of the card functions
        -:  647:int adventurerAction(int currentPlayer, struct gameState *state);
        -:  648:int smithyAction(int currentPlayer, struct gameState *state, int handPos);
        -:  649:int council_roomAction(int currentPlayer, struct gameState *state, int handPos);
        -:  650:int feastAction(int currentPlayer, struct gameState *state, int choice1);
        -:  651:int remodelAction(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos);
        -:  652:
        -:  653:
        -:  654:
function cardEffect called 59 returned 100% blocks executed 19%
       59:  655:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  656:{
        -:  657:  int i;
        -:  658:  int j;
        -:  659:  int k;
        -:  660://  int x;
        -:  661:  int index;
       59:  662:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       59:  663:  int nextPlayer = currentPlayer + 1;
        -:  664:
       59:  665:  int tributeRevealedCards[2] = {-1, -1};
        -:  666://  int temphand[MAX_HAND];// moved above the if statement
        -:  667://  int drawntreasure=0;
        -:  668://  int cardDrawn;
        -:  669://  int z = 0;// this is the counter for the temp hand
       59:  670:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  671:    nextPlayer = 0;
        -:  672:  }
        -:  673:  
        -:  674:	
        -:  675:  //uses switch to select card and perform actions
       59:  676:  switch( card ) 
branch  0 taken 17%
branch  1 taken 36%
branch  2 taken 0%
branch  3 taken 2%
branch  4 taken 0%
branch  5 taken 3%
branch  6 taken 17%
branch  7 taken 3%
branch  8 taken 0%
branch  9 taken 7%
branch 10 taken 0%
branch 11 taken 3%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 0%
branch 19 taken 5%
branch 20 taken 0%
        -:  677:    {
        -:  678:    case adventurer:
       10:  679:    	adventurerAction(currentPlayer, state);
call    0 returned 100%
       10:  680:	return 0;
        -:  681:    case council_room:
       21:  682: 	council_roomAction(currentPlayer, state, handPos);
call    0 returned 100%
       21:  683:      	return 0;
        -:  684:			
        -:  685:    case feast:
    #####:  686:	feastAction(currentPlayer, state, choice1);	
call    0 never executed
    #####:  687:      	return 0;
        -:  688:			
        -:  689:    case gardens:
        1:  690:      return -1;
        -:  691:			
        -:  692:    case mine:
    #####:  693:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  694:
    #####:  695:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  696:	{
    #####:  697:	  return -1;
        -:  698:	}
        -:  699:		
    #####:  700:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  701:	{
    #####:  702:	  return -1;
        -:  703:	}
        -:  704:
    #####:  705:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  706:	{
    #####:  707:	  return -1;
        -:  708:	}
        -:  709:
    #####:  710:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  711:
        -:  712:      //discard card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  714:
        -:  715:      //discard trashed card
    #####:  716:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  717:	{
    #####:  718:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  719:	    {
    #####:  720:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  721:	      break;
        -:  722:	    }
        -:  723:	}
        -:  724:			
    #####:  725:      return 0;
        -:  726:			
        -:  727:    case remodel:
        2:  728:      remodelAction(currentPlayer, state, choice1, choice2, handPos);
call    0 returned 100%
        2:  729:      return 0;
        -:  730:		
        -:  731:    case smithy:
        -:  732:      //+3 Cards
       10:  733:      smithyAction(currentPlayer, state, handPos);
call    0 returned 100%
       10:  734:      return 0;
        -:  735:		
        -:  736:    case village:
        -:  737:      //+1 Card
        2:  738:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  739:			
        -:  740:      //+2 Actions
        2:  741:      state->numActions = state->numActions + 2;
        -:  742:			
        -:  743:      //discard played card from hand
        2:  744:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  745:      return 0;
        -:  746:		
        -:  747:    case baron:
    #####:  748:      state->numBuys++;//Increase buys by 1!
    #####:  749:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  750:	int p = 0;//Iterator for hand!
    #####:  751:	int card_not_discarded = 1;//Flag for discard set!
    #####:  752:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  753:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  754:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  755:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  756:	    state->discardCount[currentPlayer]++;
    #####:  757:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  758:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  759:	    }
    #####:  760:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  761:	    state->handCount[currentPlayer]--;
    #####:  762:	    card_not_discarded = 0;//Exit the loop
        -:  763:	  }
    #####:  764:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  765:	    if(DEBUG) {
        -:  766:	      printf("No estate cards in your hand, invalid choice\n");
        -:  767:	      printf("Must gain an estate if there are any\n");
        -:  768:	    }
    #####:  769:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  770:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  771:	      state->supplyCount[estate]--;//Decrement estates
    #####:  772:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  773:		isGameOver(state);
call    0 never executed
        -:  774:	      }
        -:  775:	    }
    #####:  776:	    card_not_discarded = 0;//Exit the loop
        -:  777:	  }
        -:  778:			    
        -:  779:	  else{
    #####:  780:	    p++;//Next card
        -:  781:	  }
        -:  782:	}
        -:  783:      }
        -:  784:			    
        -:  785:      else{
    #####:  786:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  787:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  788:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  789:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  790:	    isGameOver(state);
call    0 never executed
        -:  791:	  }
        -:  792:	}
        -:  793:      }
        -:  794:	    
        -:  795:      
    #####:  796:      return 0;
        -:  797:		
        -:  798:    case great_hall:
        -:  799:      //+1 Card
        4:  800:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  801:			
        -:  802:      //+1 Actions
        4:  803:      state->numActions++;
        -:  804:			
        -:  805:      //discard card from hand
        4:  806:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        4:  807:      return 0;
        -:  808:		
        -:  809:    case minion:
        -:  810:      //+1 action
    #####:  811:      state->numActions++;
        -:  812:			
        -:  813:      //discard card from hand
    #####:  814:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  815:			
    #####:  816:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  817:	{
    #####:  818:	  state->coins = state->coins + 2;
        -:  819:	}
        -:  820:			
    #####:  821:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  822:	{
        -:  823:	  //discard hand
    #####:  824:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  825:	    {
    #####:  826:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  827:	    }
        -:  828:				
        -:  829:	  //draw 4
    #####:  830:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  831:	    {
    #####:  832:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  833:	    }
        -:  834:				
        -:  835:	  //other players discard hand and redraw if hand size > 4
    #####:  836:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  837:	    {
    #####:  838:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  839:		{
    #####:  840:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  841:		    {
        -:  842:		      //discard hand
    #####:  843:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  844:			{
    #####:  845:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  846:			}
        -:  847:							
        -:  848:		      //draw 4
    #####:  849:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  850:			{
    #####:  851:			  drawCard(i, state);
call    0 never executed
        -:  852:			}
        -:  853:		    }
        -:  854:		}
        -:  855:	    }
        -:  856:				
        -:  857:	}
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case steward:
        2:  861:      if (choice1 == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  862:	{
        -:  863:	  //+2 cards
        2:  864:	  drawCard(currentPlayer, state);
call    0 returned 100%
        2:  865:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  866:	}
    #####:  867:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  868:	{
        -:  869:	  //+2 coins
    #####:  870:	  state->coins = state->coins + 2;
        -:  871:	}
        -:  872:      else
        -:  873:	{
        -:  874:	  //trash 2 cards in hand
    #####:  875:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  876:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  877:	}
        -:  878:			
        -:  879:      //discard card from hand
        2:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  881:      return 0;
        -:  882:		
        -:  883:    case tribute:
    #####:  884:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  885:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  886:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  887:	  state->deckCount[nextPlayer]--;
        -:  888:	}
    #####:  889:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  890:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  891:	  state->discardCount[nextPlayer]--;
        -:  892:	}
        -:  893:	else{
        -:  894:	  //No Card to Reveal
        -:  895:	  if (DEBUG){
        -:  896:	    printf("No cards to reveal\n");
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      else{
    #####:  902:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  903:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  904:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  905:	    state->deckCount[nextPlayer]++;
    #####:  906:	    state->discard[nextPlayer][i] = -1;
    #####:  907:	    state->discardCount[nextPlayer]--;
        -:  908:	  }
        -:  909:			    
    #####:  910:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  911:	} 
    #####:  912:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  913:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  914:	state->deckCount[nextPlayer]--;
    #####:  915:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
        -:  918:      }    
        -:  919:		       
    #####:  920:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  921:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  922:	state->playedCardCount++;
    #####:  923:	tributeRevealedCards[1] = -1;
        -:  924:      }
        -:  925:
    #####:  926:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  927:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  928:	  state->coins += 2;
        -:  929:	}
        -:  930:		    
    #####:  931:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  932:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  933:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  934:	}
        -:  935:	else{//Action Card
    #####:  936:	  state->numActions = state->numActions + 2;
        -:  937:	}
        -:  938:      }
        -:  939:	    
    #####:  940:      return 0;
        -:  941:		
        -:  942:    case ambassador:
    #####:  943:      j = 0;		//used to check if player has enough cards to discard
        -:  944:
    #####:  945:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  946:	{
    #####:  947:	  return -1;				
        -:  948:	}
        -:  949:
    #####:  950:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  951:	{
    #####:  952:	  return -1;
        -:  953:	}
        -:  954:
    #####:  955:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  956:	{
    #####:  957:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  958:	    {
    #####:  959:	      j++;
        -:  960:	    }
        -:  961:	}
    #####:  962:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  return -1;				
        -:  965:	}
        -:  966:
        -:  967:      if (DEBUG) 
        -:  968:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  969:
        -:  970:      //increase supply count for choosen card by amount being discarded
    #####:  971:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  972:			
        -:  973:      //each other player gains a copy of revealed card
    #####:  974:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  977:	    {
    #####:  978:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  979:	    }
        -:  980:	}
        -:  981:
        -:  982:      //discard played card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  984:
        -:  985:      //trash copies of cards returned to supply
    #####:  986:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  987:	{
    #####:  988:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  989:	    {
    #####:  990:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  991:		{
    #####:  992:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  993:		  break;
        -:  994:		}
        -:  995:	    }
        -:  996:	}			
        -:  997:
    #####:  998:      return 0;
        -:  999:		
        -: 1000:    case cutpurse:
        -: 1001:
    #####: 1002:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1003:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
    #####: 1005:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1008:		{
    #####: 1009:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1010:		    {
    #####: 1011:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1012:		      break;
        -: 1013:		    }
    #####: 1014:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1015:		    {
    #####: 1016:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1017:			{
        -: 1018:			  if (DEBUG)
        -: 1019:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1020:			}	
    #####: 1021:		      break;
        -: 1022:		    }		
        -: 1023:		}
        -: 1024:					
        -: 1025:	    }
        -: 1026:				
        -: 1027:	}				
        -: 1028:
        -: 1029:      //discard played card from hand
    #####: 1030:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1031:
    #####: 1032:      return 0;
        -: 1033:
        -: 1034:		
        -: 1035:    case embargo: 
        -: 1036:      //+2 Coins
    #####: 1037:      state->coins = state->coins + 2;
        -: 1038:			
        -: 1039:      //see if selected pile is in play
    #####: 1040:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1041:	{
    #####: 1042:	  return -1;
        -: 1043:	}
        -: 1044:			
        -: 1045:      //add embargo token to selected supply pile
    #####: 1046:      state->embargoTokens[choice1]++;
        -: 1047:			
        -: 1048:      //trash card
    #####: 1049:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case outpost:
        -: 1053:      //set outpost flag
        2: 1054:      state->outpostPlayed++;
        -: 1055:			
        -: 1056:      //discard card
        2: 1057:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1058:      return 0;
        -: 1059:		
        -: 1060:    case salvager:
        -: 1061:      //+1 buy
        2: 1062:      state->numBuys++;
        -: 1063:			
        2: 1064:      if (choice1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1065:	{
        -: 1066:	  //gain coins equal to trashed card
        2: 1067:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1068:	  //trash card
        2: 1069:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 100%
        -: 1070:	}
        -: 1071:			
        -: 1072:      //discard card
        2: 1073:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1074:      return 0;
        -: 1075:		
        -: 1076:    case sea_hag:
    #####: 1077:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1078:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1079:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1080:	  state->discardCount[i]++;
    #####: 1081:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1082:	}
        -: 1083:      }
    #####: 1084:      return 0;
        -: 1085:		
        -: 1086:    case treasure_map:
        -: 1087:      //search hand for another treasure_map
        3: 1088:      index = -1;
       18: 1089:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1090:	{
       15: 1091:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1092:	    {
    #####: 1093:	      index = i;
    #####: 1094:	      break;
        -: 1095:	    }
        -: 1096:	}
        3: 1097:      if (index > -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1098:	{
        -: 1099:	  //trash both treasure cards
    #####: 1100:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1101:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1102:
        -: 1103:	  //gain 4 Gold cards
    #####: 1104:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1105:	    {
    #####: 1106:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1107:	    }
        -: 1108:				
        -: 1109:	  //return success
    #####: 1110:	  return 1;
        -: 1111:	}
        -: 1112:			
        -: 1113:      //no second treasure_map found in hand
        3: 1114:      return -1;
        -: 1115:    }
        -: 1116:	
    #####: 1117:  return -1;
        -: 1118:}
        -: 1119:
function discardCard called 49 returned 100% blocks executed 78%
       49: 1120:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1121:{
        -: 1122:	
        -: 1123:  //if card is not trashed, added to Played pile 
       49: 1124:  if (trashFlag < 1)
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
        -: 1125:    {
        -: 1126:      //add card to played pile
       37: 1127:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       37: 1128:      state->playedCardCount++;
        -: 1129:    }
        -: 1130:	
        -: 1131:  //set played card to -1
       49: 1132:  state->hand[currentPlayer][handPos] = -1;
        -: 1133:	
        -: 1134:  //remove card from player's hand
       49: 1135:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1136:    {
        -: 1137:      //reduce number of cards in hand
    #####: 1138:      state->handCount[currentPlayer]--;
        -: 1139:    }
       49: 1140:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1141:    {
        -: 1142:      //reduce number of cards in hand
    #####: 1143:      state->handCount[currentPlayer]--;
        -: 1144:    }
        -: 1145:  else 	
        -: 1146:    {
        -: 1147:      //replace discarded card with last card in hand
       49: 1148:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1149:      //set last card to -1
       49: 1150:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1151:      //reduce number of cards in hand
       49: 1152:      state->handCount[currentPlayer]--;
        -: 1153:    }
        -: 1154:	
       49: 1155:  return 0;
        -: 1156:}
        -: 1157:
function gainCard called 2 returned 100% blocks executed 70%
        2: 1158:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1159:{
        -: 1160:  //Note: supplyPos is enum of choosen card
        -: 1161:	
        -: 1162:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1163:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1164:    {
    #####: 1165:      return -1;
        -: 1166:    }
        -: 1167:	
        -: 1168:  //added card for [whoseTurn] current player:
        -: 1169:  // toFlag = 0 : add to discard
        -: 1170:  // toFlag = 1 : add to deck
        -: 1171:  // toFlag = 2 : add to hand
        -: 1172:
        2: 1173:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1174:    {
    #####: 1175:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1176:      state->deckCount[player]++;
        -: 1177:    }
        2: 1178:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1179:    {
    #####: 1180:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1181:      state->handCount[player]++;
        -: 1182:    }
        -: 1183:  else
        -: 1184:    {
        2: 1185:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1186:      state->discardCount[player]++;
        -: 1187:    }
        -: 1188:	
        -: 1189:  //decrease number in supply pile
        2: 1190:  state->supplyCount[supplyPos]--;
        -: 1191:	 
        2: 1192:  return 0;
        -: 1193:}
        -: 1194:
function updateCoins called 70 returned 100% blocks executed 82%
       70: 1195:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1196:{
        -: 1197:  int i;
        -: 1198:	
        -: 1199:  //reset coin count
       70: 1200:  state->coins = 0;
        -: 1201:
        -: 1202:  //add coins for each Treasure card in player's hand
      412: 1203:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1204:    {
      342: 1205:      if (state->hand[player][i] == copper)
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
        -: 1206:	{
      254: 1207:	  state->coins += 1;
        -: 1208:	}
       88: 1209:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1210:	{
    #####: 1211:	  state->coins += 2;
        -: 1212:	}
       88: 1213:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1214:	{
    #####: 1215:	  state->coins += 3;
        -: 1216:	}	
        -: 1217:    }	
        -: 1218:
        -: 1219:  //add bonus
       70: 1220:  state->coins += bonus;
        -: 1221:
       70: 1222:  return 0;
        -: 1223:}
        -: 1224:
function adventurerAction called 10 returned 100% blocks executed 93%
       10: 1225:int adventurerAction(int currentPlayer, struct gameState *state)
        -: 1226:{
        -: 1227:	int cardDrawn;
       10: 1228:	int drawntreasure = 0;
        -: 1229:	int temphand[MAX_HAND];
       10: 1230:	int z = 0; //this is the counter for the temp hand
       43: 1231:	while(drawntreasure<2){
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
       23: 1232:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1233:			shuffle(currentPlayer, state);
call    0 never executed
        -: 1234:		}
       23: 1235:		drawCard(currentPlayer, state);
call    0 returned 100%
       23: 1236:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       23: 1237:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       20: 1238:			drawntreasure++;
        -: 1239:		else{
        3: 1240:			temphand[z]=cardDrawn;
        -: 1241:			/********************** BUG ***************************************/
        -: 1242:			/* Do not remove the top card. So the player have two copies of cardDrawn */
        -: 1243:			//state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3: 1244:			z++;
        -: 1245:		}
        -: 1246:      }
       23: 1247:      while(z-1>=0){
branch  0 taken 23%
branch  1 taken 77% (fallthrough)
        3: 1248:      		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        3: 1249:		z=z-1;
        -: 1250:      }
       10: 1251:      return 0;
        -: 1252:}	
        -: 1253:
        -: 1254:
function smithyAction called 10 returned 100% blocks executed 100%
       10: 1255:int smithyAction(int currentPlayer, struct gameState *state, int handPos)
        -: 1256:{      
        -: 1257:	int i;
       40: 1258:	for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1259:	{
       30: 1260:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1261:	}
        -: 1262:			
        -: 1263:	//discard card from hand
        -: 1264:	/************************** BUG *************************/
        -: 1265:	/* Trash the card instead of put the card in the discard pile */
        -: 1266:	//discardCard(handPos, currentPlayer, state, 0);
       10: 1267:	discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
       10: 1268:	return 0;
        -: 1269:}     
        -: 1270:
        -: 1271:
function council_roomAction called 21 returned 100% blocks executed 100%
       21: 1272:int council_roomAction(int currentPlayer, struct gameState *state, int handPos)
        -: 1273:{
        -: 1274:	int i;
        -: 1275:	//+4 Cards
      105: 1276:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1277:	{
       84: 1278:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1279:	}
        -: 1280:			
        -: 1281:	//+1 Buy
       21: 1282:	state->numBuys++;
        -: 1283:			
        -: 1284:	//Each other player draws a card
       65: 1285:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -: 1286:	{
        -: 1287:	  /*************************** BUG *****************************/
        -: 1288:	  /* every player draws a card */
        -: 1289:	 // if ( i != currentPlayer )
        -: 1290:	   // {
       44: 1291:	    	drawCard(i, state);
call    0 returned 100%
        -: 1292:	   // }
        -: 1293:	}
        -: 1294:			
        -: 1295:	//put played card in played card pile
       21: 1296:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       21: 1297:	return 0;
        -: 1298:}
        -: 1299:
function feastAction called 0 returned 0% blocks executed 0%
    #####: 1300:int feastAction(int currentPlayer, struct gameState *state, int choice1)
        -: 1301:{
        -: 1302:	int i;
        -: 1303:	int temphand[MAX_HAND];
        -: 1304:	//gain card with cost up to 5
        -: 1305:	//Backup hand  OFF-By-ONE??????????????
    #####: 1306:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1307:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1308:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1309:	}
        -: 1310:	//Backup hand
        -: 1311:
        -: 1312:	//Update Coins for Buy
    #####: 1313:	updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1314:	int x = 1;//Condition to loop on
    #####: 1315:	while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1316:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1317:			if (DEBUG)
        -: 1318:		    		printf("None of that card left, sorry!\n");
        -: 1319:
        -: 1320:			if (DEBUG){
        -: 1321:		   		 printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1322:		  	}
        -: 1323:		}
    #####: 1324:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1325:		  	printf("That card is too expensive!\n");
call    0 never executed
        -: 1326:
        -: 1327:		  	if (DEBUG){
        -: 1328:		    	printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1329:		  	}
        -: 1330:		}	
        -: 1331:		else{
        -: 1332:			if (DEBUG){
        -: 1333:		    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1334:		  	}
        -: 1335:
    #####: 1336:		  	gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
        -: 1337:			/************************* BUG *************************************/
        -: 1338:			/* infinite loop */
        -: 1339:		  	//x = 0;//No more buying cards
        -: 1340:
        -: 1341:		  	if (DEBUG){
        -: 1342:		    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1343:	  		}
        -: 1344:
        -: 1345:		}
        -: 1346:	}	     
        -: 1347:
        -: 1348:	//Reset Hand
    #####: 1349:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1350:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1351:		temphand[i] = -1;
        -: 1352:	}
    #####: 1353:	return 0;
        -: 1354:}
        -: 1355:
function remodelAction called 2 returned 100% blocks executed 93%
        2: 1356:int remodelAction(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1357:{
        -: 1358:	int i;
        2: 1359:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1360:
        2: 1361:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1362:	{
    #####: 1363:	  return -1;
        -: 1364:	}
        -: 1365:
        2: 1366:	gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -: 1367:
        -: 1368:	//discard card from hand
        2: 1369:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1370:
        -: 1371:	//discard trashed card
        4: 1372:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -: 1373:	{
        4: 1374:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1375:	    {
        2: 1376:	      discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        2: 1377:	      break;
        -: 1378:	    }
        -: 1379:	}
        2: 1380:	return 0;
        -: 1381:}
        -: 1382:
        -: 1383://end of dominion.c
        -: 1384:
make[1]: Entering directory `/nfs/stak/users/dongxiao/CS362/CS362-W2019/projects/dongxiao/dominion'
./cardtest4
----------------------- Testing feast ----------------------
Pick a card that is out of supply
