        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*********************************
        -:    2:*  Author: Derk Kieft (kieftd)
        -:    3:*  File: randomtestadventurer.c testing Village
        -:    4:*
        -:    5:* 
        -:    6:* Include the following lines in makefile:
        -:    7:*
        -:    8:* : randomtestadventurer.c dominion.o rngs.o
        -:    9:*      gcc -o randomtestadventurer -g  randomtestadventurer.c dominion.o rngs.o $(CFLAGS)
        -:   10:********************************/
        -:   11:
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include <string.h>
        -:   15:#include <stdio.h>
        -:   16:#include <assert.h>
        -:   17:#include "rngs.h"
        -:   18:#include <stdlib.h>
        -:   19:#include <time.h> 
        -:   20:
        -:   21:#define TESTCARD "adventurer"
        -:   22:
      221:   23:int randomGen (int lower, int upper) {
        -:   24:    int result;
      442:   25:    result = (rand() % 
      221:   26:        (upper - lower + 1)) + lower; 
        -:   27:        //printf("Result is: %d ", result); 
        -:   28:
      221:   29:    return result;
        -:   30:}
        -:   31:
        -:   32:
        1:   33:int main() {
        1:   34:    int newCards = 0;
        1:   35:    int discarded = 1;
        -:   36:    //int xtraCoins = 0;
        1:   37:    int shuffledCards = 0;
        -:   38:
        1:   39:    int drawntreasure=0;
        1:   40:    int handpos = 0,  bonus = 0, choice1 = 0, choice2 = 0, choice3 = 0;
        -:   41:    //int remove1, remove2;
        1:   42:    int seed = randomGen(0, 3000);
        1:   43:    int numPlayers = 2;
        1:   44:    int thisPlayer = 0;
        -:   45:	struct gameState G, testG;
        1:   46:	int k[10] = {adventurer, gardens, village, minion, mine, cutpurse,
        -:   47:			sea_hag, tribute, smithy, council_room};
        -:   48:
        -:   49:	// initialize a game state and player cards
        1:   50:	initializeGame(numPlayers, k, seed, &G);
        -:   51:
        -:   52:    /*LOOP TEST PORCESS*/
        -:   53:int x;    
       11:   54:for (x=0; x<10;x++)  {
        -:   55:
        -:   56:  /*RESET VARIABLES AS NEEDED*/
       10:   57:    newCards = 0;
       10:   58:    discarded = 1;
        -:   59:    //int xtraCoins = 0;
       10:   60:    shuffledCards = 0;
       10:   61:    drawntreasure=0;
        -:   62:    //int remove1, remove2;
       10:   63:    numPlayers = 2;
       10:   64:    thisPlayer = 0;
        -:   65:
        -:   66:    /*RANDOMIZE CARD INPUT*/
       10:   67:    handpos = randomGen(0,5); 
       10:   68:    choice1 = randomGen(0,2); 
       10:   69:    choice2 = randomGen(0,2); 
       10:   70:    choice3 = randomGen(0,2); 
       10:   71:    bonus = randomGen(0,3);
        -:   72:
        -:   73:    /*RANDOMIZE GAME STATE*/
       10:   74:    G.whoseTurn = randomGen(0,1); 
       10:   75:    G.phase = randomGen(1,3); 
       10:   76:    G.coins = randomGen(0,8); // Use as you see fit! 
       10:   77:    G.numBuys = randomGen(0,5); // Starts at 1 each turn  
        -:   78:    int i;
       50:   79:    for (i=0; i<MAX_PLAYERS; i++) {
       40:   80:        G.handCount[i] = randomGen(1, MAX_HAND);
        -:   81:        
        -:   82:    }
       50:   83:    for (i=0; i<MAX_PLAYERS; i++) {
       40:   84:        G.deckCount[i] = randomGen(9, 30);
        -:   85:    } 
       50:   86:    for (i=0; i<MAX_PLAYERS; i++) {
       40:   87:        G.discardCount[i] = randomGen(1, MAX_HAND); 
        -:   88:    }
       10:   89:    G.playedCardCount = randomGen(1,5); 
        -:   90:
       10:   91:	printf("----------------- Test Card is %s ----------------\n", TESTCARD);
        -:   92:
        -:   93:	// copy the game state to a test case for later comparison
       10:   94:	memcpy(&testG, &G, sizeof(struct gameState));
       10:   95:  cardEffect(adventurer, choice1, choice2, choice3, &G, handpos, &bonus);
        -:   96:    //ref_adventurer(&G, handpos, &bonus, drawntreasure);
        -:   97:
        -:   98:    //Set expected changes
        -:   99:    //+1 Card +2 Actions
       10:  100:    newCards = 1;
        -:  101:
       10:  102:if (G.numPlayers == testG.numPlayers)  {
       10:  103:    printf("PASS: #Players = %d, expected = %d\n", G.numPlayers, testG.numPlayers);
        -:  104:}
        -:  105:else {
    #####:  106:    printf("FAIL: #Players = %d, expected = %d\n", G.numPlayers, testG.numPlayers);
        -:  107:}
        -:  108: 
       10:  109:if (G.whoseTurn == testG.whoseTurn)
        -:  110:    {
       10:  111:    printf("PASS: whoseTurn = %d, expected = %d\n", G.whoseTurn, testG.whoseTurn);
        -:  112:    }
        -:  113:else {
    #####:  114:    printf("FAIL: whoseTurn = %d, expected = %d\n", G.whoseTurn, testG.whoseTurn);
        -:  115:}
        -:  116:
       10:  117:if (G.phase == testG.phase)
        -:  118:    {
       10:  119:    printf("PASS: phase = %d, expected = %d\n", G.phase, testG.phase);
        -:  120:    }
        -:  121:else {
    #####:  122:    printf("FAIL: phase = %d, expected = %d\n", G.phase, testG.phase);
        -:  123:}
        -:  124:
       10:  125:if (G.numActions == testG.numActions-1)
        -:  126:    {
    #####:  127:    printf("PASS: numActions = %d, expected = %d\n", G.numActions, testG.numActions-1);
        -:  128:    }
        -:  129:else {
       10:  130:    printf("FAIL: numActions = %d, expected = %d\n", G.numActions, testG.numActions-1);
        -:  131:}
        -:  132:
       10:  133:if (G.coins > testG.coins)  //Should have 2-6 more coins
        -:  134:    {
        4:  135:    printf("PASS:coins = %d, expected > %d\n", G.coins, testG.coins);
        -:  136:    }
        -:  137:else {
        6:  138:    printf("FAIL:coins = %d, expected > %d\n", G.coins, testG.coins);
        -:  139:}
        -:  140: 
       10:  141:if (G.phase == testG.phase)
        -:  142:    {
       10:  143:    printf("PASS: phase = %d, expected = %d\n", G.phase, testG.phase);
        -:  144:    }
        -:  145:else {
    #####:  146:    printf("FAIL: phase = %d, expected = %d\n", G.phase, testG.phase);
        -:  147:}
        -:  148:
        -:  149:/*G.hand[MAX_PLAYERS][MAX_HAND]; */
        -:  150: 
       10:  151:if (G.handCount[thisPlayer] == testG.handCount[thisPlayer] + newCards - discarded)
        -:  152:    {
    #####:  153:    printf("PASS: hand count = %d, expected = %d\n", G.handCount[thisPlayer], testG.handCount[thisPlayer] + newCards - discarded);
        -:  154:    }
        -:  155:else {
       10:  156:    printf("FAIL: hand count = %d, expected = %d\n", G.handCount[thisPlayer], testG.handCount[thisPlayer] + newCards - discarded);
        -:  157:    
        -:  158:}
        -:  159:
        -:  160:/*G.deck[MAX_PLAYERS][MAX_DECK]; */
        -:  161:
       10:  162:if (G.deckCount[thisPlayer] == testG.deckCount[thisPlayer])
        -:  163:    {
    #####:  164:    printf("PASS: deck count = %d, expected = %d\n", G.deckCount[thisPlayer], testG.deckCount[thisPlayer] - newCards + shuffledCards);
        -:  165:    }
        -:  166:else {
       10:  167:    printf("FAIL: deck count = %d, expected = %d\n", G.deckCount[thisPlayer], testG.deckCount[thisPlayer] - newCards + shuffledCards);
        -:  168:    
        -:  169:}
        -:  170:
        -:  171:/*G.discard[MAX_PLAYERS][MAX_DECK]; */
        -:  172:
       10:  173:if (G.discardCount[thisPlayer] == testG.discardCount[thisPlayer]-1)  //Card is discarded
        -:  174:    {
    #####:  175:    printf("PASS: discardCount = %d, expected = %d\n", G.discardCount[thisPlayer],testG.discardCount[thisPlayer]-1);
        -:  176:    }
        -:  177:else {
       10:  178:    printf("FAIL: discardCount = %d, expected = %d\n", G.discardCount[thisPlayer],testG.discardCount[thisPlayer]-1);
        -:  179:}
        -:  180:
        -:  181:/*G.playedCards[MAX_DECK]; */
        -:  182:
       10:  183:if (G.playedCardCount+1 == testG.playedCardCount)
        -:  184:    {
    #####:  185:    printf("PASS: playedCardCount = %d, expected = %d\n", G.playedCardCount+1, testG.playedCardCount);
        -:  186:    }
        -:  187:else {
       10:  188:    printf("FAIL: playedCardCount = %d, expected = %d\n", G.playedCardCount+1, testG.playedCardCount);
        -:  189:}
        -:  190:
        -:  191:}
        1:  192:    return 0;
        -:  193:}
