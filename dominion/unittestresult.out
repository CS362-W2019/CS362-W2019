Testing drawCard.
RANDOM TESTS.
ALL TESTS OK
File 'dominion.c'
Lines executed:41.05% of 687
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void *a, const void *b)
        -:    9:{
     7310:   10:  if (*(int *)a > *(int *)b)
     3701:   11:    return 1;
     3609:   12:  if (*(int *)a < *(int *)b)
     3441:   13:    return -1;
      168:   14:  return 0;
     7310:   15:}
        -:   16:
        -:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
        -:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
        -:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        1:   48:  SelectStream(1);
        1:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
        2:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        1:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       22:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
      220:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
      190:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
      100:   69:    }
       10:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        1:   76:  if (numPlayers == 2)
        -:   77:  {
        1:   78:    state->supplyCount[curse] = 10;
        1:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
    #####:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        1:   90:  if (numPlayers == 2)
        -:   91:  {
        1:   92:    state->supplyCount[estate] = 8;
        1:   93:    state->supplyCount[duchy] = 8;
        1:   94:    state->supplyCount[province] = 8;
        1:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        1:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  105:  state->supplyCount[silver] = 40;
        1:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
       42:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
      330:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
      155:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
       20:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
        1:  118:          if (numPlayers == 2)
        -:  119:          {
        1:  120:            state->supplyCount[i] = 8;
        1:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        1:  126:        }
        -:  127:        else
        -:  128:        {
        9:  129:          state->supplyCount[i] = 10;
        -:  130:        }
       10:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
      145:  135:        state->supplyCount[i] = -1;
        -:  136:      }
      145:  137:    }
       20:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
        6:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
        2:  146:    state->deckCount[i] = 0;
       16:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
        6:  149:      state->deck[i][j] = estate;
        6:  150:      state->deckCount[i]++;
        6:  151:    }
       32:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
       14:  154:      state->deck[i][j] = copper;
       14:  155:      state->deckCount[i]++;
       14:  156:    }
        2:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
        6:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
        2:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        2:  166:  }
        -:  167:
        -:  168:  //draw player hands
        6:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
        2:  172:    state->handCount[i] = 0;
        2:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        2:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
       56:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
       27:  184:    state->embargoTokens[i] = 0;
       27:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        1:  188:  state->outpostPlayed = 0;
        1:  189:  state->phase = 0;
        1:  190:  state->numActions = 1;
        1:  191:  state->numBuys = 1;
        1:  192:  state->playedCardCount = 0;
        1:  193:  state->whoseTurn = 0;
        1:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       12:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
        5:  200:    drawCard(state->whoseTurn, state);
        5:  201:  }
        -:  202:
        1:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        1:  205:  return 0;
        1:  206:}
        -:  207:
        -:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       17:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       17:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
       17:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
     2084:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
     1025:  223:    card = floor(Random() * state->deckCount[player]);
     1025:  224:    newDeck[newDeckPos] = state->deck[player][card];
     1025:  225:    newDeckPos++;
   165360:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
    81655:  228:      state->deck[player][i] = state->deck[player][i + 1];
    81655:  229:    }
     1025:  230:    state->deckCount[player]--;
        -:  231:  }
     2084:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
     1025:  234:    state->deck[player][i] = newDeck[i];
     1025:  235:    state->deckCount[player]++;
     1025:  236:  }
        -:  237:
       17:  238:  return 0;
       17:  239:}
        -:  240:
        -:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
       44:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
       44:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
       44:  253:  if (state->numActions < 1)
        -:  254:  {
       37:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
        7:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
       14:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
        7:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
        7:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
        7:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
        7:  279:  return 0;
       44:  280:}
        -:  281:
        -:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
       35:  292:  who = state->whoseTurn;
        -:  293:
       35:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
       35:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
       35:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
       35:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
       35:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
       35:  318:    state->coins = (state->coins) - (getCost(supplyPos));
       35:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
       35:  327:  return 0;
       35:  328:}
        -:  329:
        -:  330:int numHandCards(struct gameState *state)
        -:  331:{
      272:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
        -:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
      564:  337:  int currentPlayer = whoseTurn(state);
      564:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        -:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
       70:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
        -:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
    #####:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
    #####:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
    #####:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
        -:  372:int whoseTurn(struct gameState *state)
        -:  373:{
      915:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
        -:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
       36:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
      460:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
      194:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
      194:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
      194:  388:  }
       36:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
       36:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
       18:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
       18:  395:  }
        -:  396:  else
        -:  397:  {
       18:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
       36:  401:  state->outpostPlayed = 0;
       36:  402:  state->phase = 0;
       36:  403:  state->numActions = 1;
       36:  404:  state->coins = 0;
       36:  405:  state->numBuys = 1;
       36:  406:  state->playedCardCount = 0;
       36:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
      432:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
      180:  413:    drawCard(state->whoseTurn, state); //Draw a card
      180:  414:  }
        -:  415:
        -:  416:  //Update money
       36:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
       36:  419:  return 0;
        -:  420:}
        -:  421:
        -:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
       37:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
        1:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
       36:  434:  j = 0;
     1872:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
      900:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
    #####:  439:      j++;
    #####:  440:    }
      900:  441:  }
       36:  442:  if (j >= 3)
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
       36:  447:  return 0;
       37:  448:}
        -:  449:
        -:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
        2:  454:  int score = 0;
        -:  455:  //score from hand
       14:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
        5:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
    #####:  461:    };
        5:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
        1:  464:      score = score + 1;
        1:  465:    };
        5:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
    #####:  469:    };
        5:  470:    if (state->hand[player][i] == province)
        -:  471:    {
        1:  472:      score = score + 6;
        1:  473:    };
        5:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
    #####:  477:    };
        5:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  481:    };
        5:  482:  }
        -:  483:
        -:  484:  //score from discard
       72:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
       34:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
    #####:  490:    };
       34:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
        3:  493:      score = score + 1;
        3:  494:    };
       34:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
    #####:  498:    };
       34:  499:    if (state->discard[player][i] == province)
        -:  500:    {
        6:  501:      score = score + 6;
        6:  502:    };
       34:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
    #####:  506:    };
       34:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  510:    };
       34:  511:  }
        -:  512:
        -:  513:  //score from deck
       72:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
       34:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
        8:  518:      score = score - 1;
        8:  519:    };
       34:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
        2:  522:      score = score + 1;
        2:  523:    };
       34:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
    #####:  527:    };
       34:  528:    if (state->deck[player][i] == province)
        -:  529:    {
        3:  530:      score = score + 6;
        3:  531:    };
       34:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
    #####:  535:    };
       34:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  539:    };
       34:  540:  }
        -:  541:
        2:  542:  return score;
        -:  543:}
        -:  544:
        -:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
    #####:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
    #####:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
    #####:  573:    }
    #####:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
    #####:  584:    }
    #####:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
    #####:  594:    }
    #####:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
    #####:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
    #####:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
        -:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
     2202:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
     2040:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
     1005:  626:      state->deck[player][i] = state->discard[player][i];
     1005:  627:      state->discard[player][i] = -1;
     1005:  628:    }
        -:  629:
       15:  630:    state->deckCount[player] = state->discardCount[player];
       15:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
       15:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
       15:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
       15:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
       15:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
       15:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
       15:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
       15:  657:    state->deckCount[player]--;
       15:  658:    state->handCount[player]++; //Increment hand count
       15:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
     2187:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
     2187:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
     2187:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
     2187:  672:    state->deckCount[player]--;
     2187:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
     2202:  676:  return 0;
     2202:  677:}
        -:  678:
        -:  679:int getCost(int cardNumber)
        -:  680:{
       70:  681:  switch (cardNumber)
        -:  682:  {
        -:  683:  case curse:
    #####:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
       16:  690:    return 8;
        -:  691:  case copper:
    #####:  692:    return 0;
        -:  693:  case silver:
       28:  694:    return 3;
        -:  695:  case gold:
       18:  696:    return 6;
        -:  697:  case adventurer:
        4:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
        4:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
       70:  740:}
        -:  741:
        -:  742:// Refactor Cards; Adventurer, Remodel, Smithy, Village, Steward
        -:  743:int adventurerCard(int currentPlayer, struct gameState *state, int handPos)
        -:  744:{
        5:  745:  int drawntreasure = 0;
        -:  746:  int cardDrawn;
        -:  747:  int temphand[MAX_HAND];
        5:  748:  int z = 0;
        -:  749:
       32:  750:  while (drawntreasure < 2)
        -:  751:  {
       11:  752:    if (state->deckCount[currentPlayer] < 1)
        -:  753:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  754:      shuffle(currentPlayer, state);
    #####:  755:    }
       11:  756:    drawCard(currentPlayer, state);
       11:  757:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
       20:  758:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       10:  759:      drawntreasure++;
        -:  760:    else
        -:  761:    {
        1:  762:      temphand[z] = cardDrawn;
        1:  763:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1:  764:      z++;
        -:  765:    }
        -:  766:  }
       12:  767:  while (z - 1 >= 0)
        -:  768:  {
        1:  769:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        1:  770:    z = z - 1;
        -:  771:  }
        5:  772:  return 0;
        -:  773:}
        -:  774:
        -:  775:int remodelCard(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -:  776:{
        -:  777:  int i;
        -:  778:  int j;
        -:  779:
    #####:  780:  j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  781:
    #####:  782:  if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  783:  {
    #####:  784:    return -1;
        -:  785:  }
        -:  786:
    #####:  787:  gainCard(choice2, state, 0, currentPlayer);
        -:  788:
        -:  789:  //discard card from hand
    #####:  790:  discardCard(handPos, currentPlayer, state, 0);
        -:  791:
        -:  792:  //discard trashed card
    #####:  793:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  794:  {
    #####:  795:    if (state->hand[currentPlayer][i] == j)
        -:  796:    {
    #####:  797:      discardCard(i, currentPlayer, state, 0);
    #####:  798:      break;
        -:  799:    }
    #####:  800:  }
        -:  801:
    #####:  802:  return 0;
    #####:  803:}
        -:  804:
        -:  805:int smithyCard(int currentPlayer, struct gameState *state, int handPos)
        -:  806:{
        -:  807:  //+3 Cards
        -:  808:  int i;
       16:  809:  for (i = 0; i < 3; i++)
        -:  810:  {
        6:  811:    drawCard(currentPlayer, state);
        6:  812:  }
        -:  813:
        -:  814:  //discard card from hand
        2:  815:  discardCard(handPos, currentPlayer, state, 0);
        2:  816:  return 0;
        -:  817:}
        -:  818:
        -:  819:int villageCard(int currentPlayer, struct gameState *state, int handPos)
        -:  820:{
        -:  821:  //+1 Card
    #####:  822:  drawCard(currentPlayer, state);
        -:  823:
        -:  824:  //+2 Actions
    #####:  825:  state->numActions = state->numActions + 2;
        -:  826:
        -:  827:  //discard played card from hand
    #####:  828:  discardCard(handPos, currentPlayer, state, 0);
    #####:  829:  return 0;
        -:  830:}
        -:  831:
        -:  832:int stewardCard(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3)
        -:  833:{
    #####:  834:  if (choice1 == 1)
        -:  835:  {
        -:  836:    //+2 cards
    #####:  837:    drawCard(currentPlayer, state);
    #####:  838:    drawCard(currentPlayer, state);
    #####:  839:  }
    #####:  840:  else if (choice1 == 2)
        -:  841:  {
        -:  842:    //+2 coins
    #####:  843:    state->coins = state->coins + 2;
    #####:  844:  }
        -:  845:  else
        -:  846:  {
        -:  847:    //trash 2 cards in hand
    #####:  848:    discardCard(choice2, currentPlayer, state, 1);
    #####:  849:    discardCard(choice3, currentPlayer, state, 1);
        -:  850:  }
        -:  851:
        -:  852:  //discard card from hand
    #####:  853:  discardCard(handPos, currentPlayer, state, 0);
    #####:  854:  return 0;
        -:  855:}
        -:  856:
        -:  857:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  858:{
        -:  859:  int i;
        -:  860:  int j;
        -:  861:  int k;
        -:  862:  int x;
        -:  863:  int index;
        7:  864:  int currentPlayer = whoseTurn(state);
        7:  865:  int nextPlayer = currentPlayer + 1;
        -:  866:
        7:  867:  int tributeRevealedCards[2] = {-1, -1};
        -:  868:  int temphand[MAX_HAND]; // moved above the if statement
        7:  869:  int drawntreasure = 0;
        -:  870:  int cardDrawn;
        7:  871:  int z = 0; // this is the counter for the temp hand
        7:  872:  if (nextPlayer > (state->numPlayers - 1))
        -:  873:  {
        5:  874:    nextPlayer = 0;
        5:  875:  }
        -:  876:
        -:  877:  //uses switch to select card and perform actions
        7:  878:  switch (card)
        -:  879:  {
        -:  880:  case adventurer:
        -:  881:
        5:  882:    return adventurerCard(currentPlayer, state, handPos);
        -:  883:
        -:  884:  case council_room:
        -:  885:    //+4 Cards
    #####:  886:    for (i = 0; i < 4; i++)
        -:  887:    {
    #####:  888:      drawCard(currentPlayer, state);
    #####:  889:    }
        -:  890:
        -:  891:    //+1 Buy
    #####:  892:    state->numBuys++;
        -:  893:
        -:  894:    //Each other player draws a card
    #####:  895:    for (i = 0; i < state->numPlayers; i++)
        -:  896:    {
    #####:  897:      if (i != currentPlayer)
        -:  898:      {
    #####:  899:        drawCard(i, state);
    #####:  900:      }
    #####:  901:    }
        -:  902:
        -:  903:    //put played card in played card pile
    #####:  904:    discardCard(handPos, currentPlayer, state, 0);
        -:  905:
    #####:  906:    return 0;
        -:  907:
        -:  908:  case feast:
        -:  909:    //gain card with cost up to 5
        -:  910:    //Backup hand
    #####:  911:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  912:    {
    #####:  913:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  914:      state->hand[currentPlayer][i] = -1;          //Set to nothing
    #####:  915:    }
        -:  916:    //Backup hand
        -:  917:
        -:  918:    //Update Coins for Buy
    #####:  919:    updateCoins(currentPlayer, state, 5);
    #####:  920:    x = 1; //Condition to loop on
    #####:  921:    while (x == 1)
        -:  922:    { //Buy one card
    #####:  923:      if (supplyCount(choice1, state) <= 0)
        -:  924:      {
        -:  925:        if (DEBUG)
        -:  926:          printf("None of that card left, sorry!\n");
        -:  927:
        -:  928:        if (DEBUG)
        -:  929:        {
        -:  930:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  931:        }
    #####:  932:      }
    #####:  933:      else if (state->coins < getCost(choice1))
        -:  934:      {
    #####:  935:        printf("That card is too expensive!\n");
        -:  936:
        -:  937:        if (DEBUG)
        -:  938:        {
        -:  939:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  940:        }
    #####:  941:      }
        -:  942:      else
        -:  943:      {
        -:  944:
        -:  945:        if (DEBUG)
        -:  946:        {
        -:  947:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  948:        }
        -:  949:
    #####:  950:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  951:        x = 0;                                      //No more buying cards
        -:  952:
        -:  953:        if (DEBUG)
        -:  954:        {
        -:  955:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  956:        }
        -:  957:      }
        -:  958:    }
        -:  959:
        -:  960:    //Reset Hand
    #####:  961:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  962:    {
    #####:  963:      state->hand[currentPlayer][i] = temphand[i];
    #####:  964:      temphand[i] = -1;
    #####:  965:    }
        -:  966:    //Reset Hand
        -:  967:
    #####:  968:    return 0;
        -:  969:
        -:  970:  case gardens:
    #####:  971:    return -1;
        -:  972:
        -:  973:  case mine:
    #####:  974:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  975:
    #####:  976:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  977:    {
    #####:  978:      return -1;
        -:  979:    }
        -:  980:
    #####:  981:    if (choice2 > treasure_map || choice2 < curse)
        -:  982:    {
    #####:  983:      return -1;
        -:  984:    }
        -:  985:
    #####:  986:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  987:    {
    #####:  988:      return -1;
        -:  989:    }
        -:  990:
    #####:  991:    gainCard(choice2, state, 2, currentPlayer);
        -:  992:
        -:  993:    //discard card from hand
    #####:  994:    discardCard(handPos, currentPlayer, state, 0);
        -:  995:
        -:  996:    //discard trashed card
    #####:  997:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  998:    {
    #####:  999:      if (state->hand[currentPlayer][i] == j)
        -: 1000:      {
    #####: 1001:        discardCard(i, currentPlayer, state, 0);
    #####: 1002:        break;
        -: 1003:      }
    #####: 1004:    }
        -: 1005:
    #####: 1006:    return 0;
        -: 1007:
        -: 1008:  case remodel:
        -: 1009:
    #####: 1010:    return remodelCard(currentPlayer, state, handPos, choice1, choice2);
        -: 1011:
        -: 1012:  case smithy:
        -: 1013:
        2: 1014:    return smithyCard(currentPlayer, state, handPos);
        -: 1015:
        -: 1016:  case village:
        -: 1017:
    #####: 1018:    return villageCard(currentPlayer, state, handPos);
        -: 1019:
        -: 1020:  case baron:
    #####: 1021:    state->numBuys++; //Increase buys by 1!
    #####: 1022:    if (choice1 > 0)
        -: 1023:    {                             //Boolean true or going to discard an estate
    #####: 1024:      int p = 0;                  //Iterator for hand!
    #####: 1025:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1026:      while (card_not_discarded)
        -: 1027:      {
    #####: 1028:        if (state->hand[currentPlayer][p] == estate)
        -: 1029:        {                    //Found an estate card!
    #####: 1030:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1031:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1032:          state->discardCount[currentPlayer]++;
    #####: 1033:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1034:          {
    #####: 1035:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
    #####: 1036:          }
    #####: 1037:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1038:          state->handCount[currentPlayer]--;
    #####: 1039:          card_not_discarded = 0; //Exit the loop
    #####: 1040:        }
    #####: 1041:        else if (p > state->handCount[currentPlayer])
        -: 1042:        {
        -: 1043:          if (DEBUG)
        -: 1044:          {
        -: 1045:            printf("No estate cards in your hand, invalid choice\n");
        -: 1046:            printf("Must gain an estate if there are any\n");
        -: 1047:          }
    #####: 1048:          if (supplyCount(estate, state) > 0)
        -: 1049:          {
    #####: 1050:            gainCard(estate, state, 0, currentPlayer);
    #####: 1051:            state->supplyCount[estate]--; //Decrement estates
    #####: 1052:            if (supplyCount(estate, state) == 0)
        -: 1053:            {
    #####: 1054:              isGameOver(state);
    #####: 1055:            }
    #####: 1056:          }
    #####: 1057:          card_not_discarded = 0; //Exit the loop
    #####: 1058:        }
        -: 1059:
        -: 1060:        else
        -: 1061:        {
    #####: 1062:          p++; //Next card
        -: 1063:        }
        -: 1064:      }
    #####: 1065:    }
        -: 1066:
        -: 1067:    else
        -: 1068:    {
    #####: 1069:      if (supplyCount(estate, state) > 0)
        -: 1070:      {
    #####: 1071:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1072:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1073:        if (supplyCount(estate, state) == 0)
        -: 1074:        {
    #####: 1075:          isGameOver(state);
    #####: 1076:        }
    #####: 1077:      }
        -: 1078:    }
        -: 1079:
    #####: 1080:    return 0;
        -: 1081:
        -: 1082:  case great_hall:
        -: 1083:    //+1 Card
    #####: 1084:    drawCard(currentPlayer, state);
        -: 1085:
        -: 1086:    //+1 Actions
    #####: 1087:    state->numActions++;
        -: 1088:
        -: 1089:    //discard card from hand
    #####: 1090:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1091:    return 0;
        -: 1092:
        -: 1093:  case minion:
        -: 1094:    //+1 action
    #####: 1095:    state->numActions++;
        -: 1096:
        -: 1097:    //discard card from hand
    #####: 1098:    discardCard(handPos, currentPlayer, state, 0);
        -: 1099:
    #####: 1100:    if (choice1) //+2 coins
        -: 1101:    {
    #####: 1102:      state->coins = state->coins + 2;
    #####: 1103:    }
        -: 1104:
    #####: 1105:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1106:    {
        -: 1107:      //discard hand
    #####: 1108:      while (numHandCards(state) > 0)
        -: 1109:      {
    #####: 1110:        discardCard(handPos, currentPlayer, state, 0);
        -: 1111:      }
        -: 1112:
        -: 1113:      //draw 4
    #####: 1114:      for (i = 0; i < 4; i++)
        -: 1115:      {
    #####: 1116:        drawCard(currentPlayer, state);
    #####: 1117:      }
        -: 1118:
        -: 1119:      //other players discard hand and redraw if hand size > 4
    #####: 1120:      for (i = 0; i < state->numPlayers; i++)
        -: 1121:      {
    #####: 1122:        if (i != currentPlayer)
        -: 1123:        {
    #####: 1124:          if (state->handCount[i] > 4)
        -: 1125:          {
        -: 1126:            //discard hand
    #####: 1127:            while (state->handCount[i] > 0)
        -: 1128:            {
    #####: 1129:              discardCard(handPos, i, state, 0);
        -: 1130:            }
        -: 1131:
        -: 1132:            //draw 4
    #####: 1133:            for (j = 0; j < 4; j++)
        -: 1134:            {
    #####: 1135:              drawCard(i, state);
    #####: 1136:            }
    #####: 1137:          }
    #####: 1138:        }
    #####: 1139:      }
    #####: 1140:    }
    #####: 1141:    return 0;
        -: 1142:
        -: 1143:  case steward:
        -: 1144:
    #####: 1145:    return stewardCard(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1146:
        -: 1147:  case tribute:
    #####: 1148:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1149:    {
    #####: 1150:      if (state->deckCount[nextPlayer] > 0)
        -: 1151:      {
    #####: 1152:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1153:        state->deckCount[nextPlayer]--;
    #####: 1154:      }
    #####: 1155:      else if (state->discardCount[nextPlayer] > 0)
        -: 1156:      {
    #####: 1157:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1158:        state->discardCount[nextPlayer]--;
    #####: 1159:      }
        -: 1160:      else
        -: 1161:      {
        -: 1162:        //No Card to Reveal
        -: 1163:        if (DEBUG)
        -: 1164:        {
        -: 1165:          printf("No cards to reveal\n");
        -: 1166:        }
        -: 1167:      }
    #####: 1168:    }
        -: 1169:
        -: 1170:    else
        -: 1171:    {
    #####: 1172:      if (state->deckCount[nextPlayer] == 0)
        -: 1173:      {
    #####: 1174:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1175:        {
    #####: 1176:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1177:          state->deckCount[nextPlayer]++;
    #####: 1178:          state->discard[nextPlayer][i] = -1;
    #####: 1179:          state->discardCount[nextPlayer]--;
    #####: 1180:        }
        -: 1181:
    #####: 1182:        shuffle(nextPlayer, state); //Shuffle the deck
    #####: 1183:      }
    #####: 1184:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1185:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1186:      state->deckCount[nextPlayer]--;
    #####: 1187:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1188:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1189:      state->deckCount[nextPlayer]--;
        -: 1190:    }
        -: 1191:
    #####: 1192:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1193:    { //If we have a duplicate card, just drop one
    #####: 1194:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1195:      state->playedCardCount++;
    #####: 1196:      tributeRevealedCards[1] = -1;
    #####: 1197:    }
        -: 1198:
    #####: 1199:    for (i = 0; i <= 2; i++)
        -: 1200:    {
    #####: 1201:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1202:      { //Treasure cards
    #####: 1203:        state->coins += 2;
    #####: 1204:      }
        -: 1205:
    #####: 1206:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1207:      { //Victory Card Found
    #####: 1208:        drawCard(currentPlayer, state);
    #####: 1209:        drawCard(currentPlayer, state);
    #####: 1210:      }
        -: 1211:      else
        -: 1212:      { //Action Card
    #####: 1213:        state->numActions = state->numActions + 2;
        -: 1214:      }
    #####: 1215:    }
        -: 1216:
    #####: 1217:    return 0;
        -: 1218:
        -: 1219:  case ambassador:
    #####: 1220:    j = 0; //used to check if player has enough cards to discard
        -: 1221:
    #####: 1222:    if (choice2 > 2 || choice2 < 0)
        -: 1223:    {
    #####: 1224:      return -1;
        -: 1225:    }
        -: 1226:
    #####: 1227:    if (choice1 == handPos)
        -: 1228:    {
    #####: 1229:      return -1;
        -: 1230:    }
        -: 1231:
    #####: 1232:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1233:    {
    #####: 1234:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1235:      {
    #####: 1236:        j++;
    #####: 1237:      }
    #####: 1238:    }
    #####: 1239:    if (j < choice2)
        -: 1240:    {
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:
        -: 1244:    if (DEBUG)
        -: 1245:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1246:
        -: 1247:    //increase supply count for choosen card by amount being discarded
    #####: 1248:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1249:
        -: 1250:    //each other player gains a copy of revealed card
    #####: 1251:    for (i = 0; i < state->numPlayers; i++)
        -: 1252:    {
    #####: 1253:      if (i != currentPlayer)
        -: 1254:      {
    #####: 1255:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1256:      }
    #####: 1257:    }
        -: 1258:
        -: 1259:    //discard played card from hand
    #####: 1260:    discardCard(handPos, currentPlayer, state, 0);
        -: 1261:
        -: 1262:    //trash copies of cards returned to supply
    #####: 1263:    for (j = 0; j < choice2; j++)
        -: 1264:    {
    #####: 1265:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1266:      {
    #####: 1267:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1268:        {
    #####: 1269:          discardCard(i, currentPlayer, state, 1);
    #####: 1270:          break;
        -: 1271:        }
    #####: 1272:      }
    #####: 1273:    }
        -: 1274:
    #####: 1275:    return 0;
        -: 1276:
        -: 1277:  case cutpurse:
        -: 1278:
    #####: 1279:    updateCoins(currentPlayer, state, 2);
    #####: 1280:    for (i = 0; i < state->numPlayers; i++)
        -: 1281:    {
    #####: 1282:      if (i != currentPlayer)
        -: 1283:      {
    #####: 1284:        for (j = 0; j < state->handCount[i]; j++)
        -: 1285:        {
    #####: 1286:          if (state->hand[i][j] == copper)
        -: 1287:          {
    #####: 1288:            discardCard(j, i, state, 0);
    #####: 1289:            break;
        -: 1290:          }
    #####: 1291:          if (j == state->handCount[i])
        -: 1292:          {
    #####: 1293:            for (k = 0; k < state->handCount[i]; k++)
        -: 1294:            {
        -: 1295:              if (DEBUG)
        -: 1296:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1297:            }
    #####: 1298:            break;
        -: 1299:          }
    #####: 1300:        }
    #####: 1301:      }
    #####: 1302:    }
        -: 1303:
        -: 1304:    //discard played card from hand
    #####: 1305:    discardCard(handPos, currentPlayer, state, 0);
        -: 1306:
    #####: 1307:    return 0;
        -: 1308:
        -: 1309:  case embargo:
        -: 1310:    //+2 Coins
    #####: 1311:    state->coins = state->coins + 2;
        -: 1312:
        -: 1313:    //see if selected pile is in play
    #####: 1314:    if (state->supplyCount[choice1] == -1)
        -: 1315:    {
    #####: 1316:      return -1;
        -: 1317:    }
        -: 1318:
        -: 1319:    //add embargo token to selected supply pile
    #####: 1320:    state->embargoTokens[choice1]++;
        -: 1321:
        -: 1322:    //trash card
    #####: 1323:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1324:    return 0;
        -: 1325:
        -: 1326:  case outpost:
        -: 1327:    //set outpost flag
    #####: 1328:    state->outpostPlayed++;
        -: 1329:
        -: 1330:    //discard card
    #####: 1331:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1332:    return 0;
        -: 1333:
        -: 1334:  case salvager:
        -: 1335:    //+1 buy
    #####: 1336:    state->numBuys++;
        -: 1337:
    #####: 1338:    if (choice1)
        -: 1339:    {
        -: 1340:      //gain coins equal to trashed card
    #####: 1341:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1342:      //trash card
    #####: 1343:      discardCard(choice1, currentPlayer, state, 1);
    #####: 1344:    }
        -: 1345:
        -: 1346:    //discard card
    #####: 1347:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1348:    return 0;
        -: 1349:
        -: 1350:  case sea_hag:
    #####: 1351:    for (i = 0; i < state->numPlayers; i++)
        -: 1352:    {
    #####: 1353:      if (i != currentPlayer)
        -: 1354:      {
    #####: 1355:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1356:        state->deckCount[i]--;
    #####: 1357:        state->discardCount[i]++;
    #####: 1358:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
    #####: 1359:      }
    #####: 1360:    }
    #####: 1361:    return 0;
        -: 1362:
        -: 1363:  case treasure_map:
        -: 1364:    //search hand for another treasure_map
    #####: 1365:    index = -1;
    #####: 1366:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1367:    {
    #####: 1368:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1369:      {
    #####: 1370:        index = i;
    #####: 1371:        break;
        -: 1372:      }
    #####: 1373:    }
    #####: 1374:    if (index > -1)
        -: 1375:    {
        -: 1376:      //trash both treasure cards
    #####: 1377:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1378:      discardCard(index, currentPlayer, state, 1);
        -: 1379:
        -: 1380:      //gain 4 Gold cards
    #####: 1381:      for (i = 0; i < 4; i++)
        -: 1382:      {
    #####: 1383:        gainCard(gold, state, 1, currentPlayer);
    #####: 1384:      }
        -: 1385:
        -: 1386:      //return success
    #####: 1387:      return 1;
        -: 1388:    }
        -: 1389:
        -: 1390:    //no second treasure_map found in hand
    #####: 1391:    return -1;
        -: 1392:  }
        -: 1393:
    #####: 1394:  return -1;
        7: 1395:}
        -: 1396:
        -: 1397:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1398:{
        -: 1399:
        -: 1400:  //if card is not trashed, added to Played pile
        2: 1401:  if (trashFlag < 1)
        -: 1402:  {
        -: 1403:    //add card to played pile
        2: 1404:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1405:    state->playedCardCount++;
        2: 1406:  }
        -: 1407:
        -: 1408:  //set played card to -1
        2: 1409:  state->hand[currentPlayer][handPos] = -1;
        -: 1410:
        -: 1411:  //remove card from player's hand
        2: 1412:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1413:  {
        -: 1414:    //reduce number of cards in hand
    #####: 1415:    state->handCount[currentPlayer]--;
    #####: 1416:  }
        2: 1417:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1418:  {
        -: 1419:    //reduce number of cards in hand
    #####: 1420:    state->handCount[currentPlayer]--;
    #####: 1421:  }
        -: 1422:  else
        -: 1423:  {
        -: 1424:    //replace discarded card with last card in hand
        2: 1425:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1426:    //set last card to -1
        2: 1427:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1428:    //reduce number of cards in hand
        2: 1429:    state->handCount[currentPlayer]--;
        -: 1430:  }
        -: 1431:
        2: 1432:  return 0;
        -: 1433:}
        -: 1434:
        -: 1435:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1436:{
        -: 1437:  //Note: supplyPos is enum of choosen card
        -: 1438:
        -: 1439:  //check if supply pile is empty (0) or card is not used in game (-1)
       35: 1440:  if (supplyCount(supplyPos, state) < 1)
        -: 1441:  {
    #####: 1442:    return -1;
        -: 1443:  }
        -: 1444:
        -: 1445:  //added card for [whoseTurn] current player:
        -: 1446:  // toFlag = 0 : add to discard
        -: 1447:  // toFlag = 1 : add to deck
        -: 1448:  // toFlag = 2 : add to hand
        -: 1449:
       35: 1450:  if (toFlag == 1)
        -: 1451:  {
    #####: 1452:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1453:    state->deckCount[player]++;
    #####: 1454:  }
       35: 1455:  else if (toFlag == 2)
        -: 1456:  {
    #####: 1457:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1458:    state->handCount[player]++;
    #####: 1459:  }
        -: 1460:  else
        -: 1461:  {
       35: 1462:    state->discard[player][state->discardCount[player]] = supplyPos;
       35: 1463:    state->discardCount[player]++;
        -: 1464:  }
        -: 1465:
        -: 1466:  //decrease number in supply pile
       35: 1467:  state->supplyCount[supplyPos]--;
        -: 1468:
       35: 1469:  return 0;
       35: 1470:}
        -: 1471:
        -: 1472:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1473:{
        -: 1474:  int i;
        -: 1475:
        -: 1476:  //reset coin count
       44: 1477:  state->coins = 0;
        -: 1478:
        -: 1479:  //add coins for each Treasure card in player's hand
      556: 1480:  for (i = 0; i < state->handCount[player]; i++)
        -: 1481:  {
      234: 1482:    if (state->hand[player][i] == copper)
        -: 1483:    {
      100: 1484:      state->coins += 1;
      100: 1485:    }
      134: 1486:    else if (state->hand[player][i] == silver)
        -: 1487:    {
       49: 1488:      state->coins += 2;
       49: 1489:    }
       85: 1490:    else if (state->hand[player][i] == gold)
        -: 1491:    {
       13: 1492:      state->coins += 3;
       13: 1493:    }
      234: 1494:  }
        -: 1495:
        -: 1496:  //add bonus
       44: 1497:  state->coins += bonus;
        -: 1498:
       44: 1499:  return 0;
        -: 1500:}
        -: 1501:
        -: 1502://end of dominion.c
