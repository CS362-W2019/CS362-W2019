        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:#define TESTCARD "council_room"
        -:   10:
function main called 1 returned 100% blocks executed 68%
        -:   11:int main()
        -:   12:{
        1:   13:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        1:   14:    int validator = 0;
        -:   15:    struct gameState G, testG;
        1:   16:    int numPlayers = 2;
        1:   17:    int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   18:    int seed = 1000;
        -:   19:    int r;
        1:   20:    int thisPlayer = 0;
        -:   21:
        1:   22:    r = initializeGame(numPlayers, k, seed, &G); // initialize a new game
        1:   23:    if (r == -1)
branch  0 taken 0%
branch  1 taken 100%
        -:   24:    {
    #####:   25:        validator = 1;
    #####:   26:        printf("FAIL when initialize a new game.\n");
    #####:   27:    }
        -:   28:    // copy the game state to a test case
        1:   29:    memcpy(&testG, &G, sizeof(struct gameState));
        1:   30:    printf("\n----------- TEST 1: set initial cards --------------\n");
        -:   31:    //handcount before council_room play
        1:   32:    if (G.handCount[thisPlayer] == testG.handCount[thisPlayer])
branch  0 taken 100%
branch  1 taken 0%
        -:   33:    {
        1:   34:        printf("PASS - handcount before council_room card is %d and expected %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer]);
        1:   35:    }
        -:   36:    else
        -:   37:    {
    #####:   38:        validator = 1;
    #####:   39:        printf("FAIL - handcount before council_room card is %d but expected %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer]);
        -:   40:    }
        1:   41:    testG.handCount[thisPlayer]++; // increment number of card due to council_room card
        -:   42:
        1:   43:    printf("\n----------- TEST 2: check handCount after council_room card --------------\n");
        -:   44:    // play council_room card
        1:   45:    cardEffect(council_room, 0, 0, 0, &testG, 0, 0); //play the council_room card
        1:   46:    if (G.handCount[G.whoseTurn] + 4 == testG.handCount[testG.whoseTurn])
branch  0 taken 100%
branch  1 taken 0%
        -:   47:    {
        1:   48:        printf("PASS - Expected: %d, handCount: %d\n", G.handCount[G.whoseTurn] + 4, testG.handCount[testG.whoseTurn]);
        1:   49:    }
        -:   50:    else
        -:   51:    {
    #####:   52:        validator = 1;
    #####:   53:        printf("FAIL - Expected: %d, handCount: %d\n", G.handCount[G.whoseTurn] + 4, testG.handCount[testG.whoseTurn]);
        -:   54:    }
        -:   55:
        1:   56:    memcpy(&testG, &G, sizeof(struct gameState));
        1:   57:    cardEffect(council_room, 0, 0, 0, &testG, 0, 0); //play the council_room card
        -:   58:
        1:   59:    printf("\n----------- TEST 3: check number of buy card --------------\n");
        1:   60:    if (G.numBuys + 1 == testG.numBuys)
branch  0 taken 100%
branch  1 taken 0%
        -:   61:    {
        1:   62:        printf("PASS - Expected: %d, Buy card: %d\n", G.numBuys + 1, testG.numBuys);
        1:   63:    }
        -:   64:    else
        -:   65:    {
    #####:   66:        validator = 1;
    #####:   67:        printf("FAIL - Expected: %d, Buy card: %d\n", G.numBuys + 1, testG.numBuys);
        -:   68:    }
        -:   69:
        1:   70:    if (validator == 0)
branch  0 taken 100%
branch  1 taken 0%
        -:   71:    {
        1:   72:        printf("\n\n");
        1:   73:        printf("***********************************************\n");
        1:   74:        printf("*** All tests passed for council_room card! ***\n");
        1:   75:        printf("***********************************************\n");
        1:   76:        printf("\n\n");
        1:   77:    }
        -:   78:    else
        -:   79:    {
    #####:   80:        printf("\n\n");
    #####:   81:        printf("******************************************\n");
    #####:   82:        printf("*** There is BUG in council_room card! ***\n");
    #####:   83:        printf("******************************************\n");
    #####:   84:        printf("\n\n");
        -:   85:    }
        -:   86:
        1:   87:    return 0;
        -:   88:}
